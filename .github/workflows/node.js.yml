# This workflow will do a clean install of node dependencies, build the source code and run tests across different versions of node
# For more information see: https://help.github.com/actions/language-and-framework-guides/using-nodejs-with-github-actions

name: Node.js CI

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ '**' ]

jobs:
  autotasks:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        node-version: [16.x]
    steps:
    - uses: actions/checkout@v2
      with:
        fetch-depth: 2
    - name: Use Node.js ${{ matrix.node-version }}
      uses: actions/setup-node@v1
      with:
        node-version: ${{ matrix.node-version }}
    - name: Changed files
      id: changed-files
      uses: tj-actions/changed-files@v11.2
      with:
        files: |
          packages\/autotasks\/.+\.ts
          packages\/autotasks\/.+\.json
          packages\/autotasks\/package\.json
          packages\/autotasks\/package\-lock\.json
          packages\/utils\/**
    - name: Cache node modules
      uses: actions/cache@v2
      env:
        cache-name: cache-node-modules
      with:
        # npm cache files are stored in `~/.npm` on Linux/macOS
        path: ~/.npm
        key: ${{ runner.os }}-build-v0-${{ env.cache-name }}-${{ hashFiles('**/package-lock.json') }}
    - run: npx lerna bootstrap --ci --scope @goldfinch-eng/autotasks --include-dependencies
    - run: npx lerna run build --stream --scope @goldfinch-eng/autotasks --include-dependencies
    - run: npx lerna run test --stream --scope @goldfinch-eng/autotasks
    - name: deploy-autotasks
      env:
        AUTOTASK_API_KEY: ${{ secrets.AUTOTASK_API_KEY }}
        AUTOTASK_API_SECRET: ${{ secrets.AUTOTASK_API_SECRET }}
      run: npx lerna run deploy --stream --scope @goldfinch-eng/autotasks
      if: github.ref == 'refs/heads/main' && steps.changed-files.outputs.any_changed == 'true'
    - name: Create Sentry release
      uses: getsentry/action-release@v1
      env:
        SENTRY_AUTH_TOKEN: ${{ secrets.SENTRY_AUTH_TOKEN }}
        SENTRY_ORG: ${{ secrets.SENTRY_ORG }}
        SENTRY_PROJECT: autotasks
      with:
        environment: production
        sourcemaps: packages/autotasks/unique-identity-signer/dist
        ignore_empty: true
      if: github.ref == 'refs/heads/main' && steps.changed-files.outputs.any_changed == 'true'

  lint:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        node-version: [16.x]
    steps:
    - uses: actions/checkout@v2
    - name: Use Node.js ${{ matrix.node-version }}
      uses: actions/setup-node@v1
      with:
        node-version: ${{ matrix.node-version }}
    - name: Cache node modules
      uses: actions/cache@v2
      env:
        cache-name: cache-node-modules
      with:
        # npm cache files are stored in `~/.npm` on Linux/macOS
        path: ~/.npm
        key: ${{ runner.os }}-build-v0-${{ env.cache-name }}-${{ hashFiles('**/package-lock.json') }}
    - run: npm install
    - run: npx lerna bootstrap --ci
    - run: npm run build
    - run: npm run lint

  client:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        node-version: [16.x]
    steps:
    - uses: actions/checkout@v2
    - name: Use Node.js ${{ matrix.node-version }}
      uses: actions/setup-node@v1
      with:
        node-version: ${{ matrix.node-version }}
    - name: Cache node modules
      uses: actions/cache@v2
      env:
        cache-name: cache-node-modules
      with:
        # npm cache files are stored in `~/.npm` on Linux/macOS
        path: ~/.npm
        key: ${{ runner.os }}-build-v0-${{ env.cache-name }}-${{ hashFiles('**/package-lock.json') }}
    - run: npx lerna bootstrap --ci --scope @goldfinch-eng/client --include-dependencies
    - run: npx lerna run build --stream --scope @goldfinch-eng/client --include-dependencies
    - run: npx lerna run test --stream --scope @goldfinch-eng/client

  # Disabled until further notice. These tests need a big refactor and dependency upgrade. Arguably a total rewrite.
  # subgraph:
  #   runs-on: ubuntu-latest
  #   strategy:
  #     matrix:
  #       node-version: [16.x]
  #   steps:
  #   - uses: actions/checkout@v2
  #   - name: Use Node.js ${{ matrix.node-version }}
  #     uses: actions/setup-node@v1
  #     with:
  #       node-version: ${{ matrix.node-version }}
  #   - name: Cache node modules
  #     uses: actions/cache@v2
  #     env:
  #       cache-name: cache-node-modules
  #     with:
  #       # npm cache files are stored in `~/.npm` on Linux/macOS
  #       path: ~/.npm
  #       key: ${{ runner.os }}-build-v0-${{ env.cache-name }}-${{ hashFiles('**/package-lock.json') }}
  #   - run: npx lerna bootstrap --ci --scope @goldfinch-eng/subgraph --include-dependencies
  #   - run: npx lerna run build --stream --scope @goldfinch-eng/subgraph --include-dependencies
  #   - run: npx lerna run test --stream --scope @goldfinch-eng/subgraph

  functions:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        node-version: [16.x]
    steps:
      - uses: actions/checkout@v2
        with:
          fetch-depth: 2
      - uses: actions/setup-java@v2
        with:
          distribution: 'adopt'
          java-version: '11'
      - name: Use Node.js ${{ matrix.node-version }}
        uses: actions/setup-node@v1
        with:
          node-version: ${{ matrix.node-version }}
      - name: Cache node modules
        uses: actions/cache@v2
        env:
          cache-name: cache-node-modules
        with:
          # npm cache files are stored in `~/.npm` on Linux/macOS
          path: ~/.npm
          key: ${{ runner.os }}-build-v0-${{ env.cache-name }}-${{ hashFiles('**/package-lock.json') }}
      - name: Changed files
        id: changed-files
        uses: tj-actions/changed-files@v11.2
        with:
          files: |
            packages\/functions\/src\/.+\.ts
            packages\/functions\/scripts\/.+\.ts
            packages\/functions\/package\.json
            packages\/functions\/package\-lock\.json
            packages\/utils\/**
      - name: Cache Firestore emulator
        uses: actions/cache@v2
        env:
          cache-name: cache-firestore-emulator
        with:
          path: ~/.cache/firebase/emulators
          key: ${{ runner.os }}-build-v0-${{ env.cache-name }}-${{ hashFiles('**/package-lock.json') }}
      - run: npx lerna bootstrap --ci --scope @goldfinch-eng/functions --include-dependencies
      - run: npx lerna run build --stream --scope @goldfinch-eng/functions --include-dependencies
      - run: npx lerna run ci_test --stream --scope @goldfinch-eng/functions
      - name: deploy-dev
        env:
          FIREBASE_TOKEN: ${{ secrets.FIREBASE_TOKEN }}
        run: npx lerna run ci_functions_config_set_dev --stream --scope @goldfinch-eng/functions && npx lerna exec --stream --scope @goldfinch-eng/functions "npm run pre-deploy && npx firebase deploy --only functions --project dev"
        if: github.ref == 'refs/heads/main' && steps.changed-files.outputs.any_changed == 'true'
      - name: Create Sentry release
        uses: getsentry/action-release@v1
        env:
          SENTRY_AUTH_TOKEN: ${{ secrets.SENTRY_AUTH_TOKEN }}
          SENTRY_ORG: ${{ secrets.SENTRY_ORG }}
          SENTRY_PROJECT: server-functions-dev
        with:
          environment: dev
          sourcemaps: packages/functions/lib/functions
          ignore_empty: true
        if: github.ref == 'refs/heads/main' && steps.changed-files.outputs.any_changed == 'true' 
      - name: deploy-prod
        env:
          FIREBASE_TOKEN: ${{ secrets.FIREBASE_TOKEN }}
        run: npx lerna run ci_functions_config_set_prod --stream --scope @goldfinch-eng/functions && npx lerna exec --scope @goldfinch-eng/functions "npm run pre-deploy && npx firebase deploy --only functions --project prod"
        if: github.ref == 'refs/heads/main' && steps.changed-files.outputs.any_changed == 'true'
      - name: Create Sentry release
        uses: getsentry/action-release@v1
        env:
          SENTRY_AUTH_TOKEN: ${{ secrets.SENTRY_AUTH_TOKEN }}
          SENTRY_ORG: ${{ secrets.SENTRY_ORG }}
          SENTRY_PROJECT: server-functions-prod
        with:
          environment: production
          sourcemaps: packages/functions/lib/functions
          ignore_empty: true
        if: github.ref == 'refs/heads/main' && steps.changed-files.outputs.any_changed == 'true'