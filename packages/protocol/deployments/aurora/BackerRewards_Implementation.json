{
  "address": "0xcd5cDb133c285711D7F398E16054954899A0936e",
  "abi": [
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "owner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amountOfTranchedPoolRewards",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amountOfSeniorPoolRewards",
          "type": "uint256"
        }
      ],
      "name": "BackerRewardsClaimed",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "owner",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "maxInterestDollarsEligible",
          "type": "uint256"
        }
      ],
      "name": "BackerRewardsSetMaxInterestDollarsEligible",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "owner",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "totalInterestReceived",
          "type": "uint256"
        }
      ],
      "name": "BackerRewardsSetTotalInterestReceived",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "owner",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "totalRewards",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "totalRewardPercentOfTotalGFI",
          "type": "uint256"
        }
      ],
      "name": "BackerRewardsSetTotalRewards",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "Paused",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "account",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "sender",
          "type": "address"
        }
      ],
      "name": "RoleGranted",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "account",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "sender",
          "type": "address"
        }
      ],
      "name": "RoleRevoked",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [],
      "name": "SafetyCheckTriggered",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "Unpaused",
      "type": "event"
    },
    {
      "inputs": [],
      "name": "DEFAULT_ADMIN_ROLE",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "OWNER_ROLE",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "PAUSER_ROLE",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "owner",
          "type": "address"
        }
      ],
      "name": "__BaseUpgradeablePausable__init",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "__PauserPausable__init",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "owner",
          "type": "address"
        },
        {
          "internalType": "contract GoldfinchConfig",
          "name": "_config",
          "type": "address"
        }
      ],
      "name": "__initialize__",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_interestPaymentAmount",
          "type": "uint256"
        }
      ],
      "name": "allocateRewards",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "config",
      "outputs": [
        {
          "internalType": "contract GoldfinchConfig",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "contract ITranchedPool",
          "name": "pool",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "fiduSharePriceAtDrawdown",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "principalDeployedAtDrawdown",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "rewardsAccumulatorAtDrawdown",
          "type": "uint256"
        }
      ],
      "name": "forceInitializeStakingRewardsPoolInfo",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        }
      ],
      "name": "getRoleAdmin",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "internalType": "uint256",
          "name": "index",
          "type": "uint256"
        }
      ],
      "name": "getRoleMember",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        }
      ],
      "name": "getRoleMemberCount",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "grantRole",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "hasRole",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "isAdmin",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "maxInterestDollarsEligible",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "sliceIndex",
          "type": "uint256"
        }
      ],
      "name": "onTranchedPoolDrawdown",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "pause",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "paused",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "contract ITranchedPool",
          "name": "",
          "type": "address"
        }
      ],
      "name": "poolStakingRewards",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "accumulatedRewardsPerTokenAtLastCheckpoint",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "lastUpdateTime",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "poolTokenClaimableRewards",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "pools",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "accRewardsPerPrincipalDollar",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "renounceRole",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "revokeRole",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_maxInterestDollarsEligible",
          "type": "uint256"
        }
      ],
      "name": "setMaxInterestDollarsEligible",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "poolAddress",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "setPoolTokenAccRewardsPerPrincipalDollarAtMint",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_totalInterestReceived",
          "type": "uint256"
        }
      ],
      "name": "setTotalInterestReceived",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_totalRewards",
          "type": "uint256"
        }
      ],
      "name": "setTotalRewards",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "stakingRewardsClaimed",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "stakingRewardsEarnedSinceLastWithdraw",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "tokenStakingRewards",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "accumulatedRewardsPerTokenAtLastWithdraw",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "tokens",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "rewardsClaimed",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "accRewardsPerPrincipalDollarAtMint",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "totalInterestReceived",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "totalRewardPercentOfTotalGFI",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "totalRewards",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "unpause",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "withdraw",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256[]",
          "name": "tokenIds",
          "type": "uint256[]"
        }
      ],
      "name": "withdrawMultiple",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    }
  ],
  "transactionHash": "0x878bbfe52e8bb800fe5a8179fd8384ca4c73aa824f40196611326f0bf35f759d",
  "receipt": {
    "to": null,
    "from": "0x618C20c64cAc5211E099D355ba213790708e7462",
    "contractAddress": "0xcd5cDb133c285711D7F398E16054954899A0936e",
    "transactionIndex": 0,
    "gasUsed": "4087093",
    "logsBloom": "0x
    "blockHash": "0xa0c63573d629025111ab85a8b44ab8b39ea16311d603bfee3f40045a6397bac7",
    "transactionHash": "0x878bbfe52e8bb800fe5a8179fd8384ca4c73aa824f40196611326f0bf35f759d",
    "logs": [],
    "blockNumber": 100918675,
    "cumulativeGasUsed": "0",
    "status": 1,
    "byzantium": true
  },
  "args": [],
  "solcInputHash": "104401be22032d67ce8b53c8c790866b",
  "metadata": "{\"compiler\":{\"version\":\"0.6.12+commit.27d51765\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amountOfTranchedPoolRewards\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amountOfSeniorPoolRewards\",\"type\":\"uint256\"}],\"name\":\"BackerRewardsClaimed\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"maxInterestDollarsEligible\",\"type\":\"uint256\"}],\"name\":\"BackerRewardsSetMaxInterestDollarsEligible\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"totalInterestReceived\",\"type\":\"uint256\"}],\"name\":\"BackerRewardsSetTotalInterestReceived\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"totalRewards\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"totalRewardPercentOfTotalGFI\",\"type\":\"uint256\"}],\"name\":\"BackerRewardsSetTotalRewards\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"Paused\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"}],\"name\":\"RoleGranted\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"}],\"name\":\"RoleRevoked\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[],\"name\":\"SafetyCheckTriggered\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"Unpaused\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"DEFAULT_ADMIN_ROLE\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"OWNER_ROLE\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"PAUSER_ROLE\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"__BaseUpgradeablePausable__init\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"__PauserPausable__init\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"contract GoldfinchConfig\",\"name\":\"_config\",\"type\":\"address\"}],\"name\":\"__initialize__\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_interestPaymentAmount\",\"type\":\"uint256\"}],\"name\":\"allocateRewards\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"config\",\"outputs\":[{\"internalType\":\"contract GoldfinchConfig\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract ITranchedPool\",\"name\":\"pool\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"fiduSharePriceAtDrawdown\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"principalDeployedAtDrawdown\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"rewardsAccumulatorAtDrawdown\",\"type\":\"uint256\"}],\"name\":\"forceInitializeStakingRewardsPoolInfo\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"}],\"name\":\"getRoleAdmin\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"uint256\",\"name\":\"index\",\"type\":\"uint256\"}],\"name\":\"getRoleMember\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"}],\"name\":\"getRoleMemberCount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"grantRole\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"hasRole\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"isAdmin\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"maxInterestDollarsEligible\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"sliceIndex\",\"type\":\"uint256\"}],\"name\":\"onTranchedPoolDrawdown\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"pause\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"paused\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract ITranchedPool\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"poolStakingRewards\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"accumulatedRewardsPerTokenAtLastCheckpoint\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"lastUpdateTime\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"poolTokenClaimableRewards\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"pools\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"accRewardsPerPrincipalDollar\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"renounceRole\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"revokeRole\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_maxInterestDollarsEligible\",\"type\":\"uint256\"}],\"name\":\"setMaxInterestDollarsEligible\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"poolAddress\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"setPoolTokenAccRewardsPerPrincipalDollarAtMint\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_totalInterestReceived\",\"type\":\"uint256\"}],\"name\":\"setTotalInterestReceived\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_totalRewards\",\"type\":\"uint256\"}],\"name\":\"setTotalRewards\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"stakingRewardsClaimed\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"stakingRewardsEarnedSinceLastWithdraw\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"tokenStakingRewards\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"accumulatedRewardsPerTokenAtLastWithdraw\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"tokens\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"rewardsClaimed\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"accRewardsPerPrincipalDollarAtMint\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalInterestReceived\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalRewardPercentOfTotalGFI\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalRewards\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"unpause\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"withdraw\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256[]\",\"name\":\"tokenIds\",\"type\":\"uint256[]\"}],\"name\":\"withdrawMultiple\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"allocateRewards(uint256)\":{\"params\":{\"_interestPaymentAmount\":\"The amount of total dollars the interest payment, expects 10^6 value\"}},\"forceInitializeStakingRewardsPoolInfo(address,uint256,uint256,uint256)\":{\"details\":\"this is _only_ meant to be called on pools that didnt qualify for the backer rewards airdrop       but were deployed before this contract.\"},\"getRoleAdmin(bytes32)\":{\"details\":\"Returns the admin role that controls `role`. See {grantRole} and {revokeRole}. To change a role's admin, use {_setRoleAdmin}.\"},\"getRoleMember(bytes32,uint256)\":{\"details\":\"Returns one of the accounts that have `role`. `index` must be a value between 0 and {getRoleMemberCount}, non-inclusive. Role bearers are not sorted in any particular way, and their ordering may change at any point. WARNING: When using {getRoleMember} and {getRoleMemberCount}, make sure you perform all queries on the same block. See the following https://forum.openzeppelin.com/t/iterating-over-elements-on-enumerableset-in-openzeppelin-contracts/2296[forum post] for more information.\"},\"getRoleMemberCount(bytes32)\":{\"details\":\"Returns the number of accounts that have `role`. Can be used together with {getRoleMember} to enumerate all bearers of a role.\"},\"grantRole(bytes32,address)\":{\"details\":\"Grants `role` to `account`. If `account` had not been already granted `role`, emits a {RoleGranted} event. Requirements: - the caller must have ``role``'s admin role.\"},\"hasRole(bytes32,address)\":{\"details\":\"Returns `true` if `account` has been granted `role`.\"},\"onTranchedPoolDrawdown(uint256)\":{\"details\":\"initializes rewards info for the calling TranchedPool\"},\"pause()\":{\"details\":\"Pauses all functions guarded by Pause See {Pausable-_pause}. Requirements: - the caller must have the PAUSER_ROLE.\"},\"paused()\":{\"details\":\"Returns true if the contract is paused, and false otherwise.\"},\"poolTokenClaimableRewards(uint256)\":{\"params\":{\"tokenId\":\"Pool token id\"},\"returns\":{\"_0\":\"The amount of GFI claimable\"}},\"renounceRole(bytes32,address)\":{\"details\":\"Revokes `role` from the calling account. Roles are often managed via {grantRole} and {revokeRole}: this function's purpose is to provide a mechanism for accounts to lose their privileges if they are compromised (such as when a trusted device is misplaced). If the calling account had been granted `role`, emits a {RoleRevoked} event. Requirements: - the caller must be `account`.\"},\"revokeRole(bytes32,address)\":{\"details\":\"Revokes `role` from `account`. If `account` had been granted `role`, emits a {RoleRevoked} event. Requirements: - the caller must have ``role``'s admin role.\"},\"setMaxInterestDollarsEligible(uint256)\":{\"params\":{\"_maxInterestDollarsEligible\":\"The amount of interest dollars eligible for GFI rewards, expects 10^18 value\"}},\"setPoolTokenAccRewardsPerPrincipalDollarAtMint(address,uint256)\":{\"params\":{\"tokenId\":\"Pool token id\"}},\"setTotalInterestReceived(uint256)\":{\"params\":{\"_totalInterestReceived\":\"The amount of interest the protocol has received to date, expects 10^6 value\"}},\"setTotalRewards(uint256)\":{\"params\":{\"_totalRewards\":\"The amount of GFI rewards available, expects 10^18 value\"}},\"stakingRewardsClaimed(uint256)\":{\"params\":{\"tokenId\":\"Pool token id\"},\"returns\":{\"_0\":\"The amount of GFI claimed\"}},\"stakingRewardsEarnedSinceLastWithdraw(uint256)\":{\"params\":{\"tokenId\":\"token id to get rewards\"},\"returns\":{\"_0\":\"amount of rewards\"}},\"unpause()\":{\"details\":\"Unpauses the contract See {Pausable-_unpause}. Requirements: - the caller must have the Pauser role\"},\"withdraw(uint256)\":{\"params\":{\"tokenId\":\"Pool token id\"}},\"withdrawMultiple(uint256[])\":{\"params\":{\"tokenIds\":\"Array of pool token id\"}}},\"version\":1},\"userdoc\":{\"events\":{\"SafetyCheckTriggered()\":{\"notice\":\"Emitted when a safety check fails\"}},\"kind\":\"user\",\"methods\":{\"allocateRewards(uint256)\":{\"notice\":\"Calculates the accRewardsPerPrincipalDollar for a given pool,          when a interest payment is received by the protocol\"},\"forceInitializeStakingRewardsPoolInfo(address,uint256,uint256,uint256)\":{\"notice\":\"intialize the first slice of a StakingRewardsPoolInfo\"},\"maxInterestDollarsEligible()\":{\"notice\":\"interest $ eligible for gfi rewards, times 1e18\"},\"onTranchedPoolDrawdown(uint256)\":{\"notice\":\"callback for TranchedPools when they drawdown\"},\"poolStakingRewards(address)\":{\"notice\":\"Staking rewards info for each pool\"},\"poolTokenClaimableRewards(uint256)\":{\"notice\":\"Calculate the gross available gfi rewards for a PoolToken\"},\"pools(address)\":{\"notice\":\"pool.address -> BackerRewardsInfo\"},\"setMaxInterestDollarsEligible(uint256)\":{\"notice\":\"Set the max dollars across the entire protocol that are eligible for GFI rewards\"},\"setPoolTokenAccRewardsPerPrincipalDollarAtMint(address,uint256)\":{\"notice\":\"When a pool token is minted for multiple drawdowns,  set accRewardsPerPrincipalDollarAtMint to the current accRewardsPerPrincipalDollar price\"},\"setTotalInterestReceived(uint256)\":{\"notice\":\"Set the total interest received to date. This should only be called once on contract deploy.\"},\"setTotalRewards(uint256)\":{\"notice\":\"Set the total gfi rewards and the % of total GFI\"},\"stakingRewardsClaimed(uint256)\":{\"notice\":\"Calculates the amount of staking rewards already claimed for a PoolToken. This function is provided for the sake of external (e.g. frontend client) consumption; it is not necessary as an input to the mutative calculations in this contract.\"},\"stakingRewardsEarnedSinceLastWithdraw(uint256)\":{\"notice\":\"Returns the amount of staking rewards earned by a given token since the last time its staking rewards were withdrawn.\"},\"tokenStakingRewards(uint256)\":{\"notice\":\"Staking rewards info for each pool token\"},\"tokens(uint256)\":{\"notice\":\"poolTokenId -> BackerRewardsTokenInfo\"},\"totalInterestReceived()\":{\"notice\":\"counter of total interest repayments, times 1e6\"},\"totalRewardPercentOfTotalGFI()\":{\"notice\":\"totalRewards/totalGFISupply * 100, times 1e18\"},\"totalRewards()\":{\"notice\":\"total amount of GFI rewards available, times 1e18\"},\"withdraw(uint256)\":{\"notice\":\"PoolToken request to withdraw all allocated rewards\"},\"withdrawMultiple(uint256[])\":{\"notice\":\"PoolToken request to withdraw multiple PoolTokens allocated rewards\"}},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/rewards/BackerRewards.sol\":\"BackerRewards\"},\"evmVersion\":\"istanbul\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":100},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts-ethereum-package/contracts/GSN/Context.sol\":{\"content\":\"pragma solidity ^0.6.0;\\nimport \\\"../Initializable.sol\\\";\\n\\n/*\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with GSN meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\ncontract ContextUpgradeSafe is Initializable {\\n    // Empty internal constructor, to prevent people from mistakenly deploying\\n    // an instance of this contract, which should be used via inheritance.\\n\\n    function __Context_init() internal initializer {\\n        __Context_init_unchained();\\n    }\\n\\n    function __Context_init_unchained() internal initializer {\\n\\n\\n    }\\n\\n\\n    function _msgSender() internal view virtual returns (address payable) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes memory) {\\n        this; // silence state mutability warning without generating bytecode - see https://github.com/ethereum/solidity/issues/2691\\n        return msg.data;\\n    }\\n\\n    uint256[50] private __gap;\\n}\\n\",\"keccak256\":\"0xe81686511d62f18b2d9c693c2c94c0a789c690de63aa90e15451ebf65c5bfd3e\"},\"@openzeppelin/contracts-ethereum-package/contracts/Initializable.sol\":{\"content\":\"pragma solidity >=0.4.24 <0.7.0;\\n\\n\\n/**\\n * @title Initializable\\n *\\n * @dev Helper contract to support initializer functions. To use it, replace\\n * the constructor with a function that has the `initializer` modifier.\\n * WARNING: Unlike constructors, initializer functions must be manually\\n * invoked. This applies both to deploying an Initializable contract, as well\\n * as extending an Initializable contract via inheritance.\\n * WARNING: When used with inheritance, manual care must be taken to not invoke\\n * a parent initializer twice, or ensure that all initializers are idempotent,\\n * because this is not dealt with automatically as with constructors.\\n */\\ncontract Initializable {\\n\\n  /**\\n   * @dev Indicates that the contract has been initialized.\\n   */\\n  bool private initialized;\\n\\n  /**\\n   * @dev Indicates that the contract is in the process of being initialized.\\n   */\\n  bool private initializing;\\n\\n  /**\\n   * @dev Modifier to use in the initializer function of a contract.\\n   */\\n  modifier initializer() {\\n    require(initializing || isConstructor() || !initialized, \\\"Contract instance has already been initialized\\\");\\n\\n    bool isTopLevelCall = !initializing;\\n    if (isTopLevelCall) {\\n      initializing = true;\\n      initialized = true;\\n    }\\n\\n    _;\\n\\n    if (isTopLevelCall) {\\n      initializing = false;\\n    }\\n  }\\n\\n  /// @dev Returns true if and only if the function is running in the constructor\\n  function isConstructor() private view returns (bool) {\\n    // extcodesize checks the size of the code stored in an address, and\\n    // address returns the current address. Since the code is still not\\n    // deployed when running a constructor, any checks on its code size will\\n    // yield zero, making it an effective way to detect if a contract is\\n    // under construction or not.\\n    address self = address(this);\\n    uint256 cs;\\n    assembly { cs := extcodesize(self) }\\n    return cs == 0;\\n  }\\n\\n  // Reserved storage space to allow for layout changes in the future.\\n  uint256[50] private ______gap;\\n}\\n\",\"keccak256\":\"0x9bfec92e36234ecc99b5d37230acb6cd1f99560233753162204104a4897e8721\"},\"@openzeppelin/contracts-ethereum-package/contracts/access/AccessControl.sol\":{\"content\":\"pragma solidity ^0.6.0;\\n\\nimport \\\"../utils/EnumerableSet.sol\\\";\\nimport \\\"../utils/Address.sol\\\";\\nimport \\\"../GSN/Context.sol\\\";\\nimport \\\"../Initializable.sol\\\";\\n\\n/**\\n * @dev Contract module that allows children to implement role-based access\\n * control mechanisms.\\n *\\n * Roles are referred to by their `bytes32` identifier. These should be exposed\\n * in the external API and be unique. The best way to achieve this is by\\n * using `public constant` hash digests:\\n *\\n * ```\\n * bytes32 public constant MY_ROLE = keccak256(\\\"MY_ROLE\\\");\\n * ```\\n *\\n * Roles can be used to represent a set of permissions. To restrict access to a\\n * function call, use {hasRole}:\\n *\\n * ```\\n * function foo() public {\\n *     require(hasRole(MY_ROLE, _msgSender()));\\n *     ...\\n * }\\n * ```\\n *\\n * Roles can be granted and revoked dynamically via the {grantRole} and\\n * {revokeRole} functions. Each role has an associated admin role, and only\\n * accounts that have a role's admin role can call {grantRole} and {revokeRole}.\\n *\\n * By default, the admin role for all roles is `DEFAULT_ADMIN_ROLE`, which means\\n * that only accounts with this role will be able to grant or revoke other\\n * roles. More complex role relationships can be created by using\\n * {_setRoleAdmin}.\\n */\\nabstract contract AccessControlUpgradeSafe is Initializable, ContextUpgradeSafe {\\n    function __AccessControl_init() internal initializer {\\n        __Context_init_unchained();\\n        __AccessControl_init_unchained();\\n    }\\n\\n    function __AccessControl_init_unchained() internal initializer {\\n\\n\\n    }\\n\\n    using EnumerableSet for EnumerableSet.AddressSet;\\n    using Address for address;\\n\\n    struct RoleData {\\n        EnumerableSet.AddressSet members;\\n        bytes32 adminRole;\\n    }\\n\\n    mapping (bytes32 => RoleData) private _roles;\\n\\n    bytes32 public constant DEFAULT_ADMIN_ROLE = 0x00;\\n\\n    /**\\n     * @dev Emitted when `account` is granted `role`.\\n     *\\n     * `sender` is the account that originated the contract call, an admin role\\n     * bearer except when using {_setupRole}.\\n     */\\n    event RoleGranted(bytes32 indexed role, address indexed account, address indexed sender);\\n\\n    /**\\n     * @dev Emitted when `account` is revoked `role`.\\n     *\\n     * `sender` is the account that originated the contract call:\\n     *   - if using `revokeRole`, it is the admin role bearer\\n     *   - if using `renounceRole`, it is the role bearer (i.e. `account`)\\n     */\\n    event RoleRevoked(bytes32 indexed role, address indexed account, address indexed sender);\\n\\n    /**\\n     * @dev Returns `true` if `account` has been granted `role`.\\n     */\\n    function hasRole(bytes32 role, address account) public view returns (bool) {\\n        return _roles[role].members.contains(account);\\n    }\\n\\n    /**\\n     * @dev Returns the number of accounts that have `role`. Can be used\\n     * together with {getRoleMember} to enumerate all bearers of a role.\\n     */\\n    function getRoleMemberCount(bytes32 role) public view returns (uint256) {\\n        return _roles[role].members.length();\\n    }\\n\\n    /**\\n     * @dev Returns one of the accounts that have `role`. `index` must be a\\n     * value between 0 and {getRoleMemberCount}, non-inclusive.\\n     *\\n     * Role bearers are not sorted in any particular way, and their ordering may\\n     * change at any point.\\n     *\\n     * WARNING: When using {getRoleMember} and {getRoleMemberCount}, make sure\\n     * you perform all queries on the same block. See the following\\n     * https://forum.openzeppelin.com/t/iterating-over-elements-on-enumerableset-in-openzeppelin-contracts/2296[forum post]\\n     * for more information.\\n     */\\n    function getRoleMember(bytes32 role, uint256 index) public view returns (address) {\\n        return _roles[role].members.at(index);\\n    }\\n\\n    /**\\n     * @dev Returns the admin role that controls `role`. See {grantRole} and\\n     * {revokeRole}.\\n     *\\n     * To change a role's admin, use {_setRoleAdmin}.\\n     */\\n    function getRoleAdmin(bytes32 role) public view returns (bytes32) {\\n        return _roles[role].adminRole;\\n    }\\n\\n    /**\\n     * @dev Grants `role` to `account`.\\n     *\\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     */\\n    function grantRole(bytes32 role, address account) public virtual {\\n        require(hasRole(_roles[role].adminRole, _msgSender()), \\\"AccessControl: sender must be an admin to grant\\\");\\n\\n        _grantRole(role, account);\\n    }\\n\\n    /**\\n     * @dev Revokes `role` from `account`.\\n     *\\n     * If `account` had been granted `role`, emits a {RoleRevoked} event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     */\\n    function revokeRole(bytes32 role, address account) public virtual {\\n        require(hasRole(_roles[role].adminRole, _msgSender()), \\\"AccessControl: sender must be an admin to revoke\\\");\\n\\n        _revokeRole(role, account);\\n    }\\n\\n    /**\\n     * @dev Revokes `role` from the calling account.\\n     *\\n     * Roles are often managed via {grantRole} and {revokeRole}: this function's\\n     * purpose is to provide a mechanism for accounts to lose their privileges\\n     * if they are compromised (such as when a trusted device is misplaced).\\n     *\\n     * If the calling account had been granted `role`, emits a {RoleRevoked}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must be `account`.\\n     */\\n    function renounceRole(bytes32 role, address account) public virtual {\\n        require(account == _msgSender(), \\\"AccessControl: can only renounce roles for self\\\");\\n\\n        _revokeRole(role, account);\\n    }\\n\\n    /**\\n     * @dev Grants `role` to `account`.\\n     *\\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\\n     * event. Note that unlike {grantRole}, this function doesn't perform any\\n     * checks on the calling account.\\n     *\\n     * [WARNING]\\n     * ====\\n     * This function should only be called from the constructor when setting\\n     * up the initial roles for the system.\\n     *\\n     * Using this function in any other way is effectively circumventing the admin\\n     * system imposed by {AccessControl}.\\n     * ====\\n     */\\n    function _setupRole(bytes32 role, address account) internal virtual {\\n        _grantRole(role, account);\\n    }\\n\\n    /**\\n     * @dev Sets `adminRole` as ``role``'s admin role.\\n     */\\n    function _setRoleAdmin(bytes32 role, bytes32 adminRole) internal virtual {\\n        _roles[role].adminRole = adminRole;\\n    }\\n\\n    function _grantRole(bytes32 role, address account) private {\\n        if (_roles[role].members.add(account)) {\\n            emit RoleGranted(role, account, _msgSender());\\n        }\\n    }\\n\\n    function _revokeRole(bytes32 role, address account) private {\\n        if (_roles[role].members.remove(account)) {\\n            emit RoleRevoked(role, account, _msgSender());\\n        }\\n    }\\n\\n    uint256[49] private __gap;\\n}\\n\",\"keccak256\":\"0x3954a5ee18b9297616912390eac7b0fe698e6ffea5a50dc3ccb0980cae210e86\"},\"@openzeppelin/contracts-ethereum-package/contracts/introspection/IERC165.sol\":{\"content\":\"pragma solidity ^0.6.0;\\n\\n/**\\n * @dev Interface of the ERC165 standard, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\\n *\\n * Implementers can declare support of contract interfaces, which can then be\\n * queried by others ({ERC165Checker}).\\n *\\n * For an implementation, see {ERC165}.\\n */\\ninterface IERC165 {\\n    /**\\n     * @dev Returns true if this contract implements the interface defined by\\n     * `interfaceId`. See the corresponding\\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\\n     * to learn more about how these ids are created.\\n     *\\n     * This function call must use less than 30 000 gas.\\n     */\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\\n}\\n\",\"keccak256\":\"0x9175561c374ec1fc33045e5dfdde2057e63e00debf432875f9e1e3395d99c149\"},\"@openzeppelin/contracts-ethereum-package/contracts/math/Math.sol\":{\"content\":\"pragma solidity ^0.6.0;\\n\\n/**\\n * @dev Standard math utilities missing in the Solidity language.\\n */\\nlibrary Math {\\n    /**\\n     * @dev Returns the largest of two numbers.\\n     */\\n    function max(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a >= b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the smallest of two numbers.\\n     */\\n    function min(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a < b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the average of two numbers. The result is rounded towards\\n     * zero.\\n     */\\n    function average(uint256 a, uint256 b) internal pure returns (uint256) {\\n        // (a + b) / 2 can overflow, so we distribute\\n        return (a / 2) + (b / 2) + ((a % 2 + b % 2) / 2);\\n    }\\n}\\n\",\"keccak256\":\"0x50280546205978ca6573541955e15453b4c07a19e6c8ec4f6785a5ae0d7343fb\"},\"@openzeppelin/contracts-ethereum-package/contracts/math/SafeMath.sol\":{\"content\":\"pragma solidity ^0.6.0;\\n\\n/**\\n * @dev Wrappers over Solidity's arithmetic operations with added overflow\\n * checks.\\n *\\n * Arithmetic operations in Solidity wrap on overflow. This can easily result\\n * in bugs, because programmers usually assume that an overflow raises an\\n * error, which is the standard behavior in high level programming languages.\\n * `SafeMath` restores this intuition by reverting the transaction when an\\n * operation overflows.\\n *\\n * Using this library instead of the unchecked operations eliminates an entire\\n * class of bugs, so it's recommended to use it always.\\n */\\nlibrary SafeMath {\\n    /**\\n     * @dev Returns the addition of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `+` operator.\\n     *\\n     * Requirements:\\n     * - Addition cannot overflow.\\n     */\\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\\n        uint256 c = a + b;\\n        require(c >= a, \\\"SafeMath: addition overflow\\\");\\n\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting on\\n     * overflow (when the result is negative).\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     * - Subtraction cannot overflow.\\n     */\\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return sub(a, b, \\\"SafeMath: subtraction overflow\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\\n     * overflow (when the result is negative).\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     * - Subtraction cannot overflow.\\n     */\\n    function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        require(b <= a, errorMessage);\\n        uint256 c = a - b;\\n\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the multiplication of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `*` operator.\\n     *\\n     * Requirements:\\n     * - Multiplication cannot overflow.\\n     */\\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\\n        // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\\n        // benefit is lost if 'b' is also tested.\\n        // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\\n        if (a == 0) {\\n            return 0;\\n        }\\n\\n        uint256 c = a * b;\\n        require(c / a == b, \\\"SafeMath: multiplication overflow\\\");\\n\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers. Reverts on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\\n     * uses an invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     * - The divisor cannot be zero.\\n     */\\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return div(a, b, \\\"SafeMath: division by zero\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers. Reverts with custom message on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\\n     * uses an invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     * - The divisor cannot be zero.\\n     */\\n    function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        // Solidity only automatically asserts when dividing by 0\\n        require(b > 0, errorMessage);\\n        uint256 c = a / b;\\n        // assert(a == b * c + a % b); // There is no case in which this doesn't hold\\n\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * Reverts when dividing by zero.\\n     *\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     * - The divisor cannot be zero.\\n     */\\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return mod(a, b, \\\"SafeMath: modulo by zero\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * Reverts with custom message when dividing by zero.\\n     *\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     * - The divisor cannot be zero.\\n     */\\n    function mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        require(b != 0, errorMessage);\\n        return a % b;\\n    }\\n}\\n\",\"keccak256\":\"0x04d34b3cd5677bea25f8dfceb6dec0eaa071d4d4b789a43f13fe0c415ba4c296\"},\"@openzeppelin/contracts-ethereum-package/contracts/token/ERC20/IERC20.sol\":{\"content\":\"pragma solidity ^0.6.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address recipient, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n}\\n\",\"keccak256\":\"0x6cc1cb934a3ac2137a7dcaed018af9e235392236ceecfd3687259702b9c767ad\"},\"@openzeppelin/contracts-ethereum-package/contracts/token/ERC721/IERC721.sol\":{\"content\":\"pragma solidity ^0.6.2;\\n\\nimport \\\"../../introspection/IERC165.sol\\\";\\n\\n/**\\n * @dev Required interface of an ERC721 compliant contract.\\n */\\ninterface IERC721 is IERC165 {\\n    event Transfer(address indexed from, address indexed to, uint256 indexed tokenId);\\n    event Approval(address indexed owner, address indexed approved, uint256 indexed tokenId);\\n    event ApprovalForAll(address indexed owner, address indexed operator, bool approved);\\n\\n    /**\\n     * @dev Returns the number of NFTs in ``owner``'s account.\\n     */\\n    function balanceOf(address owner) external view returns (uint256 balance);\\n\\n    /**\\n     * @dev Returns the owner of the NFT specified by `tokenId`.\\n     */\\n    function ownerOf(uint256 tokenId) external view returns (address owner);\\n\\n    /**\\n     * @dev Transfers a specific NFT (`tokenId`) from one account (`from`) to\\n     * another (`to`).\\n     *\\n     *\\n     *\\n     * Requirements:\\n     * - `from`, `to` cannot be zero.\\n     * - `tokenId` must be owned by `from`.\\n     * - If the caller is not `from`, it must be have been allowed to move this\\n     * NFT by either {approve} or {setApprovalForAll}.\\n     */\\n    function safeTransferFrom(address from, address to, uint256 tokenId) external;\\n    /**\\n     * @dev Transfers a specific NFT (`tokenId`) from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Requirements:\\n     * - If the caller is not `from`, it must be approved to move this NFT by\\n     * either {approve} or {setApprovalForAll}.\\n     */\\n    function transferFrom(address from, address to, uint256 tokenId) external;\\n    function approve(address to, uint256 tokenId) external;\\n    function getApproved(uint256 tokenId) external view returns (address operator);\\n\\n    function setApprovalForAll(address operator, bool _approved) external;\\n    function isApprovedForAll(address owner, address operator) external view returns (bool);\\n\\n\\n    function safeTransferFrom(address from, address to, uint256 tokenId, bytes calldata data) external;\\n}\\n\",\"keccak256\":\"0x734b5bedb78074a59bca6aff9e5a1801c9c7e9c5314daf32e14857161fb36932\"},\"@openzeppelin/contracts-ethereum-package/contracts/utils/Address.sol\":{\"content\":\"pragma solidity ^0.6.2;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // According to EIP-1052, 0x0 is the value returned for not-yet created accounts\\n        // and 0xc5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470 is returned\\n        // for accounts without code, i.e. `keccak256('')`\\n        bytes32 codehash;\\n        bytes32 accountHash = 0xc5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470;\\n        // solhint-disable-next-line no-inline-assembly\\n        assembly { codehash := extcodehash(account) }\\n        return (codehash != accountHash && codehash != 0x0);\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        // solhint-disable-next-line avoid-low-level-calls, avoid-call-value\\n        (bool success, ) = recipient.call{ value: amount }(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n}\\n\",\"keccak256\":\"0x5f7da58ee3d9faa9b8999a93d49c8ff978f1afc88ae9bcfc6f9cbb44da011c2b\"},\"@openzeppelin/contracts-ethereum-package/contracts/utils/EnumerableSet.sol\":{\"content\":\"pragma solidity ^0.6.0;\\n\\n/**\\n * @dev Library for managing\\n * https://en.wikipedia.org/wiki/Set_(abstract_data_type)[sets] of primitive\\n * types.\\n *\\n * Sets have the following properties:\\n *\\n * - Elements are added, removed, and checked for existence in constant time\\n * (O(1)).\\n * - Elements are enumerated in O(n). No guarantees are made on the ordering.\\n *\\n * ```\\n * contract Example {\\n *     // Add the library methods\\n *     using EnumerableSet for EnumerableSet.AddressSet;\\n *\\n *     // Declare a set state variable\\n *     EnumerableSet.AddressSet private mySet;\\n * }\\n * ```\\n *\\n * As of v3.0.0, only sets of type `address` (`AddressSet`) and `uint256`\\n * (`UintSet`) are supported.\\n */\\nlibrary EnumerableSet {\\n    // To implement this library for multiple types with as little code\\n    // repetition as possible, we write it in terms of a generic Set type with\\n    // bytes32 values.\\n    // The Set implementation uses private functions, and user-facing\\n    // implementations (such as AddressSet) are just wrappers around the\\n    // underlying Set.\\n    // This means that we can only create new EnumerableSets for types that fit\\n    // in bytes32.\\n\\n    struct Set {\\n        // Storage of set values\\n        bytes32[] _values;\\n\\n        // Position of the value in the `values` array, plus 1 because index 0\\n        // means a value is not in the set.\\n        mapping (bytes32 => uint256) _indexes;\\n    }\\n\\n    /**\\n     * @dev Add a value to a set. O(1).\\n     *\\n     * Returns true if the value was added to the set, that is if it was not\\n     * already present.\\n     */\\n    function _add(Set storage set, bytes32 value) private returns (bool) {\\n        if (!_contains(set, value)) {\\n            set._values.push(value);\\n            // The value is stored at length-1, but we add 1 to all indexes\\n            // and use 0 as a sentinel value\\n            set._indexes[value] = set._values.length;\\n            return true;\\n        } else {\\n            return false;\\n        }\\n    }\\n\\n    /**\\n     * @dev Removes a value from a set. O(1).\\n     *\\n     * Returns true if the value was removed from the set, that is if it was\\n     * present.\\n     */\\n    function _remove(Set storage set, bytes32 value) private returns (bool) {\\n        // We read and store the value's index to prevent multiple reads from the same storage slot\\n        uint256 valueIndex = set._indexes[value];\\n\\n        if (valueIndex != 0) { // Equivalent to contains(set, value)\\n            // To delete an element from the _values array in O(1), we swap the element to delete with the last one in\\n            // the array, and then remove the last element (sometimes called as 'swap and pop').\\n            // This modifies the order of the array, as noted in {at}.\\n\\n            uint256 toDeleteIndex = valueIndex - 1;\\n            uint256 lastIndex = set._values.length - 1;\\n\\n            // When the value to delete is the last one, the swap operation is unnecessary. However, since this occurs\\n            // so rarely, we still do the swap anyway to avoid the gas cost of adding an 'if' statement.\\n\\n            bytes32 lastvalue = set._values[lastIndex];\\n\\n            // Move the last value to the index where the value to delete is\\n            set._values[toDeleteIndex] = lastvalue;\\n            // Update the index for the moved value\\n            set._indexes[lastvalue] = toDeleteIndex + 1; // All indexes are 1-based\\n\\n            // Delete the slot where the moved value was stored\\n            set._values.pop();\\n\\n            // Delete the index for the deleted slot\\n            delete set._indexes[value];\\n\\n            return true;\\n        } else {\\n            return false;\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns true if the value is in the set. O(1).\\n     */\\n    function _contains(Set storage set, bytes32 value) private view returns (bool) {\\n        return set._indexes[value] != 0;\\n    }\\n\\n    /**\\n     * @dev Returns the number of values on the set. O(1).\\n     */\\n    function _length(Set storage set) private view returns (uint256) {\\n        return set._values.length;\\n    }\\n\\n   /**\\n    * @dev Returns the value stored at position `index` in the set. O(1).\\n    *\\n    * Note that there are no guarantees on the ordering of values inside the\\n    * array, and it may change when more values are added or removed.\\n    *\\n    * Requirements:\\n    *\\n    * - `index` must be strictly less than {length}.\\n    */\\n    function _at(Set storage set, uint256 index) private view returns (bytes32) {\\n        require(set._values.length > index, \\\"EnumerableSet: index out of bounds\\\");\\n        return set._values[index];\\n    }\\n\\n    // AddressSet\\n\\n    struct AddressSet {\\n        Set _inner;\\n    }\\n\\n    /**\\n     * @dev Add a value to a set. O(1).\\n     *\\n     * Returns true if the value was added to the set, that is if it was not\\n     * already present.\\n     */\\n    function add(AddressSet storage set, address value) internal returns (bool) {\\n        return _add(set._inner, bytes32(uint256(value)));\\n    }\\n\\n    /**\\n     * @dev Removes a value from a set. O(1).\\n     *\\n     * Returns true if the value was removed from the set, that is if it was\\n     * present.\\n     */\\n    function remove(AddressSet storage set, address value) internal returns (bool) {\\n        return _remove(set._inner, bytes32(uint256(value)));\\n    }\\n\\n    /**\\n     * @dev Returns true if the value is in the set. O(1).\\n     */\\n    function contains(AddressSet storage set, address value) internal view returns (bool) {\\n        return _contains(set._inner, bytes32(uint256(value)));\\n    }\\n\\n    /**\\n     * @dev Returns the number of values in the set. O(1).\\n     */\\n    function length(AddressSet storage set) internal view returns (uint256) {\\n        return _length(set._inner);\\n    }\\n\\n   /**\\n    * @dev Returns the value stored at position `index` in the set. O(1).\\n    *\\n    * Note that there are no guarantees on the ordering of values inside the\\n    * array, and it may change when more values are added or removed.\\n    *\\n    * Requirements:\\n    *\\n    * - `index` must be strictly less than {length}.\\n    */\\n    function at(AddressSet storage set, uint256 index) internal view returns (address) {\\n        return address(uint256(_at(set._inner, index)));\\n    }\\n\\n\\n    // UintSet\\n\\n    struct UintSet {\\n        Set _inner;\\n    }\\n\\n    /**\\n     * @dev Add a value to a set. O(1).\\n     *\\n     * Returns true if the value was added to the set, that is if it was not\\n     * already present.\\n     */\\n    function add(UintSet storage set, uint256 value) internal returns (bool) {\\n        return _add(set._inner, bytes32(value));\\n    }\\n\\n    /**\\n     * @dev Removes a value from a set. O(1).\\n     *\\n     * Returns true if the value was removed from the set, that is if it was\\n     * present.\\n     */\\n    function remove(UintSet storage set, uint256 value) internal returns (bool) {\\n        return _remove(set._inner, bytes32(value));\\n    }\\n\\n    /**\\n     * @dev Returns true if the value is in the set. O(1).\\n     */\\n    function contains(UintSet storage set, uint256 value) internal view returns (bool) {\\n        return _contains(set._inner, bytes32(value));\\n    }\\n\\n    /**\\n     * @dev Returns the number of values on the set. O(1).\\n     */\\n    function length(UintSet storage set) internal view returns (uint256) {\\n        return _length(set._inner);\\n    }\\n\\n   /**\\n    * @dev Returns the value stored at position `index` in the set. O(1).\\n    *\\n    * Note that there are no guarantees on the ordering of values inside the\\n    * array, and it may change when more values are added or removed.\\n    *\\n    * Requirements:\\n    *\\n    * - `index` must be strictly less than {length}.\\n    */\\n    function at(UintSet storage set, uint256 index) internal view returns (uint256) {\\n        return uint256(_at(set._inner, index));\\n    }\\n}\\n\",\"keccak256\":\"0x7f6401708b61f575b497aa7c8118ca9d70348643c83c26e70d9b643edf1a95c1\"},\"@openzeppelin/contracts-ethereum-package/contracts/utils/Pausable.sol\":{\"content\":\"pragma solidity ^0.6.0;\\n\\nimport \\\"../GSN/Context.sol\\\";\\nimport \\\"../Initializable.sol\\\";\\n\\n/**\\n * @dev Contract module which allows children to implement an emergency stop\\n * mechanism that can be triggered by an authorized account.\\n *\\n * This module is used through inheritance. It will make available the\\n * modifiers `whenNotPaused` and `whenPaused`, which can be applied to\\n * the functions of your contract. Note that they will not be pausable by\\n * simply including this module, only once the modifiers are put in place.\\n */\\ncontract PausableUpgradeSafe is Initializable, ContextUpgradeSafe {\\n    /**\\n     * @dev Emitted when the pause is triggered by `account`.\\n     */\\n    event Paused(address account);\\n\\n    /**\\n     * @dev Emitted when the pause is lifted by `account`.\\n     */\\n    event Unpaused(address account);\\n\\n    bool private _paused;\\n\\n    /**\\n     * @dev Initializes the contract in unpaused state.\\n     */\\n\\n    function __Pausable_init() internal initializer {\\n        __Context_init_unchained();\\n        __Pausable_init_unchained();\\n    }\\n\\n    function __Pausable_init_unchained() internal initializer {\\n\\n\\n        _paused = false;\\n\\n    }\\n\\n\\n    /**\\n     * @dev Returns true if the contract is paused, and false otherwise.\\n     */\\n    function paused() public view returns (bool) {\\n        return _paused;\\n    }\\n\\n    /**\\n     * @dev Modifier to make a function callable only when the contract is not paused.\\n     */\\n    modifier whenNotPaused() {\\n        require(!_paused, \\\"Pausable: paused\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Modifier to make a function callable only when the contract is paused.\\n     */\\n    modifier whenPaused() {\\n        require(_paused, \\\"Pausable: not paused\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Triggers stopped state.\\n     */\\n    function _pause() internal virtual whenNotPaused {\\n        _paused = true;\\n        emit Paused(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Returns to normal state.\\n     */\\n    function _unpause() internal virtual whenPaused {\\n        _paused = false;\\n        emit Unpaused(_msgSender());\\n    }\\n\\n    uint256[49] private __gap;\\n}\\n\",\"keccak256\":\"0x2ad5473fe88d9ab30c6cd495ab8895daae8c4a48cf8231282a2d339387b35006\"},\"@openzeppelin/contracts-ethereum-package/contracts/utils/ReentrancyGuard.sol\":{\"content\":\"pragma solidity ^0.6.0;\\nimport \\\"../Initializable.sol\\\";\\n\\n/**\\n * @dev Contract module that helps prevent reentrant calls to a function.\\n *\\n * Inheriting from `ReentrancyGuard` will make the {nonReentrant} modifier\\n * available, which can be applied to functions to make sure there are no nested\\n * (reentrant) calls to them.\\n *\\n * Note that because there is a single `nonReentrant` guard, functions marked as\\n * `nonReentrant` may not call one another. This can be worked around by making\\n * those functions `private`, and then adding `external` `nonReentrant` entry\\n * points to them.\\n *\\n * TIP: If you would like to learn more about reentrancy and alternative ways\\n * to protect against it, check out our blog post\\n * https://blog.openzeppelin.com/reentrancy-after-istanbul/[Reentrancy After Istanbul].\\n */\\ncontract ReentrancyGuardUpgradeSafe is Initializable {\\n    bool private _notEntered;\\n\\n\\n    function __ReentrancyGuard_init() internal initializer {\\n        __ReentrancyGuard_init_unchained();\\n    }\\n\\n    function __ReentrancyGuard_init_unchained() internal initializer {\\n\\n\\n        // Storing an initial non-zero value makes deployment a bit more\\n        // expensive, but in exchange the refund on every call to nonReentrant\\n        // will be lower in amount. Since refunds are capped to a percetange of\\n        // the total transaction's gas, it is best to keep them low in cases\\n        // like this one, to increase the likelihood of the full refund coming\\n        // into effect.\\n        _notEntered = true;\\n\\n    }\\n\\n\\n    /**\\n     * @dev Prevents a contract from calling itself, directly or indirectly.\\n     * Calling a `nonReentrant` function from another `nonReentrant`\\n     * function is not supported. It is possible to prevent this from happening\\n     * by making the `nonReentrant` function external, and make it call a\\n     * `private` function that does the actual work.\\n     */\\n    modifier nonReentrant() {\\n        // On the first call to nonReentrant, _notEntered will be true\\n        require(_notEntered, \\\"ReentrancyGuard: reentrant call\\\");\\n\\n        // Any calls to nonReentrant after this point will fail\\n        _notEntered = false;\\n\\n        _;\\n\\n        // By storing the original value once again, a refund is triggered (see\\n        // https://eips.ethereum.org/EIPS/eip-2200)\\n        _notEntered = true;\\n    }\\n\\n    uint256[49] private __gap;\\n}\\n\",\"keccak256\":\"0x75a600e5ed3443ecf3b7fb636064b404b358317fd6cd91e70e3ca5cf2370e882\"},\"@uniswap/lib/contracts/libraries/Babylonian.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0-or-later\\n\\npragma solidity >=0.4.0;\\n\\n// computes square roots using the babylonian method\\n// https://en.wikipedia.org/wiki/Methods_of_computing_square_roots#Babylonian_method\\nlibrary Babylonian {\\n    // credit for this implementation goes to\\n    // https://github.com/abdk-consulting/abdk-libraries-solidity/blob/master/ABDKMath64x64.sol#L687\\n    function sqrt(uint256 x) internal pure returns (uint256) {\\n        if (x == 0) return 0;\\n        // this block is equivalent to r = uint256(1) << (BitMath.mostSignificantBit(x) / 2);\\n        // however that code costs significantly more gas\\n        uint256 xx = x;\\n        uint256 r = 1;\\n        if (xx >= 0x100000000000000000000000000000000) {\\n            xx >>= 128;\\n            r <<= 64;\\n        }\\n        if (xx >= 0x10000000000000000) {\\n            xx >>= 64;\\n            r <<= 32;\\n        }\\n        if (xx >= 0x100000000) {\\n            xx >>= 32;\\n            r <<= 16;\\n        }\\n        if (xx >= 0x10000) {\\n            xx >>= 16;\\n            r <<= 8;\\n        }\\n        if (xx >= 0x100) {\\n            xx >>= 8;\\n            r <<= 4;\\n        }\\n        if (xx >= 0x10) {\\n            xx >>= 4;\\n            r <<= 2;\\n        }\\n        if (xx >= 0x8) {\\n            r <<= 1;\\n        }\\n        r = (r + x / r) >> 1;\\n        r = (r + x / r) >> 1;\\n        r = (r + x / r) >> 1;\\n        r = (r + x / r) >> 1;\\n        r = (r + x / r) >> 1;\\n        r = (r + x / r) >> 1;\\n        r = (r + x / r) >> 1; // Seven iterations should be enough\\n        uint256 r1 = x / r;\\n        return (r < r1 ? r : r1);\\n    }\\n}\\n\",\"keccak256\":\"0xeb1c2a281a00f4660775f75ccfa1e51fbe1d75f86aeb9d0d297151ecdb900177\",\"license\":\"GPL-3.0-or-later\"},\"contracts/interfaces/IBackerRewards.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.6.12;\\npragma experimental ABIEncoderV2;\\n\\ninterface IBackerRewards {\\n  function allocateRewards(uint256 _interestPaymentAmount) external;\\n\\n  function onTranchedPoolDrawdown(uint256 sliceIndex) external;\\n\\n  function setPoolTokenAccRewardsPerPrincipalDollarAtMint(address poolAddress, uint256 tokenId) external;\\n}\\n\",\"keccak256\":\"0x6d315e4b40e24250078fd1ef037a50bb248dbaf955be2270246ccfb3c886964f\",\"license\":\"MIT\"},\"contracts/interfaces/ICUSDCContract.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// Taken from https://github.com/compound-finance/compound-protocol/blob/master/contracts/CTokenInterfaces.sol\\npragma solidity 0.6.12;\\npragma experimental ABIEncoderV2;\\n\\nimport \\\"./IERC20withDec.sol\\\";\\n\\ninterface ICUSDCContract is IERC20withDec {\\n  /*** User Interface ***/\\n\\n  function mint(uint256 mintAmount) external returns (uint256);\\n\\n  function redeem(uint256 redeemTokens) external returns (uint256);\\n\\n  function redeemUnderlying(uint256 redeemAmount) external returns (uint256);\\n\\n  function borrow(uint256 borrowAmount) external returns (uint256);\\n\\n  function repayBorrow(uint256 repayAmount) external returns (uint256);\\n\\n  function repayBorrowBehalf(address borrower, uint256 repayAmount) external returns (uint256);\\n\\n  function liquidateBorrow(\\n    address borrower,\\n    uint256 repayAmount,\\n    address cTokenCollateral\\n  ) external returns (uint256);\\n\\n  function getAccountSnapshot(address account)\\n    external\\n    view\\n    returns (\\n      uint256,\\n      uint256,\\n      uint256,\\n      uint256\\n    );\\n\\n  function balanceOfUnderlying(address owner) external returns (uint256);\\n\\n  function exchangeRateCurrent() external returns (uint256);\\n\\n  /*** Admin Functions ***/\\n\\n  function _addReserves(uint256 addAmount) external returns (uint256);\\n}\\n\",\"keccak256\":\"0x6d2cc9d84c55c0aa2f766aa3cc6371cdc7cf040e88e4f6a34ba1f6d40e2e0b5a\",\"license\":\"MIT\"},\"contracts/interfaces/ICreditDesk.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.6.12;\\npragma experimental ABIEncoderV2;\\n\\nabstract contract ICreditDesk {\\n  uint256 public totalWritedowns;\\n  uint256 public totalLoansOutstanding;\\n\\n  function setUnderwriterGovernanceLimit(address underwriterAddress, uint256 limit) external virtual;\\n\\n  function drawdown(address creditLineAddress, uint256 amount) external virtual;\\n\\n  function pay(address creditLineAddress, uint256 amount) external virtual;\\n\\n  function assessCreditLine(address creditLineAddress) external virtual;\\n\\n  function applyPayment(address creditLineAddress, uint256 amount) external virtual;\\n\\n  function getNextPaymentAmount(address creditLineAddress, uint256 asOfBLock) external view virtual returns (uint256);\\n}\\n\",\"keccak256\":\"0x11f2741210ea8aeb0b94f56e9418d856be1f235cc18dadd7ea2945506c9b4aa1\",\"license\":\"MIT\"},\"contracts/interfaces/ICreditLine.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.6.12;\\npragma experimental ABIEncoderV2;\\n\\ninterface ICreditLine {\\n  function borrower() external view returns (address);\\n\\n  function limit() external view returns (uint256);\\n\\n  function maxLimit() external view returns (uint256);\\n\\n  function interestApr() external view returns (uint256);\\n\\n  function paymentPeriodInDays() external view returns (uint256);\\n\\n  function principalGracePeriodInDays() external view returns (uint256);\\n\\n  function termInDays() external view returns (uint256);\\n\\n  function lateFeeApr() external view returns (uint256);\\n\\n  function isLate() external view returns (bool);\\n\\n  function withinPrincipalGracePeriod() external view returns (bool);\\n\\n  // Accounting variables\\n  function balance() external view returns (uint256);\\n\\n  function interestOwed() external view returns (uint256);\\n\\n  function principalOwed() external view returns (uint256);\\n\\n  function termEndTime() external view returns (uint256);\\n\\n  function nextDueTime() external view returns (uint256);\\n\\n  function interestAccruedAsOf() external view returns (uint256);\\n\\n  function lastFullPaymentTime() external view returns (uint256);\\n}\\n\",\"keccak256\":\"0x09e43bbbca3f80c1c1dfc588dfe365792b89e9267026b01408b7ddf6b035c21a\",\"license\":\"MIT\"},\"contracts/interfaces/ICurveLP.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// Taken from https://github.com/compound-finance/compound-protocol/blob/master/contracts/CTokenInterfaces.sol\\npragma solidity 0.6.12;\\npragma experimental ABIEncoderV2;\\n\\ninterface ICurveLP {\\n  function token() external view returns (address);\\n\\n  function calc_token_amount(uint256[2] calldata amounts) external view returns (uint256);\\n\\n  function lp_price() external view returns (uint256);\\n\\n  function get_virtual_price() external view returns (uint256);\\n\\n  function add_liquidity(\\n    uint256[2] calldata amounts,\\n    uint256 min_mint_amount,\\n    bool use_eth,\\n    address receiver\\n  ) external returns (uint256);\\n\\n  function remove_liquidity(uint256 _amount, uint256[2] calldata min_amounts) external returns (uint256);\\n\\n  function remove_liquidity_one_coin(\\n    uint256 token_amount,\\n    uint256 i,\\n    uint256 min_amount\\n  ) external returns (uint256);\\n\\n  function get_dy(\\n    uint256 i,\\n    uint256 j,\\n    uint256 dx\\n  ) external view returns (uint256);\\n\\n  function exchange(\\n    uint256 i,\\n    uint256 j,\\n    uint256 dx,\\n    uint256 min_dy\\n  ) external returns (uint256);\\n\\n  function balances(uint256 arg0) external view returns (uint256);\\n}\\n\",\"keccak256\":\"0xbd0363aba765f165e535a64be8d8b38464908fe9ce5e2966373743b502648b11\",\"license\":\"MIT\"},\"contracts/interfaces/IERC20withDec.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.6.12;\\npragma experimental ABIEncoderV2;\\n\\nimport \\\"@openzeppelin/contracts-ethereum-package/contracts/token/ERC20/IERC20.sol\\\";\\n\\n/*\\nOnly addition is the `decimals` function, which we need, and which both our Fidu and USDC use, along with most ERC20's.\\n*/\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20withDec is IERC20 {\\n  /**\\n   * @dev Returns the number of decimals used for the token\\n   */\\n  function decimals() external view returns (uint8);\\n}\\n\",\"keccak256\":\"0x7b5fb02e023b6006a5199992f242caf23f64240c91e625f1390d6ca421b59531\",\"license\":\"MIT\"},\"contracts/interfaces/IEvents.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.6.12;\\npragma experimental ABIEncoderV2;\\n\\n/// @notice Common events that can be emmitted by multiple contracts\\ninterface IEvents {\\n  /// @notice Emitted when a safety check fails\\n  event SafetyCheckTriggered();\\n}\\n\",\"keccak256\":\"0x0fc1109c467b8a15e1dc8f2721e4ec219f2c8d7cace7fb496ebc20d65692945f\",\"license\":\"MIT\"},\"contracts/interfaces/IFidu.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.6.12;\\npragma experimental ABIEncoderV2;\\n\\nimport \\\"./IERC20withDec.sol\\\";\\n\\ninterface IFidu is IERC20withDec {\\n  function mintTo(address to, uint256 amount) external;\\n\\n  function burnFrom(address to, uint256 amount) external;\\n\\n  function renounceRole(bytes32 role, address account) external;\\n}\\n\",\"keccak256\":\"0x130a7bd2ddca4f9da2f9090cbcc1d63c1e21e152baca4779f18939977a5f6c04\",\"license\":\"MIT\"},\"contracts/interfaces/IGo.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.6.12;\\npragma experimental ABIEncoderV2;\\n\\nabstract contract IGo {\\n  uint256 public constant ID_TYPE_0 = 0;\\n  uint256 public constant ID_TYPE_1 = 1;\\n  uint256 public constant ID_TYPE_2 = 2;\\n  uint256 public constant ID_TYPE_3 = 3;\\n  uint256 public constant ID_TYPE_4 = 4;\\n  uint256 public constant ID_TYPE_5 = 5;\\n  uint256 public constant ID_TYPE_6 = 6;\\n  uint256 public constant ID_TYPE_7 = 7;\\n  uint256 public constant ID_TYPE_8 = 8;\\n  uint256 public constant ID_TYPE_9 = 9;\\n  uint256 public constant ID_TYPE_10 = 10;\\n\\n  /// @notice Returns the address of the UniqueIdentity contract.\\n  function uniqueIdentity() external virtual returns (address);\\n\\n  function go(address account) public view virtual returns (bool);\\n\\n  function goOnlyIdTypes(address account, uint256[] calldata onlyIdTypes) public view virtual returns (bool);\\n\\n  function goSeniorPool(address account) public view virtual returns (bool);\\n\\n  function updateGoldfinchConfig() external virtual;\\n}\\n\",\"keccak256\":\"0x012c616c599e94521e883eecb0c2d0331863aa1c90025bb84f64cca4d0c97a3b\",\"license\":\"MIT\"},\"contracts/interfaces/IGoldfinchConfig.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.6.12;\\npragma experimental ABIEncoderV2;\\n\\ninterface IGoldfinchConfig {\\n  function getNumber(uint256 index) external returns (uint256);\\n\\n  function getAddress(uint256 index) external returns (address);\\n\\n  function setAddress(uint256 index, address newAddress) external returns (address);\\n\\n  function setNumber(uint256 index, uint256 newNumber) external returns (uint256);\\n}\\n\",\"keccak256\":\"0xb4df9680fa1db27f4204d24cd15af68a73c81b62f83c2ca6d3ee6b0a98bc7da9\",\"license\":\"MIT\"},\"contracts/interfaces/IGoldfinchFactory.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.6.12;\\npragma experimental ABIEncoderV2;\\n\\ninterface IGoldfinchFactory {\\n  function createCreditLine() external returns (address);\\n\\n  function createBorrower(address owner) external returns (address);\\n\\n  function createPool(\\n    address _borrower,\\n    uint256 _juniorFeePercent,\\n    uint256 _limit,\\n    uint256 _interestApr,\\n    uint256 _paymentPeriodInDays,\\n    uint256 _termInDays,\\n    uint256 _lateFeeApr,\\n    uint256[] calldata _allowedUIDTypes\\n  ) external returns (address);\\n\\n  function createMigratedPool(\\n    address _borrower,\\n    uint256 _juniorFeePercent,\\n    uint256 _limit,\\n    uint256 _interestApr,\\n    uint256 _paymentPeriodInDays,\\n    uint256 _termInDays,\\n    uint256 _lateFeeApr,\\n    uint256[] calldata _allowedUIDTypes\\n  ) external returns (address);\\n\\n  function updateGoldfinchConfig() external;\\n}\\n\",\"keccak256\":\"0xf513d3cc235725b04b123f8456a1a371753591fd6b080362c83b40dd41fb8a3e\",\"license\":\"MIT\"},\"contracts/interfaces/IPool.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.6.12;\\npragma experimental ABIEncoderV2;\\n\\nabstract contract IPool {\\n  uint256 public sharePrice;\\n\\n  function deposit(uint256 amount) external virtual;\\n\\n  function withdraw(uint256 usdcAmount) external virtual;\\n\\n  function withdrawInFidu(uint256 fiduAmount) external virtual;\\n\\n  function collectInterestAndPrincipal(\\n    address from,\\n    uint256 interest,\\n    uint256 principal\\n  ) public virtual;\\n\\n  function transferFrom(\\n    address from,\\n    address to,\\n    uint256 amount\\n  ) public virtual returns (bool);\\n\\n  function drawdown(address to, uint256 amount) public virtual returns (bool);\\n\\n  function sweepToCompound() public virtual;\\n\\n  function sweepFromCompound() public virtual;\\n\\n  function distributeLosses(address creditlineAddress, int256 writedownDelta) external virtual;\\n\\n  function assets() public view virtual returns (uint256);\\n}\\n\",\"keccak256\":\"0xc113de25b7c7e2ac0180d32fab63d0eab1f9f6198ebc006e414f4fbd309026c4\",\"license\":\"MIT\"},\"contracts/interfaces/IPoolTokens.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.6.12;\\npragma experimental ABIEncoderV2;\\n\\nimport \\\"@openzeppelin/contracts-ethereum-package/contracts/token/ERC721/IERC721.sol\\\";\\n\\ninterface IPoolTokens is IERC721 {\\n  event TokenMinted(\\n    address indexed owner,\\n    address indexed pool,\\n    uint256 indexed tokenId,\\n    uint256 amount,\\n    uint256 tranche\\n  );\\n\\n  event TokenRedeemed(\\n    address indexed owner,\\n    address indexed pool,\\n    uint256 indexed tokenId,\\n    uint256 principalRedeemed,\\n    uint256 interestRedeemed,\\n    uint256 tranche\\n  );\\n  event TokenBurned(address indexed owner, address indexed pool, uint256 indexed tokenId);\\n\\n  struct TokenInfo {\\n    address pool;\\n    uint256 tranche;\\n    uint256 principalAmount;\\n    uint256 principalRedeemed;\\n    uint256 interestRedeemed;\\n  }\\n\\n  struct MintParams {\\n    uint256 principalAmount;\\n    uint256 tranche;\\n  }\\n\\n  function mint(MintParams calldata params, address to) external returns (uint256);\\n\\n  function redeem(\\n    uint256 tokenId,\\n    uint256 principalRedeemed,\\n    uint256 interestRedeemed\\n  ) external;\\n\\n  function withdrawPrincipal(uint256 tokenId, uint256 principalAmount) external;\\n\\n  function burn(uint256 tokenId) external;\\n\\n  function onPoolCreated(address newPool) external;\\n\\n  function getTokenInfo(uint256 tokenId) external view returns (TokenInfo memory);\\n\\n  function validPool(address sender) external view returns (bool);\\n\\n  function isApprovedOrOwner(address spender, uint256 tokenId) external view returns (bool);\\n}\\n\",\"keccak256\":\"0xde447b1c8018dae988b90f93aeba62fe203a6aa822bf524c916233ce81d4ed04\",\"license\":\"MIT\"},\"contracts/interfaces/ISeniorPool.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.6.12;\\npragma experimental ABIEncoderV2;\\n\\nimport \\\"./ITranchedPool.sol\\\";\\n\\nabstract contract ISeniorPool {\\n  uint256 public sharePrice;\\n  uint256 public totalLoansOutstanding;\\n  uint256 public totalWritedowns;\\n\\n  function deposit(uint256 amount) external virtual returns (uint256 depositShares);\\n\\n  function depositWithPermit(\\n    uint256 amount,\\n    uint256 deadline,\\n    uint8 v,\\n    bytes32 r,\\n    bytes32 s\\n  ) external virtual returns (uint256 depositShares);\\n\\n  function withdraw(uint256 usdcAmount) external virtual returns (uint256 amount);\\n\\n  function withdrawInFidu(uint256 fiduAmount) external virtual returns (uint256 amount);\\n\\n  function sweepToCompound() public virtual;\\n\\n  function sweepFromCompound() public virtual;\\n\\n  function invest(ITranchedPool pool) public virtual;\\n\\n  function estimateInvestment(ITranchedPool pool) public view virtual returns (uint256);\\n\\n  function redeem(uint256 tokenId) public virtual;\\n\\n  function writedown(uint256 tokenId) public virtual;\\n\\n  function calculateWritedown(uint256 tokenId) public view virtual returns (uint256 writedownAmount);\\n\\n  function assets() public view virtual returns (uint256);\\n\\n  function getNumShares(uint256 amount) public view virtual returns (uint256);\\n}\\n\",\"keccak256\":\"0xe514d470a9cb73449976c92844c4a587eea90980153af70e223bc9d6854c2497\",\"license\":\"MIT\"},\"contracts/interfaces/ISeniorPoolStrategy.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.6.12;\\npragma experimental ABIEncoderV2;\\n\\nimport \\\"./ISeniorPool.sol\\\";\\nimport \\\"./ITranchedPool.sol\\\";\\n\\nabstract contract ISeniorPoolStrategy {\\n  function getLeverageRatio(ITranchedPool pool) public view virtual returns (uint256);\\n\\n  function invest(ISeniorPool seniorPool, ITranchedPool pool) public view virtual returns (uint256 amount);\\n\\n  function estimateInvestment(ISeniorPool seniorPool, ITranchedPool pool) public view virtual returns (uint256);\\n}\\n\",\"keccak256\":\"0x96897152c52e299397a50aeb6aefe5af19fb1152d7dd15a1b29fb21faecb45d7\",\"license\":\"MIT\"},\"contracts/interfaces/IStakingRewards.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.6.12;\\npragma experimental ABIEncoderV2;\\n\\ninterface IStakingRewards {\\n  function unstake(uint256 tokenId, uint256 amount) external;\\n\\n  function addToStake(uint256 tokenId, uint256 amount) external;\\n\\n  function stakedBalanceOf(uint256 tokenId) external view returns (uint256);\\n\\n  function depositToCurveAndStakeFrom(\\n    address nftRecipient,\\n    uint256 fiduAmount,\\n    uint256 usdcAmount\\n  ) external;\\n\\n  function kick(uint256 tokenId) external;\\n\\n  function accumulatedRewardsPerToken() external view returns (uint256);\\n\\n  function lastUpdateTime() external view returns (uint256);\\n}\\n\",\"keccak256\":\"0xffd8c1e22a3ce4259fd547ecdfba4082b60cdb0fa902a322e6d18a9d7c842e00\",\"license\":\"MIT\"},\"contracts/interfaces/ITranchedPool.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.6.12;\\npragma experimental ABIEncoderV2;\\n\\nimport \\\"./IV2CreditLine.sol\\\";\\n\\nabstract contract ITranchedPool {\\n  IV2CreditLine public creditLine;\\n  uint256 public createdAt;\\n  enum Tranches {\\n    Reserved,\\n    Senior,\\n    Junior\\n  }\\n\\n  struct TrancheInfo {\\n    uint256 id;\\n    uint256 principalDeposited;\\n    uint256 principalSharePrice;\\n    uint256 interestSharePrice;\\n    uint256 lockedUntil;\\n  }\\n\\n  struct PoolSlice {\\n    TrancheInfo seniorTranche;\\n    TrancheInfo juniorTranche;\\n    uint256 totalInterestAccrued;\\n    uint256 principalDeployed;\\n  }\\n\\n  struct SliceInfo {\\n    uint256 reserveFeePercent;\\n    uint256 interestAccrued;\\n    uint256 principalAccrued;\\n  }\\n\\n  struct ApplyResult {\\n    uint256 interestRemaining;\\n    uint256 principalRemaining;\\n    uint256 reserveDeduction;\\n    uint256 oldInterestSharePrice;\\n    uint256 oldPrincipalSharePrice;\\n  }\\n\\n  function initialize(\\n    address _config,\\n    address _borrower,\\n    uint256 _juniorFeePercent,\\n    uint256 _limit,\\n    uint256 _interestApr,\\n    uint256 _paymentPeriodInDays,\\n    uint256 _termInDays,\\n    uint256 _lateFeeApr,\\n    uint256 _principalGracePeriodInDays,\\n    uint256 _fundableAt,\\n    uint256[] calldata _allowedUIDTypes\\n  ) public virtual;\\n\\n  function getTranche(uint256 tranche) external view virtual returns (TrancheInfo memory);\\n\\n  function pay(uint256 amount) external virtual;\\n\\n  function lockJuniorCapital() external virtual;\\n\\n  function lockPool() external virtual;\\n\\n  function initializeNextSlice(uint256 _fundableAt) external virtual;\\n\\n  function totalJuniorDeposits() external view virtual returns (uint256);\\n\\n  function drawdown(uint256 amount) external virtual;\\n\\n  function setFundableAt(uint256 timestamp) external virtual;\\n\\n  function deposit(uint256 tranche, uint256 amount) external virtual returns (uint256 tokenId);\\n\\n  function assess() external virtual;\\n\\n  function depositWithPermit(\\n    uint256 tranche,\\n    uint256 amount,\\n    uint256 deadline,\\n    uint8 v,\\n    bytes32 r,\\n    bytes32 s\\n  ) external virtual returns (uint256 tokenId);\\n\\n  function availableToWithdraw(uint256 tokenId)\\n    external\\n    view\\n    virtual\\n    returns (uint256 interestRedeemable, uint256 principalRedeemable);\\n\\n  function withdraw(uint256 tokenId, uint256 amount)\\n    external\\n    virtual\\n    returns (uint256 interestWithdrawn, uint256 principalWithdrawn);\\n\\n  function withdrawMax(uint256 tokenId)\\n    external\\n    virtual\\n    returns (uint256 interestWithdrawn, uint256 principalWithdrawn);\\n\\n  function withdrawMultiple(uint256[] calldata tokenIds, uint256[] calldata amounts) external virtual;\\n\\n  function numSlices() external view virtual returns (uint256);\\n}\\n\",\"keccak256\":\"0x575480005a216f68c9856ba9381095cd50e324668c3a6bc55a52f11036bed4b7\",\"license\":\"MIT\"},\"contracts/interfaces/IV2CreditLine.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.6.12;\\npragma experimental ABIEncoderV2;\\n\\nimport \\\"./ICreditLine.sol\\\";\\n\\nabstract contract IV2CreditLine is ICreditLine {\\n  function principal() external view virtual returns (uint256);\\n\\n  function totalInterestAccrued() external view virtual returns (uint256);\\n\\n  function termStartTime() external view virtual returns (uint256);\\n\\n  function setLimit(uint256 newAmount) external virtual;\\n\\n  function setMaxLimit(uint256 newAmount) external virtual;\\n\\n  function setBalance(uint256 newBalance) external virtual;\\n\\n  function setPrincipal(uint256 _principal) external virtual;\\n\\n  function setTotalInterestAccrued(uint256 _interestAccrued) external virtual;\\n\\n  function drawdown(uint256 amount) external virtual;\\n\\n  function assess()\\n    external\\n    virtual\\n    returns (\\n      uint256,\\n      uint256,\\n      uint256\\n    );\\n\\n  function initialize(\\n    address _config,\\n    address owner,\\n    address _borrower,\\n    uint256 _limit,\\n    uint256 _interestApr,\\n    uint256 _paymentPeriodInDays,\\n    uint256 _termInDays,\\n    uint256 _lateFeeApr,\\n    uint256 _principalGracePeriodInDays\\n  ) public virtual;\\n\\n  function setTermEndTime(uint256 newTermEndTime) external virtual;\\n\\n  function setNextDueTime(uint256 newNextDueTime) external virtual;\\n\\n  function setInterestOwed(uint256 newInterestOwed) external virtual;\\n\\n  function setPrincipalOwed(uint256 newPrincipalOwed) external virtual;\\n\\n  function setInterestAccruedAsOf(uint256 newInterestAccruedAsOf) external virtual;\\n\\n  function setWritedownAmount(uint256 newWritedownAmount) external virtual;\\n\\n  function setLastFullPaymentTime(uint256 newLastFullPaymentTime) external virtual;\\n\\n  function setLateFeeApr(uint256 newLateFeeApr) external virtual;\\n\\n  function updateGoldfinchConfig() external virtual;\\n}\\n\",\"keccak256\":\"0x67ccd4b2d3a3fffb97bbd5453175bbc8812af616a05349834a6d140cd6efbda6\",\"license\":\"MIT\"},\"contracts/library/SafeERC20Transfer.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.6.12;\\npragma experimental ABIEncoderV2;\\n\\nimport \\\"@openzeppelin/contracts-ethereum-package/contracts/token/ERC20/IERC20.sol\\\";\\n\\n/**\\n * @title Safe ERC20 Transfer\\n * @notice Reverts when transfer is not successful\\n * @author Goldfinch\\n */\\nabstract contract SafeERC20Transfer {\\n  function safeERC20Transfer(\\n    IERC20 erc20,\\n    address to,\\n    uint256 amount,\\n    string memory message\\n  ) internal {\\n    require(to != address(0), \\\"Can't send to zero address\\\");\\n    bool success = erc20.transfer(to, amount);\\n    require(success, message);\\n  }\\n\\n  function safeERC20Transfer(\\n    IERC20 erc20,\\n    address to,\\n    uint256 amount\\n  ) internal {\\n    safeERC20Transfer(erc20, to, amount, \\\"Failed to transfer ERC20\\\");\\n  }\\n\\n  function safeERC20TransferFrom(\\n    IERC20 erc20,\\n    address from,\\n    address to,\\n    uint256 amount,\\n    string memory message\\n  ) internal {\\n    require(to != address(0), \\\"Can't send to zero address\\\");\\n    bool success = erc20.transferFrom(from, to, amount);\\n    require(success, message);\\n  }\\n\\n  function safeERC20TransferFrom(\\n    IERC20 erc20,\\n    address from,\\n    address to,\\n    uint256 amount\\n  ) internal {\\n    string memory message = \\\"Failed to transfer ERC20\\\";\\n    safeERC20TransferFrom(erc20, from, to, amount, message);\\n  }\\n\\n  function safeERC20Approve(\\n    IERC20 erc20,\\n    address spender,\\n    uint256 allowance,\\n    string memory message\\n  ) internal {\\n    bool success = erc20.approve(spender, allowance);\\n    require(success, message);\\n  }\\n\\n  function safeERC20Approve(\\n    IERC20 erc20,\\n    address spender,\\n    uint256 allowance\\n  ) internal {\\n    string memory message = \\\"Failed to approve ERC20\\\";\\n    safeERC20Approve(erc20, spender, allowance, message);\\n  }\\n}\\n\",\"keccak256\":\"0x2ca2fbd70af85fe8986297482ede85eeb5ef835efd12e051db2e45b14b5bbeef\",\"license\":\"MIT\"},\"contracts/protocol/core/BaseUpgradeablePausable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.6.12;\\npragma experimental ABIEncoderV2;\\n\\nimport \\\"@openzeppelin/contracts-ethereum-package/contracts/access/AccessControl.sol\\\";\\nimport \\\"@openzeppelin/contracts-ethereum-package/contracts/utils/ReentrancyGuard.sol\\\";\\nimport \\\"@openzeppelin/contracts-ethereum-package/contracts/Initializable.sol\\\";\\nimport \\\"@openzeppelin/contracts-ethereum-package/contracts/math/SafeMath.sol\\\";\\nimport \\\"./PauserPausable.sol\\\";\\n\\n/**\\n * @title BaseUpgradeablePausable contract\\n * @notice This is our Base contract that most other contracts inherit from. It includes many standard\\n *  useful abilities like upgradeability, pausability, access control, and re-entrancy guards.\\n * @author Goldfinch\\n */\\n\\ncontract BaseUpgradeablePausable is\\n  Initializable,\\n  AccessControlUpgradeSafe,\\n  PauserPausable,\\n  ReentrancyGuardUpgradeSafe\\n{\\n  bytes32 public constant OWNER_ROLE = keccak256(\\\"OWNER_ROLE\\\");\\n  using SafeMath for uint256;\\n  // Pre-reserving a few slots in the base contract in case we need to add things in the future.\\n  // This does not actually take up gas cost or storage cost, but it does reserve the storage slots.\\n  // See OpenZeppelin's use of this pattern here:\\n  // https://github.com/OpenZeppelin/openzeppelin-contracts-ethereum-package/blob/master/contracts/GSN/Context.sol#L37\\n  uint256[50] private __gap1;\\n  uint256[50] private __gap2;\\n  uint256[50] private __gap3;\\n  uint256[50] private __gap4;\\n\\n  // solhint-disable-next-line func-name-mixedcase\\n  function __BaseUpgradeablePausable__init(address owner) public initializer {\\n    require(owner != address(0), \\\"Owner cannot be the zero address\\\");\\n    __AccessControl_init_unchained();\\n    __Pausable_init_unchained();\\n    __ReentrancyGuard_init_unchained();\\n\\n    _setupRole(OWNER_ROLE, owner);\\n    _setupRole(PAUSER_ROLE, owner);\\n\\n    _setRoleAdmin(PAUSER_ROLE, OWNER_ROLE);\\n    _setRoleAdmin(OWNER_ROLE, OWNER_ROLE);\\n  }\\n\\n  function isAdmin() public view returns (bool) {\\n    return hasRole(OWNER_ROLE, _msgSender());\\n  }\\n\\n  modifier onlyAdmin() {\\n    require(isAdmin(), \\\"Must have admin role to perform this action\\\");\\n    _;\\n  }\\n}\\n\",\"keccak256\":\"0x555f6b770e8c9abbf90aa2d51f7f4c10161aa9f6ab6c3f0f4647cdbee8225c81\",\"license\":\"MIT\"},\"contracts/protocol/core/ConfigHelper.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.6.12;\\npragma experimental ABIEncoderV2;\\n\\nimport \\\"./GoldfinchConfig.sol\\\";\\nimport \\\"../../interfaces/IPool.sol\\\";\\nimport \\\"../../interfaces/IFidu.sol\\\";\\nimport \\\"../../interfaces/ISeniorPool.sol\\\";\\nimport \\\"../../interfaces/ISeniorPoolStrategy.sol\\\";\\nimport \\\"../../interfaces/ICreditDesk.sol\\\";\\nimport \\\"../../interfaces/IERC20withDec.sol\\\";\\nimport \\\"../../interfaces/ICUSDCContract.sol\\\";\\nimport \\\"../../interfaces/IPoolTokens.sol\\\";\\nimport \\\"../../interfaces/IBackerRewards.sol\\\";\\nimport \\\"../../interfaces/IGoldfinchFactory.sol\\\";\\nimport \\\"../../interfaces/IGo.sol\\\";\\nimport \\\"../../interfaces/IStakingRewards.sol\\\";\\nimport \\\"../../interfaces/ICurveLP.sol\\\";\\n\\n/**\\n * @title ConfigHelper\\n * @notice A convenience library for getting easy access to other contracts and constants within the\\n *  protocol, through the use of the GoldfinchConfig contract\\n * @author Goldfinch\\n */\\n\\nlibrary ConfigHelper {\\n  function getPool(GoldfinchConfig config) internal view returns (IPool) {\\n    return IPool(poolAddress(config));\\n  }\\n\\n  function getSeniorPool(GoldfinchConfig config) internal view returns (ISeniorPool) {\\n    return ISeniorPool(seniorPoolAddress(config));\\n  }\\n\\n  function getSeniorPoolStrategy(GoldfinchConfig config) internal view returns (ISeniorPoolStrategy) {\\n    return ISeniorPoolStrategy(seniorPoolStrategyAddress(config));\\n  }\\n\\n  function getUSDC(GoldfinchConfig config) internal view returns (IERC20withDec) {\\n    return IERC20withDec(usdcAddress(config));\\n  }\\n\\n  function getCreditDesk(GoldfinchConfig config) internal view returns (ICreditDesk) {\\n    return ICreditDesk(creditDeskAddress(config));\\n  }\\n\\n  function getFidu(GoldfinchConfig config) internal view returns (IFidu) {\\n    return IFidu(fiduAddress(config));\\n  }\\n\\n  function getFiduUSDCCurveLP(GoldfinchConfig config) internal view returns (ICurveLP) {\\n    return ICurveLP(fiduUSDCCurveLPAddress(config));\\n  }\\n\\n  function getCUSDCContract(GoldfinchConfig config) internal view returns (ICUSDCContract) {\\n    return ICUSDCContract(cusdcContractAddress(config));\\n  }\\n\\n  function getPoolTokens(GoldfinchConfig config) internal view returns (IPoolTokens) {\\n    return IPoolTokens(poolTokensAddress(config));\\n  }\\n\\n  function getBackerRewards(GoldfinchConfig config) internal view returns (IBackerRewards) {\\n    return IBackerRewards(backerRewardsAddress(config));\\n  }\\n\\n  function getGoldfinchFactory(GoldfinchConfig config) internal view returns (IGoldfinchFactory) {\\n    return IGoldfinchFactory(goldfinchFactoryAddress(config));\\n  }\\n\\n  function getGFI(GoldfinchConfig config) internal view returns (IERC20withDec) {\\n    return IERC20withDec(gfiAddress(config));\\n  }\\n\\n  function getGo(GoldfinchConfig config) internal view returns (IGo) {\\n    return IGo(goAddress(config));\\n  }\\n\\n  function getStakingRewards(GoldfinchConfig config) internal view returns (IStakingRewards) {\\n    return IStakingRewards(stakingRewardsAddress(config));\\n  }\\n\\n  function oneInchAddress(GoldfinchConfig config) internal view returns (address) {\\n    return config.getAddress(uint256(ConfigOptions.Addresses.OneInch));\\n  }\\n\\n  function creditLineImplementationAddress(GoldfinchConfig config) internal view returns (address) {\\n    return config.getAddress(uint256(ConfigOptions.Addresses.CreditLineImplementation));\\n  }\\n\\n  function trustedForwarderAddress(GoldfinchConfig config) internal view returns (address) {\\n    return config.getAddress(uint256(ConfigOptions.Addresses.TrustedForwarder));\\n  }\\n\\n  function configAddress(GoldfinchConfig config) internal view returns (address) {\\n    return config.getAddress(uint256(ConfigOptions.Addresses.GoldfinchConfig));\\n  }\\n\\n  function poolAddress(GoldfinchConfig config) internal view returns (address) {\\n    return config.getAddress(uint256(ConfigOptions.Addresses.Pool));\\n  }\\n\\n  function poolTokensAddress(GoldfinchConfig config) internal view returns (address) {\\n    return config.getAddress(uint256(ConfigOptions.Addresses.PoolTokens));\\n  }\\n\\n  function backerRewardsAddress(GoldfinchConfig config) internal view returns (address) {\\n    return config.getAddress(uint256(ConfigOptions.Addresses.BackerRewards));\\n  }\\n\\n  function seniorPoolAddress(GoldfinchConfig config) internal view returns (address) {\\n    return config.getAddress(uint256(ConfigOptions.Addresses.SeniorPool));\\n  }\\n\\n  function seniorPoolStrategyAddress(GoldfinchConfig config) internal view returns (address) {\\n    return config.getAddress(uint256(ConfigOptions.Addresses.SeniorPoolStrategy));\\n  }\\n\\n  function creditDeskAddress(GoldfinchConfig config) internal view returns (address) {\\n    return config.getAddress(uint256(ConfigOptions.Addresses.CreditDesk));\\n  }\\n\\n  function goldfinchFactoryAddress(GoldfinchConfig config) internal view returns (address) {\\n    return config.getAddress(uint256(ConfigOptions.Addresses.GoldfinchFactory));\\n  }\\n\\n  function gfiAddress(GoldfinchConfig config) internal view returns (address) {\\n    return config.getAddress(uint256(ConfigOptions.Addresses.GFI));\\n  }\\n\\n  function fiduAddress(GoldfinchConfig config) internal view returns (address) {\\n    return config.getAddress(uint256(ConfigOptions.Addresses.Fidu));\\n  }\\n\\n  function fiduUSDCCurveLPAddress(GoldfinchConfig config) internal view returns (address) {\\n    return config.getAddress(uint256(ConfigOptions.Addresses.FiduUSDCCurveLP));\\n  }\\n\\n  function cusdcContractAddress(GoldfinchConfig config) internal view returns (address) {\\n    return config.getAddress(uint256(ConfigOptions.Addresses.CUSDCContract));\\n  }\\n\\n  function usdcAddress(GoldfinchConfig config) internal view returns (address) {\\n    return config.getAddress(uint256(ConfigOptions.Addresses.USDC));\\n  }\\n\\n  function tranchedPoolAddress(GoldfinchConfig config) internal view returns (address) {\\n    return config.getAddress(uint256(ConfigOptions.Addresses.TranchedPoolImplementation));\\n  }\\n\\n  function migratedTranchedPoolAddress(GoldfinchConfig config) internal view returns (address) {\\n    return config.getAddress(uint256(ConfigOptions.Addresses.MigratedTranchedPoolImplementation));\\n  }\\n\\n  function reserveAddress(GoldfinchConfig config) internal view returns (address) {\\n    return config.getAddress(uint256(ConfigOptions.Addresses.TreasuryReserve));\\n  }\\n\\n  function protocolAdminAddress(GoldfinchConfig config) internal view returns (address) {\\n    return config.getAddress(uint256(ConfigOptions.Addresses.ProtocolAdmin));\\n  }\\n\\n  function borrowerImplementationAddress(GoldfinchConfig config) internal view returns (address) {\\n    return config.getAddress(uint256(ConfigOptions.Addresses.BorrowerImplementation));\\n  }\\n\\n  function goAddress(GoldfinchConfig config) internal view returns (address) {\\n    return config.getAddress(uint256(ConfigOptions.Addresses.Go));\\n  }\\n\\n  function stakingRewardsAddress(GoldfinchConfig config) internal view returns (address) {\\n    return config.getAddress(uint256(ConfigOptions.Addresses.StakingRewards));\\n  }\\n\\n  function getReserveDenominator(GoldfinchConfig config) internal view returns (uint256) {\\n    return config.getNumber(uint256(ConfigOptions.Numbers.ReserveDenominator));\\n  }\\n\\n  function getWithdrawFeeDenominator(GoldfinchConfig config) internal view returns (uint256) {\\n    return config.getNumber(uint256(ConfigOptions.Numbers.WithdrawFeeDenominator));\\n  }\\n\\n  function getLatenessGracePeriodInDays(GoldfinchConfig config) internal view returns (uint256) {\\n    return config.getNumber(uint256(ConfigOptions.Numbers.LatenessGracePeriodInDays));\\n  }\\n\\n  function getLatenessMaxDays(GoldfinchConfig config) internal view returns (uint256) {\\n    return config.getNumber(uint256(ConfigOptions.Numbers.LatenessMaxDays));\\n  }\\n\\n  function getDrawdownPeriodInSeconds(GoldfinchConfig config) internal view returns (uint256) {\\n    return config.getNumber(uint256(ConfigOptions.Numbers.DrawdownPeriodInSeconds));\\n  }\\n\\n  function getTransferRestrictionPeriodInDays(GoldfinchConfig config) internal view returns (uint256) {\\n    return config.getNumber(uint256(ConfigOptions.Numbers.TransferRestrictionPeriodInDays));\\n  }\\n\\n  function getLeverageRatio(GoldfinchConfig config) internal view returns (uint256) {\\n    return config.getNumber(uint256(ConfigOptions.Numbers.LeverageRatio));\\n  }\\n}\\n\",\"keccak256\":\"0x47ef57a513fa8a8d67b68f53e1141420957335a7209031529711df518d286380\",\"license\":\"MIT\"},\"contracts/protocol/core/ConfigOptions.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.6.12;\\npragma experimental ABIEncoderV2;\\n\\n/**\\n * @title ConfigOptions\\n * @notice A central place for enumerating the configurable options of our GoldfinchConfig contract\\n * @author Goldfinch\\n */\\n\\nlibrary ConfigOptions {\\n  // NEVER EVER CHANGE THE ORDER OF THESE!\\n  // You can rename or append. But NEVER change the order.\\n  enum Numbers {\\n    TransactionLimit,\\n    TotalFundsLimit,\\n    MaxUnderwriterLimit,\\n    ReserveDenominator,\\n    WithdrawFeeDenominator,\\n    LatenessGracePeriodInDays,\\n    LatenessMaxDays,\\n    DrawdownPeriodInSeconds,\\n    TransferRestrictionPeriodInDays,\\n    LeverageRatio\\n  }\\n  enum Addresses {\\n    Pool,\\n    CreditLineImplementation,\\n    GoldfinchFactory,\\n    CreditDesk,\\n    Fidu,\\n    USDC,\\n    TreasuryReserve,\\n    ProtocolAdmin,\\n    OneInch,\\n    TrustedForwarder,\\n    CUSDCContract,\\n    GoldfinchConfig,\\n    PoolTokens,\\n    TranchedPoolImplementation,\\n    SeniorPool,\\n    SeniorPoolStrategy,\\n    MigratedTranchedPoolImplementation,\\n    BorrowerImplementation,\\n    GFI,\\n    Go,\\n    BackerRewards,\\n    StakingRewards,\\n    FiduUSDCCurveLP\\n  }\\n}\\n\",\"keccak256\":\"0xdfb22b59a3c2a521c1feadf8e79cbdbe4fb80299037dc21d93cb73649c9f8e95\",\"license\":\"MIT\"},\"contracts/protocol/core/GoldfinchConfig.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.6.12;\\npragma experimental ABIEncoderV2;\\n\\nimport \\\"./BaseUpgradeablePausable.sol\\\";\\nimport \\\"../../interfaces/IGoldfinchConfig.sol\\\";\\nimport \\\"./ConfigOptions.sol\\\";\\n\\n/**\\n * @title GoldfinchConfig\\n * @notice This contract stores mappings of useful \\\"protocol config state\\\", giving a central place\\n *  for all other contracts to access it. For example, the TransactionLimit, or the PoolAddress. These config vars\\n *  are enumerated in the `ConfigOptions` library, and can only be changed by admins of the protocol.\\n *  Note: While this inherits from BaseUpgradeablePausable, it is not deployed as an upgradeable contract (this\\n *    is mostly to save gas costs of having each call go through a proxy)\\n * @author Goldfinch\\n */\\n\\ncontract GoldfinchConfig is BaseUpgradeablePausable {\\n  bytes32 public constant GO_LISTER_ROLE = keccak256(\\\"GO_LISTER_ROLE\\\");\\n\\n  mapping(uint256 => address) public addresses;\\n  mapping(uint256 => uint256) public numbers;\\n  mapping(address => bool) public goList;\\n\\n  event AddressUpdated(address owner, uint256 index, address oldValue, address newValue);\\n  event NumberUpdated(address owner, uint256 index, uint256 oldValue, uint256 newValue);\\n\\n  event GoListed(address indexed member);\\n  event NoListed(address indexed member);\\n\\n  bool public valuesInitialized;\\n\\n  function initialize(address owner) public initializer {\\n    require(owner != address(0), \\\"Owner address cannot be empty\\\");\\n\\n    __BaseUpgradeablePausable__init(owner);\\n\\n    _setupRole(GO_LISTER_ROLE, owner);\\n\\n    _setRoleAdmin(GO_LISTER_ROLE, OWNER_ROLE);\\n  }\\n\\n  function setAddress(uint256 addressIndex, address newAddress) public onlyAdmin {\\n    require(addresses[addressIndex] == address(0), \\\"Address has already been initialized\\\");\\n\\n    emit AddressUpdated(msg.sender, addressIndex, addresses[addressIndex], newAddress);\\n    addresses[addressIndex] = newAddress;\\n  }\\n\\n  function setNumber(uint256 index, uint256 newNumber) public onlyAdmin {\\n    emit NumberUpdated(msg.sender, index, numbers[index], newNumber);\\n    numbers[index] = newNumber;\\n  }\\n\\n  function setTreasuryReserve(address newTreasuryReserve) public onlyAdmin {\\n    uint256 key = uint256(ConfigOptions.Addresses.TreasuryReserve);\\n    emit AddressUpdated(msg.sender, key, addresses[key], newTreasuryReserve);\\n    addresses[key] = newTreasuryReserve;\\n  }\\n\\n  function setSeniorPoolStrategy(address newStrategy) public onlyAdmin {\\n    uint256 key = uint256(ConfigOptions.Addresses.SeniorPoolStrategy);\\n    emit AddressUpdated(msg.sender, key, addresses[key], newStrategy);\\n    addresses[key] = newStrategy;\\n  }\\n\\n  function setCreditLineImplementation(address newAddress) public onlyAdmin {\\n    uint256 key = uint256(ConfigOptions.Addresses.CreditLineImplementation);\\n    emit AddressUpdated(msg.sender, key, addresses[key], newAddress);\\n    addresses[key] = newAddress;\\n  }\\n\\n  function setTranchedPoolImplementation(address newAddress) public onlyAdmin {\\n    uint256 key = uint256(ConfigOptions.Addresses.TranchedPoolImplementation);\\n    emit AddressUpdated(msg.sender, key, addresses[key], newAddress);\\n    addresses[key] = newAddress;\\n  }\\n\\n  function setBorrowerImplementation(address newAddress) public onlyAdmin {\\n    uint256 key = uint256(ConfigOptions.Addresses.BorrowerImplementation);\\n    emit AddressUpdated(msg.sender, key, addresses[key], newAddress);\\n    addresses[key] = newAddress;\\n  }\\n\\n  function setGoldfinchConfig(address newAddress) public onlyAdmin {\\n    uint256 key = uint256(ConfigOptions.Addresses.GoldfinchConfig);\\n    emit AddressUpdated(msg.sender, key, addresses[key], newAddress);\\n    addresses[key] = newAddress;\\n  }\\n\\n  function initializeFromOtherConfig(\\n    address _initialConfig,\\n    uint256 numbersLength,\\n    uint256 addressesLength\\n  ) public onlyAdmin {\\n    require(!valuesInitialized, \\\"Already initialized values\\\");\\n    IGoldfinchConfig initialConfig = IGoldfinchConfig(_initialConfig);\\n    for (uint256 i = 0; i < numbersLength; i++) {\\n      setNumber(i, initialConfig.getNumber(i));\\n    }\\n\\n    for (uint256 i = 0; i < addressesLength; i++) {\\n      if (getAddress(i) == address(0)) {\\n        setAddress(i, initialConfig.getAddress(i));\\n      }\\n    }\\n    valuesInitialized = true;\\n  }\\n\\n  /**\\n   * @dev Adds a user to go-list\\n   * @param _member address to add to go-list\\n   */\\n  function addToGoList(address _member) public onlyGoListerRole {\\n    goList[_member] = true;\\n    emit GoListed(_member);\\n  }\\n\\n  /**\\n   * @dev removes a user from go-list\\n   * @param _member address to remove from go-list\\n   */\\n  function removeFromGoList(address _member) public onlyGoListerRole {\\n    goList[_member] = false;\\n    emit NoListed(_member);\\n  }\\n\\n  /**\\n   * @dev adds many users to go-list at once\\n   * @param _members addresses to ad to go-list\\n   */\\n  function bulkAddToGoList(address[] calldata _members) external onlyGoListerRole {\\n    for (uint256 i = 0; i < _members.length; i++) {\\n      addToGoList(_members[i]);\\n    }\\n  }\\n\\n  /**\\n   * @dev removes many users from go-list at once\\n   * @param _members addresses to remove from go-list\\n   */\\n  function bulkRemoveFromGoList(address[] calldata _members) external onlyGoListerRole {\\n    for (uint256 i = 0; i < _members.length; i++) {\\n      removeFromGoList(_members[i]);\\n    }\\n  }\\n\\n  /*\\n    Using custom getters in case we want to change underlying implementation later,\\n    or add checks or validations later on.\\n  */\\n  function getAddress(uint256 index) public view returns (address) {\\n    return addresses[index];\\n  }\\n\\n  function getNumber(uint256 index) public view returns (uint256) {\\n    return numbers[index];\\n  }\\n\\n  modifier onlyGoListerRole() {\\n    require(hasRole(GO_LISTER_ROLE, _msgSender()), \\\"Must have go-lister role to perform this action\\\");\\n    _;\\n  }\\n}\\n\",\"keccak256\":\"0x20a1c0f6183595dc4529b65f21beb92c76c959bffaba947b9648f6c422f99767\",\"license\":\"MIT\"},\"contracts/protocol/core/PauserPausable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.6.12;\\npragma experimental ABIEncoderV2;\\n\\nimport \\\"@openzeppelin/contracts-ethereum-package/contracts/utils/Pausable.sol\\\";\\nimport \\\"@openzeppelin/contracts-ethereum-package/contracts/access/AccessControl.sol\\\";\\n\\n/**\\n * @title PauserPausable\\n * @notice Inheriting from OpenZeppelin's Pausable contract, this does small\\n *  augmentations to make it work with a PAUSER_ROLE, leveraging the AccessControl contract.\\n *  It is meant to be inherited.\\n * @author Goldfinch\\n */\\n\\ncontract PauserPausable is AccessControlUpgradeSafe, PausableUpgradeSafe {\\n  bytes32 public constant PAUSER_ROLE = keccak256(\\\"PAUSER_ROLE\\\");\\n\\n  // solhint-disable-next-line func-name-mixedcase\\n  function __PauserPausable__init() public initializer {\\n    __Pausable_init_unchained();\\n  }\\n\\n  /**\\n   * @dev Pauses all functions guarded by Pause\\n   *\\n   * See {Pausable-_pause}.\\n   *\\n   * Requirements:\\n   *\\n   * - the caller must have the PAUSER_ROLE.\\n   */\\n\\n  function pause() public onlyPauserRole {\\n    _pause();\\n  }\\n\\n  /**\\n   * @dev Unpauses the contract\\n   *\\n   * See {Pausable-_unpause}.\\n   *\\n   * Requirements:\\n   *\\n   * - the caller must have the Pauser role\\n   */\\n  function unpause() public onlyPauserRole {\\n    _unpause();\\n  }\\n\\n  modifier onlyPauserRole() {\\n    require(hasRole(PAUSER_ROLE, _msgSender()), \\\"Must have pauser role to perform this action\\\");\\n    _;\\n  }\\n}\\n\",\"keccak256\":\"0x855f5027a20c77b500dd8618a4881c64e8b63a62168fed0abf3be01a6e8e8a4d\",\"license\":\"MIT\"},\"contracts/rewards/BackerRewards.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.6.12;\\npragma experimental ABIEncoderV2;\\n\\nimport \\\"@openzeppelin/contracts-ethereum-package/contracts/math/Math.sol\\\";\\nimport \\\"@openzeppelin/contracts-ethereum-package/contracts/math/SafeMath.sol\\\";\\nimport \\\"@uniswap/lib/contracts/libraries/Babylonian.sol\\\";\\n\\nimport \\\"../library/SafeERC20Transfer.sol\\\";\\nimport \\\"../protocol/core/ConfigHelper.sol\\\";\\nimport \\\"../protocol/core/BaseUpgradeablePausable.sol\\\";\\nimport \\\"../interfaces/IPoolTokens.sol\\\";\\nimport \\\"../interfaces/IStakingRewards.sol\\\";\\nimport \\\"../interfaces/ITranchedPool.sol\\\";\\nimport \\\"../interfaces/IBackerRewards.sol\\\";\\nimport \\\"../interfaces/ISeniorPool.sol\\\";\\nimport \\\"../interfaces/IEvents.sol\\\";\\n\\n// Basically, Every time a interest payment comes back\\n// we keep a running total of dollars (totalInterestReceived) until it reaches the maxInterestDollarsEligible limit\\n// Every dollar of interest received from 0->maxInterestDollarsEligible\\n// has a allocated amount of rewards based on a sqrt function.\\n\\n// When a interest payment comes in for a given Pool or the pool balance increases\\n// we recalculate the pool's accRewardsPerPrincipalDollar\\n\\n// equation ref `_calculateNewGrossGFIRewardsForInterestAmount()`:\\n// (sqrtNewTotalInterest - sqrtOrigTotalInterest) / sqrtMaxInterestDollarsEligible * (totalRewards / totalGFISupply)\\n\\n// When a PoolToken is minted, we set the mint price to the pool's current accRewardsPerPrincipalDollar\\n// Every time a PoolToken withdraws rewards, we determine the allocated rewards,\\n// increase that PoolToken's rewardsClaimed, and transfer the owner the gfi\\n\\ncontract BackerRewards is IBackerRewards, BaseUpgradeablePausable, SafeERC20Transfer, IEvents {\\n  GoldfinchConfig public config;\\n  using ConfigHelper for GoldfinchConfig;\\n  using SafeMath for uint256;\\n\\n  uint256 internal constant GFI_MANTISSA = 10**18;\\n  uint256 internal constant FIDU_MANTISSA = 10**18;\\n  uint256 internal constant USDC_MANTISSA = 10**6;\\n  uint256 internal constant NUM_TRANCHES_PER_SLICE = 2;\\n\\n  struct BackerRewardsInfo {\\n    uint256 accRewardsPerPrincipalDollar; // accumulator gfi per interest dollar\\n  }\\n\\n  struct BackerRewardsTokenInfo {\\n    uint256 rewardsClaimed; // gfi claimed\\n    uint256 accRewardsPerPrincipalDollarAtMint; // Pool's accRewardsPerPrincipalDollar at PoolToken mint()\\n  }\\n\\n  /// @notice Staking rewards parameters relevant to a TranchedPool\\n  struct StakingRewardsPoolInfo {\\n    // @notice the value `StakingRewards.accumulatedRewardsPerToken()` at the last checkpoint\\n    uint256 accumulatedRewardsPerTokenAtLastCheckpoint;\\n    // @notice last time the rewards info was updated\\n    //\\n    // we need this in order to know how much to pro rate rewards after the term is over.\\n    uint256 lastUpdateTime;\\n    // @notice staking rewards parameters for each slice of the tranched pool\\n    StakingRewardsSliceInfo[] slicesInfo;\\n  }\\n\\n  /// @notice Staking rewards paramters relevant to a TranchedPool slice\\n  struct StakingRewardsSliceInfo {\\n    // @notice fidu share price when the slice is first drawn down\\n    //\\n    // we need to save this to calculate what an equivalent position in\\n    // the senior pool would be at the time the slice is downdown\\n    uint256 fiduSharePriceAtDrawdown;\\n    // @notice the amount of principal deployed at the last checkpoint\\n    //\\n    // we use this to calculate the amount of principal that should\\n    // acctually accrue rewards during between the last checkpoint and\\n    // and subsequent updates\\n    uint256 principalDeployedAtLastCheckpoint;\\n    // @notice the value of StakingRewards.accumulatedRewardsPerToken() at time of drawdown\\n    //\\n    // we need to keep track of this to use this as a base value to accumulate rewards\\n    // for tokens. If the token has never claimed staking rewards, we use this value\\n    // and the current staking rewards accumulator\\n    uint256 accumulatedRewardsPerTokenAtDrawdown;\\n    // @notice amount of rewards per token accumulated over the lifetime of the slice that a backer\\n    //          can claim\\n    uint256 accumulatedRewardsPerTokenAtLastCheckpoint;\\n    // @notice the amount of rewards per token accumulated over the lifetime of the slice\\n    //\\n    // this value is \\\"unrealized\\\" because backers will be unable to claim against this value.\\n    // we keep this value so that we can always accumulate rewards for the amount of capital\\n    // deployed at any point in time, but not allow backers to withdraw them until a payment\\n    // is made. For example: we want to accumulate rewards when a backer does a drawdown. but\\n    // a backer shouldn't be allowed to claim rewards until a payment is made.\\n    //\\n    // this value is scaled depending on the current proportion of capital currently deployed\\n    // in the slice. For example, if the staking rewards contract accrued 10 rewards per token\\n    // between the current checkpoint and a new update, and only 20% of the capital was deployed\\n    // during that period, we would accumulate 2 (10 * 20%) rewards.\\n    uint256 unrealizedAccumulatedRewardsPerTokenAtLastCheckpoint;\\n  }\\n\\n  /// @notice Staking rewards parameters relevant to a PoolToken\\n  struct StakingRewardsTokenInfo {\\n    // @notice the amount of rewards accumulated the last time a token's rewards were withdrawn\\n    uint256 accumulatedRewardsPerTokenAtLastWithdraw;\\n  }\\n\\n  /// @notice total amount of GFI rewards available, times 1e18\\n  uint256 public totalRewards;\\n\\n  /// @notice interest $ eligible for gfi rewards, times 1e18\\n  uint256 public maxInterestDollarsEligible;\\n\\n  /// @notice counter of total interest repayments, times 1e6\\n  uint256 public totalInterestReceived;\\n\\n  /// @notice totalRewards/totalGFISupply * 100, times 1e18\\n  uint256 public totalRewardPercentOfTotalGFI;\\n\\n  /// @notice poolTokenId -> BackerRewardsTokenInfo\\n  mapping(uint256 => BackerRewardsTokenInfo) public tokens;\\n\\n  /// @notice pool.address -> BackerRewardsInfo\\n  mapping(address => BackerRewardsInfo) public pools;\\n\\n  /// @notice Staking rewards info for each pool\\n  mapping(ITranchedPool => StakingRewardsPoolInfo) public poolStakingRewards; // pool.address -> StakingRewardsPoolInfo\\n\\n  /// @notice Staking rewards info for each pool token\\n  mapping(uint256 => StakingRewardsTokenInfo) public tokenStakingRewards;\\n\\n  // solhint-disable-next-line func-name-mixedcase\\n  function __initialize__(address owner, GoldfinchConfig _config) public initializer {\\n    require(owner != address(0) && address(_config) != address(0), \\\"Owner and config addresses cannot be empty\\\");\\n    __BaseUpgradeablePausable__init(owner);\\n    config = _config;\\n  }\\n\\n  /// @notice intialize the first slice of a StakingRewardsPoolInfo\\n  /// @dev this is _only_ meant to be called on pools that didnt qualify for the backer rewards airdrop\\n  ///       but were deployed before this contract.\\n  function forceInitializeStakingRewardsPoolInfo(\\n    ITranchedPool pool,\\n    uint256 fiduSharePriceAtDrawdown,\\n    uint256 principalDeployedAtDrawdown,\\n    uint256 rewardsAccumulatorAtDrawdown\\n  ) external onlyAdmin {\\n    require(config.getPoolTokens().validPool(address(pool)), \\\"Invalid pool!\\\");\\n    require(fiduSharePriceAtDrawdown != 0, \\\"Invalid: 0\\\");\\n    require(principalDeployedAtDrawdown != 0, \\\"Invalid: 0\\\");\\n    require(rewardsAccumulatorAtDrawdown != 0, \\\"Invalid: 0\\\");\\n\\n    StakingRewardsPoolInfo storage poolInfo = poolStakingRewards[pool];\\n    require(poolInfo.slicesInfo.length <= 1, \\\"trying to overwrite multi slice rewards info!\\\");\\n\\n    // NOTE: making this overwrite behavior to make it so that we have\\n    //           an escape hatch in case the incorrect value is set for some reason\\n    bool firstSliceHasAlreadyBeenInitialized = poolInfo.slicesInfo.length != 0;\\n\\n    poolInfo.accumulatedRewardsPerTokenAtLastCheckpoint = rewardsAccumulatorAtDrawdown;\\n    StakingRewardsSliceInfo memory sliceInfo = _initializeStakingRewardsSliceInfo(\\n      fiduSharePriceAtDrawdown,\\n      principalDeployedAtDrawdown,\\n      rewardsAccumulatorAtDrawdown\\n    );\\n\\n    if (firstSliceHasAlreadyBeenInitialized) {\\n      poolInfo.slicesInfo[0] = sliceInfo;\\n    } else {\\n      poolInfo.slicesInfo.push(sliceInfo);\\n    }\\n  }\\n\\n  /**\\n   * @notice Calculates the accRewardsPerPrincipalDollar for a given pool,\\n   *          when a interest payment is received by the protocol\\n   * @param _interestPaymentAmount The amount of total dollars the interest payment, expects 10^6 value\\n   */\\n  function allocateRewards(uint256 _interestPaymentAmount) external override onlyPool nonReentrant {\\n    // note: do not use a require statment because that will TranchedPool kill execution\\n    if (_interestPaymentAmount > 0) {\\n      _allocateRewards(_interestPaymentAmount);\\n    }\\n\\n    _allocateStakingRewards();\\n  }\\n\\n  /**\\n   * @notice Set the total gfi rewards and the % of total GFI\\n   * @param _totalRewards The amount of GFI rewards available, expects 10^18 value\\n   */\\n  function setTotalRewards(uint256 _totalRewards) public onlyAdmin {\\n    totalRewards = _totalRewards;\\n    uint256 totalGFISupply = config.getGFI().totalSupply();\\n    totalRewardPercentOfTotalGFI = _totalRewards.mul(GFI_MANTISSA).div(totalGFISupply).mul(100);\\n    emit BackerRewardsSetTotalRewards(_msgSender(), _totalRewards, totalRewardPercentOfTotalGFI);\\n  }\\n\\n  /**\\n   * @notice Set the total interest received to date.\\n   * This should only be called once on contract deploy.\\n   * @param _totalInterestReceived The amount of interest the protocol has received to date, expects 10^6 value\\n   */\\n  function setTotalInterestReceived(uint256 _totalInterestReceived) public onlyAdmin {\\n    totalInterestReceived = _totalInterestReceived;\\n    emit BackerRewardsSetTotalInterestReceived(_msgSender(), _totalInterestReceived);\\n  }\\n\\n  /**\\n   * @notice Set the max dollars across the entire protocol that are eligible for GFI rewards\\n   * @param _maxInterestDollarsEligible The amount of interest dollars eligible for GFI rewards, expects 10^18 value\\n   */\\n  function setMaxInterestDollarsEligible(uint256 _maxInterestDollarsEligible) public onlyAdmin {\\n    maxInterestDollarsEligible = _maxInterestDollarsEligible;\\n    emit BackerRewardsSetMaxInterestDollarsEligible(_msgSender(), _maxInterestDollarsEligible);\\n  }\\n\\n  /**\\n   * @notice When a pool token is minted for multiple drawdowns,\\n   *  set accRewardsPerPrincipalDollarAtMint to the current accRewardsPerPrincipalDollar price\\n   * @param tokenId Pool token id\\n   */\\n  function setPoolTokenAccRewardsPerPrincipalDollarAtMint(address poolAddress, uint256 tokenId) external override {\\n    require(_msgSender() == config.poolTokensAddress(), \\\"Invalid sender!\\\");\\n    require(config.getPoolTokens().validPool(poolAddress), \\\"Invalid pool!\\\");\\n    if (tokens[tokenId].accRewardsPerPrincipalDollarAtMint != 0) {\\n      return;\\n    }\\n    IPoolTokens poolTokens = config.getPoolTokens();\\n    IPoolTokens.TokenInfo memory tokenInfo = poolTokens.getTokenInfo(tokenId);\\n    require(poolAddress == tokenInfo.pool, \\\"PoolAddress must equal PoolToken pool address\\\");\\n\\n    tokens[tokenId].accRewardsPerPrincipalDollarAtMint = pools[tokenInfo.pool].accRewardsPerPrincipalDollar;\\n  }\\n\\n  /// @notice callback for TranchedPools when they drawdown\\n  /// @dev initializes rewards info for the calling TranchedPool\\n  function onTranchedPoolDrawdown(uint256 sliceIndex) external override onlyPool nonReentrant {\\n    ITranchedPool pool = ITranchedPool(_msgSender());\\n    IStakingRewards stakingRewards = _getUpdatedStakingRewards();\\n    StakingRewardsPoolInfo storage poolInfo = poolStakingRewards[pool];\\n    ITranchedPool.TrancheInfo memory juniorTranche = _getJuniorTrancheForTranchedPoolSlice(pool, sliceIndex);\\n    uint256 newRewardsAccumulator = stakingRewards.accumulatedRewardsPerToken();\\n\\n    // On the first drawdown in the lifetime of the pool, we need to initialize\\n    // the pool local accumulator\\n    bool poolRewardsHaventBeenInitialized = !_poolStakingRewardsInfoHaveBeenInitialized(poolInfo);\\n    if (poolRewardsHaventBeenInitialized) {\\n      _updateStakingRewardsPoolInfoAccumulator(poolInfo, newRewardsAccumulator);\\n    }\\n\\n    bool isNewSlice = !_sliceRewardsHaveBeenInitialized(pool, sliceIndex);\\n    if (isNewSlice) {\\n      ISeniorPool seniorPool = ISeniorPool(config.seniorPoolAddress());\\n      uint256 principalDeployedAtDrawdown = _getPrincipalDeployedForTranche(juniorTranche);\\n      uint256 fiduSharePriceAtDrawdown = seniorPool.sharePrice();\\n\\n      // initialize new slice params\\n      StakingRewardsSliceInfo memory sliceInfo = _initializeStakingRewardsSliceInfo(\\n        fiduSharePriceAtDrawdown,\\n        principalDeployedAtDrawdown,\\n        newRewardsAccumulator\\n      );\\n\\n      poolStakingRewards[pool].slicesInfo.push(sliceInfo);\\n    } else {\\n      // otherwise, its nth drawdown of the slice\\n      // we need to checkpoint the values here to account for the amount of principal\\n      // that was at risk between the last checkpoint and now, but we don't publish\\n      // because backer's shouldn't be able to claim rewards for a drawdown.\\n      _checkpointSliceStakingRewards(pool, sliceIndex, false);\\n    }\\n\\n    _updateStakingRewardsPoolInfoAccumulator(poolInfo, newRewardsAccumulator);\\n  }\\n\\n  /**\\n   * @notice Calculate the gross available gfi rewards for a PoolToken\\n   * @param tokenId Pool token id\\n   * @return The amount of GFI claimable\\n   */\\n  function poolTokenClaimableRewards(uint256 tokenId) public view returns (uint256) {\\n    IPoolTokens poolTokens = config.getPoolTokens();\\n    IPoolTokens.TokenInfo memory tokenInfo = poolTokens.getTokenInfo(tokenId);\\n\\n    if (_isSeniorTrancheToken(tokenInfo)) {\\n      return 0;\\n    }\\n\\n    // Note: If a TranchedPool is oversubscribed, reward allocations scale down proportionately.\\n\\n    uint256 diffOfAccRewardsPerPrincipalDollar = pools[tokenInfo.pool].accRewardsPerPrincipalDollar.sub(\\n      tokens[tokenId].accRewardsPerPrincipalDollarAtMint\\n    );\\n    uint256 rewardsClaimed = tokens[tokenId].rewardsClaimed.mul(GFI_MANTISSA);\\n\\n    /*\\n      equation for token claimable rewards:\\n        token.principalAmount\\n        * (pool.accRewardsPerPrincipalDollar - token.accRewardsPerPrincipalDollarAtMint)\\n        - token.rewardsClaimed\\n    */\\n\\n    return\\n      _usdcToAtomic(tokenInfo.principalAmount).mul(diffOfAccRewardsPerPrincipalDollar).sub(rewardsClaimed).div(\\n        GFI_MANTISSA\\n      );\\n  }\\n\\n  /**\\n   * @notice Calculates the amount of staking rewards already claimed for a PoolToken.\\n   * This function is provided for the sake of external (e.g. frontend client) consumption;\\n   * it is not necessary as an input to the mutative calculations in this contract.\\n   * @param tokenId Pool token id\\n   * @return The amount of GFI claimed\\n   */\\n  function stakingRewardsClaimed(uint256 tokenId) external view returns (uint256) {\\n    IPoolTokens poolTokens = config.getPoolTokens();\\n    IPoolTokens.TokenInfo memory poolTokenInfo = poolTokens.getTokenInfo(tokenId);\\n\\n    if (_isSeniorTrancheToken(poolTokenInfo)) {\\n      return 0;\\n    }\\n\\n    ITranchedPool pool = ITranchedPool(poolTokenInfo.pool);\\n    uint256 sliceIndex = _juniorTrancheIdToSliceIndex(poolTokenInfo.tranche);\\n\\n    if (!_poolRewardsHaveBeenInitialized(pool) || !_sliceRewardsHaveBeenInitialized(pool, sliceIndex)) {\\n      return 0;\\n    }\\n\\n    StakingRewardsPoolInfo memory poolInfo = poolStakingRewards[pool];\\n    StakingRewardsSliceInfo memory sliceInfo = poolInfo.slicesInfo[sliceIndex];\\n    StakingRewardsTokenInfo memory tokenInfo = tokenStakingRewards[tokenId];\\n\\n    uint256 sliceAccumulator = sliceInfo.accumulatedRewardsPerTokenAtDrawdown;\\n    uint256 tokenAccumulator = _getTokenAccumulatorAtLastWithdraw(tokenInfo, sliceInfo);\\n    uint256 rewardsPerFidu = tokenAccumulator.sub(sliceAccumulator);\\n    uint256 principalAsFidu = _fiduToUsdc(poolTokenInfo.principalAmount, sliceInfo.fiduSharePriceAtDrawdown);\\n    uint256 rewards = principalAsFidu.mul(rewardsPerFidu).div(FIDU_MANTISSA);\\n    return rewards;\\n  }\\n\\n  /**\\n   * @notice PoolToken request to withdraw multiple PoolTokens allocated rewards\\n   * @param tokenIds Array of pool token id\\n   */\\n  function withdrawMultiple(uint256[] calldata tokenIds) public {\\n    require(tokenIds.length > 0, \\\"TokensIds length must not be 0\\\");\\n\\n    for (uint256 i = 0; i < tokenIds.length; i++) {\\n      withdraw(tokenIds[i]);\\n    }\\n  }\\n\\n  /**\\n   * @notice PoolToken request to withdraw all allocated rewards\\n   * @param tokenId Pool token id\\n   */\\n  function withdraw(uint256 tokenId) public whenNotPaused nonReentrant {\\n    IPoolTokens poolTokens = config.getPoolTokens();\\n    IPoolTokens.TokenInfo memory tokenInfo = poolTokens.getTokenInfo(tokenId);\\n\\n    address poolAddr = tokenInfo.pool;\\n    require(config.getPoolTokens().validPool(poolAddr), \\\"Invalid pool!\\\");\\n    require(msg.sender == poolTokens.ownerOf(tokenId), \\\"Must be owner of PoolToken\\\");\\n\\n    BaseUpgradeablePausable pool = BaseUpgradeablePausable(poolAddr);\\n    require(!pool.paused(), \\\"Pool withdraw paused\\\");\\n\\n    ITranchedPool tranchedPool = ITranchedPool(poolAddr);\\n    require(!tranchedPool.creditLine().isLate(), \\\"Pool is late on payments\\\");\\n\\n    require(!_isSeniorTrancheToken(tokenInfo), \\\"Ineligible senior tranche token\\\");\\n\\n    uint256 claimableBackerRewards = poolTokenClaimableRewards(tokenId);\\n    uint256 claimableStakingRewards = stakingRewardsEarnedSinceLastWithdraw(tokenId);\\n    uint256 totalClaimableRewards = claimableBackerRewards.add(claimableStakingRewards);\\n    uint256 poolTokenRewardsClaimed = tokens[tokenId].rewardsClaimed;\\n\\n    // Only account for claimed backer rewards, the staking rewards should not impact the\\n    // distribution of backer rewards\\n    tokens[tokenId].rewardsClaimed = poolTokenRewardsClaimed.add(claimableBackerRewards);\\n\\n    if (claimableStakingRewards != 0) {\\n      _checkpointTokenStakingRewards(tokenId);\\n    }\\n\\n    safeERC20Transfer(config.getGFI(), poolTokens.ownerOf(tokenId), totalClaimableRewards);\\n    emit BackerRewardsClaimed(_msgSender(), tokenId, claimableBackerRewards, claimableStakingRewards);\\n  }\\n\\n  /**\\n   * @notice Returns the amount of staking rewards earned by a given token since the last\\n   * time its staking rewards were withdrawn.\\n   * @param tokenId token id to get rewards\\n   * @return amount of rewards\\n   */\\n  function stakingRewardsEarnedSinceLastWithdraw(uint256 tokenId) public view returns (uint256) {\\n    IPoolTokens.TokenInfo memory poolTokenInfo = config.getPoolTokens().getTokenInfo(tokenId);\\n    if (_isSeniorTrancheToken(poolTokenInfo)) {\\n      return 0;\\n    }\\n\\n    ITranchedPool pool = ITranchedPool(poolTokenInfo.pool);\\n    uint256 sliceIndex = _juniorTrancheIdToSliceIndex(poolTokenInfo.tranche);\\n\\n    if (!_poolRewardsHaveBeenInitialized(pool) || !_sliceRewardsHaveBeenInitialized(pool, sliceIndex)) {\\n      return 0;\\n    }\\n\\n    StakingRewardsPoolInfo memory poolInfo = poolStakingRewards[pool];\\n    StakingRewardsSliceInfo memory sliceInfo = poolInfo.slicesInfo[sliceIndex];\\n    StakingRewardsTokenInfo memory tokenInfo = tokenStakingRewards[tokenId];\\n\\n    uint256 sliceAccumulator = _getSliceAccumulatorAtLastCheckpoint(sliceInfo, poolInfo);\\n    uint256 tokenAccumulator = _getTokenAccumulatorAtLastWithdraw(tokenInfo, sliceInfo);\\n    uint256 rewardsPerFidu = sliceAccumulator.sub(tokenAccumulator);\\n    uint256 principalAsFidu = _fiduToUsdc(poolTokenInfo.principalAmount, sliceInfo.fiduSharePriceAtDrawdown);\\n    uint256 rewards = principalAsFidu.mul(rewardsPerFidu).div(FIDU_MANTISSA);\\n    return rewards;\\n  }\\n\\n  /* Internal functions  */\\n  function _allocateRewards(uint256 _interestPaymentAmount) internal {\\n    uint256 _totalInterestReceived = totalInterestReceived;\\n    if (_usdcToAtomic(_totalInterestReceived) >= maxInterestDollarsEligible) {\\n      return;\\n    }\\n\\n    address _poolAddress = _msgSender();\\n\\n    // Gross GFI Rewards earned for incoming interest dollars\\n    uint256 newGrossRewards = _calculateNewGrossGFIRewardsForInterestAmount(_interestPaymentAmount);\\n\\n    ITranchedPool pool = ITranchedPool(_poolAddress);\\n    BackerRewardsInfo storage _poolInfo = pools[_poolAddress];\\n\\n    uint256 totalJuniorDepositsAtomic = _usdcToAtomic(pool.totalJuniorDeposits());\\n    // If total junior deposits are 0, or less than 1, allocate no rewards. The latter condition\\n    // is necessary to prevent a perverse, \\\"infinite mint\\\" scenario in which we'd allocate\\n    // an even greater amount of rewards than `newGrossRewards`, due to dividing by less than 1.\\n    // This scenario and its mitigation are analogous to that of\\n    // `StakingRewards.additionalRewardsPerTokenSinceLastUpdate()`.\\n\\n    if (totalJuniorDepositsAtomic < GFI_MANTISSA) {\\n      emit SafetyCheckTriggered();\\n      return;\\n    }\\n\\n    // example: (6708203932437400000000 * 10^18) / (100000*10^18)\\n    _poolInfo.accRewardsPerPrincipalDollar = _poolInfo.accRewardsPerPrincipalDollar.add(\\n      newGrossRewards.mul(GFI_MANTISSA).div(totalJuniorDepositsAtomic)\\n    );\\n\\n    totalInterestReceived = _totalInterestReceived.add(_interestPaymentAmount);\\n  }\\n\\n  function _allocateStakingRewards() internal {\\n    ITranchedPool pool = ITranchedPool(_msgSender());\\n\\n    // only accrue rewards on a full repayment\\n    IV2CreditLine cl = pool.creditLine();\\n    bool wasFullRepayment = cl.lastFullPaymentTime() > 0 &&\\n      cl.lastFullPaymentTime() <= block.timestamp &&\\n      cl.principalOwed() == 0 &&\\n      cl.interestOwed() == 0;\\n    if (wasFullRepayment) {\\n      // in the case of a full repayment, we want to checkpoint rewards and make them claimable\\n      // to backers by publishing\\n      _checkpointPoolStakingRewards(pool, true);\\n    }\\n  }\\n\\n  /**\\n   * @notice Checkpoints staking reward accounting for a given pool.\\n   * @param pool pool to checkpoint\\n   * @param publish if true, the updated rewards values will be immediately available for\\n   *                 backers to withdraw. otherwise, the accounting will be updated but backers\\n   *                 will not be able to withdraw\\n   */\\n  function _checkpointPoolStakingRewards(ITranchedPool pool, bool publish) internal {\\n    IStakingRewards stakingRewards = _getUpdatedStakingRewards();\\n    uint256 newStakingRewardsAccumulator = stakingRewards.accumulatedRewardsPerToken();\\n    StakingRewardsPoolInfo storage poolInfo = poolStakingRewards[pool];\\n\\n    // If for any reason the new accumulator is less than our last one, abort for safety.\\n    if (newStakingRewardsAccumulator < poolInfo.accumulatedRewardsPerTokenAtLastCheckpoint) {\\n      emit SafetyCheckTriggered();\\n      return;\\n    }\\n\\n    // iterate through all of the slices and checkpoint\\n    for (uint256 sliceIndex = 0; sliceIndex < poolInfo.slicesInfo.length; sliceIndex++) {\\n      _checkpointSliceStakingRewards(pool, sliceIndex, publish);\\n    }\\n\\n    _updateStakingRewardsPoolInfoAccumulator(poolInfo, newStakingRewardsAccumulator);\\n  }\\n\\n  /**\\n   * @notice checkpoint the staking rewards accounting for a single tranched pool slice\\n   * @param pool pool that the slice belongs to\\n   * @param sliceIndex index of slice to checkpoint rewards accounting for\\n   * @param publish if true, the updated rewards values will be immediately available for\\n   *                 backers to withdraw. otherwise, the accounting will be updated but backers\\n   *                 will not be able to withdraw\\n   */\\n  function _checkpointSliceStakingRewards(\\n    ITranchedPool pool,\\n    uint256 sliceIndex,\\n    bool publish\\n  ) internal {\\n    StakingRewardsPoolInfo storage poolInfo = poolStakingRewards[pool];\\n    StakingRewardsSliceInfo storage sliceInfo = poolInfo.slicesInfo[sliceIndex];\\n    IStakingRewards stakingRewards = _getUpdatedStakingRewards();\\n    ITranchedPool.TrancheInfo memory juniorTranche = _getJuniorTrancheForTranchedPoolSlice(pool, sliceIndex);\\n    uint256 newStakingRewardsAccumulator = stakingRewards.accumulatedRewardsPerToken();\\n\\n    // If for any reason the new accumulator is less than our last one, abort for safety.\\n    if (newStakingRewardsAccumulator < poolInfo.accumulatedRewardsPerTokenAtLastCheckpoint) {\\n      emit SafetyCheckTriggered();\\n      return;\\n    }\\n    uint256 rewardsAccruedSinceLastCheckpoint = newStakingRewardsAccumulator.sub(\\n      poolInfo.accumulatedRewardsPerTokenAtLastCheckpoint\\n    );\\n\\n    // We pro rate rewards if we're beyond the term date by approximating\\n    // taking the current reward rate and multiplying it by the time\\n    // that we left in the term divided by the time since we last updated\\n    bool shouldProRate = block.timestamp > pool.creditLine().termEndTime();\\n    if (shouldProRate) {\\n      rewardsAccruedSinceLastCheckpoint = _calculateProRatedRewardsForPeriod(\\n        rewardsAccruedSinceLastCheckpoint,\\n        poolInfo.lastUpdateTime,\\n        block.timestamp,\\n        pool.creditLine().termEndTime()\\n      );\\n    }\\n\\n    uint256 newPrincipalDeployed = _getPrincipalDeployedForTranche(juniorTranche);\\n\\n    // the percentage we need to scale the rewards accumualated by\\n    uint256 deployedScalingFactor = _usdcToAtomic(\\n      sliceInfo.principalDeployedAtLastCheckpoint.mul(USDC_MANTISSA).div(juniorTranche.principalDeposited)\\n    );\\n\\n    uint256 scaledRewardsForPeriod = rewardsAccruedSinceLastCheckpoint.mul(deployedScalingFactor).div(FIDU_MANTISSA);\\n\\n    sliceInfo.unrealizedAccumulatedRewardsPerTokenAtLastCheckpoint = sliceInfo\\n      .unrealizedAccumulatedRewardsPerTokenAtLastCheckpoint\\n      .add(scaledRewardsForPeriod);\\n\\n    sliceInfo.principalDeployedAtLastCheckpoint = newPrincipalDeployed;\\n    if (publish) {\\n      sliceInfo.accumulatedRewardsPerTokenAtLastCheckpoint = sliceInfo\\n        .unrealizedAccumulatedRewardsPerTokenAtLastCheckpoint;\\n    }\\n  }\\n\\n  /**\\n   * @notice Updates the staking rewards accounting for for a given tokenId\\n   * @param tokenId token id to checkpoint\\n   */\\n  function _checkpointTokenStakingRewards(uint256 tokenId) internal {\\n    IPoolTokens poolTokens = config.getPoolTokens();\\n    IPoolTokens.TokenInfo memory tokenInfo = poolTokens.getTokenInfo(tokenId);\\n    require(!_isSeniorTrancheToken(tokenInfo), \\\"Ineligible senior tranche token\\\");\\n\\n    ITranchedPool pool = ITranchedPool(tokenInfo.pool);\\n    StakingRewardsPoolInfo memory poolInfo = poolStakingRewards[pool];\\n    uint256 sliceIndex = _juniorTrancheIdToSliceIndex(tokenInfo.tranche);\\n    StakingRewardsSliceInfo memory sliceInfo = poolInfo.slicesInfo[sliceIndex];\\n\\n    uint256 newAccumulatedRewardsPerTokenAtLastWithdraw = _getSliceAccumulatorAtLastCheckpoint(sliceInfo, poolInfo);\\n\\n    // If for any reason the new accumulator is less than our last one, abort for safety.\\n    if (\\n      newAccumulatedRewardsPerTokenAtLastWithdraw <\\n      tokenStakingRewards[tokenId].accumulatedRewardsPerTokenAtLastWithdraw\\n    ) {\\n      emit SafetyCheckTriggered();\\n      return;\\n    }\\n\\n    tokenStakingRewards[tokenId].accumulatedRewardsPerTokenAtLastWithdraw = newAccumulatedRewardsPerTokenAtLastWithdraw;\\n  }\\n\\n  /**\\n   * @notice Calculate the rewards earned for a given interest payment\\n   * @param _interestPaymentAmount interest payment amount times 1e6\\n   */\\n  function _calculateNewGrossGFIRewardsForInterestAmount(uint256 _interestPaymentAmount)\\n    internal\\n    view\\n    returns (uint256)\\n  {\\n    uint256 totalGFISupply = config.getGFI().totalSupply();\\n\\n    // incoming interest payment, times * 1e18 divided by 1e6\\n    uint256 interestPaymentAmount = _usdcToAtomic(_interestPaymentAmount);\\n\\n    // all-time interest payments prior to the incoming amount, times 1e18\\n    uint256 _previousTotalInterestReceived = _usdcToAtomic(totalInterestReceived);\\n    uint256 sqrtOrigTotalInterest = Babylonian.sqrt(_previousTotalInterestReceived);\\n\\n    // sum of new interest payment + previous total interest payments, times 1e18\\n    uint256 newTotalInterest = _usdcToAtomic(\\n      _atomicToUsdc(_previousTotalInterestReceived).add(_atomicToUsdc(interestPaymentAmount))\\n    );\\n\\n    // interest payment passed the maxInterestDollarsEligible cap, should only partially be rewarded\\n    if (newTotalInterest > maxInterestDollarsEligible) {\\n      newTotalInterest = maxInterestDollarsEligible;\\n    }\\n\\n    /*\\n      equation:\\n        (sqrtNewTotalInterest-sqrtOrigTotalInterest)\\n        * totalRewardPercentOfTotalGFI\\n        / sqrtMaxInterestDollarsEligible\\n        / 100\\n        * totalGFISupply\\n        / 10^18\\n\\n      example scenario:\\n      - new payment = 5000*10^18\\n      - original interest received = 0*10^18\\n      - total reward percent = 3 * 10^18\\n      - max interest dollars = 1 * 10^27 ($1 billion)\\n      - totalGfiSupply = 100_000_000 * 10^18\\n\\n      example math:\\n        (70710678118 - 0)\\n        * 3000000000000000000\\n        / 31622776601683\\n        / 100\\n        * 100000000000000000000000000\\n        / 10^18\\n        = 6708203932437400000000 (6,708.2039 GFI)\\n    */\\n    uint256 sqrtDiff = Babylonian.sqrt(newTotalInterest).sub(sqrtOrigTotalInterest);\\n    uint256 sqrtMaxInterestDollarsEligible = Babylonian.sqrt(maxInterestDollarsEligible);\\n\\n    require(sqrtMaxInterestDollarsEligible > 0, \\\"maxInterestDollarsEligible must not be zero\\\");\\n\\n    uint256 newGrossRewards = sqrtDiff\\n      .mul(totalRewardPercentOfTotalGFI)\\n      .div(sqrtMaxInterestDollarsEligible)\\n      .div(100)\\n      .mul(totalGFISupply)\\n      .div(GFI_MANTISSA);\\n\\n    // Extra safety check to make sure the logic is capped at a ceiling of potential rewards\\n    // Calculating the gfi/$ for first dollar of interest to the protocol, and multiplying by new interest amount\\n    uint256 absoluteMaxGfiCheckPerDollar = Babylonian\\n      .sqrt((uint256)(1).mul(GFI_MANTISSA))\\n      .mul(totalRewardPercentOfTotalGFI)\\n      .div(sqrtMaxInterestDollarsEligible)\\n      .div(100)\\n      .mul(totalGFISupply)\\n      .div(GFI_MANTISSA);\\n    require(\\n      newGrossRewards < absoluteMaxGfiCheckPerDollar.mul(newTotalInterest),\\n      \\\"newGrossRewards cannot be greater then the max gfi per dollar\\\"\\n    );\\n\\n    return newGrossRewards;\\n  }\\n\\n  /**\\n   * @return Whether the provided `tokenInfo` is a token corresponding to a senior tranche.\\n   */\\n  function _isSeniorTrancheToken(IPoolTokens.TokenInfo memory tokenInfo) internal pure returns (bool) {\\n    return tokenInfo.tranche.mod(NUM_TRANCHES_PER_SLICE) == 1;\\n  }\\n\\n  /// @notice Returns an amount with the base of usdc (1e6) as an 1e18 number\\n  function _usdcToAtomic(uint256 amount) internal pure returns (uint256) {\\n    return amount.mul(GFI_MANTISSA).div(USDC_MANTISSA);\\n  }\\n\\n  /// @notice Returns an amount with the base 1e18 as a usdc amount (1e6)\\n  function _atomicToUsdc(uint256 amount) internal pure returns (uint256) {\\n    return amount.div(GFI_MANTISSA.div(USDC_MANTISSA));\\n  }\\n\\n  /// @notice Returns the equivalent amount of USDC given an amount of fidu and a share price\\n  /// @param amount amount of FIDU\\n  /// @param sharePrice share price of FIDU\\n  /// @return equivalent amount of USDC\\n  function _fiduToUsdc(uint256 amount, uint256 sharePrice) internal pure returns (uint256) {\\n    return _usdcToAtomic(amount).mul(FIDU_MANTISSA).div(sharePrice);\\n  }\\n\\n  /// @notice Returns the junior tranche id for the given slice index\\n  /// @param index slice index\\n  /// @return junior tranche id of given slice index\\n  function _sliceIndexToJuniorTrancheId(uint256 index) internal pure returns (uint256) {\\n    return index.add(1).mul(2);\\n  }\\n\\n  /// @notice Returns the slice index for the given junior tranche id\\n  /// @param trancheId tranche id\\n  /// @return slice index that the given tranche id belongs to\\n  function _juniorTrancheIdToSliceIndex(uint256 trancheId) internal pure returns (uint256) {\\n    return trancheId.sub(1).div(2);\\n  }\\n\\n  /// @notice get the StakingRewards contract after checkpoint the rewards values\\n  /// @return StakingRewards with updated rewards values\\n  function _getUpdatedStakingRewards() internal returns (IStakingRewards) {\\n    IStakingRewards stakingRewards = IStakingRewards(config.stakingRewardsAddress());\\n    if (stakingRewards.lastUpdateTime() != block.timestamp) {\\n      // This triggers rewards to update\\n      stakingRewards.kick(0);\\n    }\\n    return stakingRewards;\\n  }\\n\\n  /// @notice Returns true if a TranchedPool's rewards parameters have been initialized, otherwise false\\n  /// @param pool pool to check rewards info\\n  function _poolRewardsHaveBeenInitialized(ITranchedPool pool) internal view returns (bool) {\\n    StakingRewardsPoolInfo memory poolInfo = poolStakingRewards[pool];\\n    return _poolStakingRewardsInfoHaveBeenInitialized(poolInfo);\\n  }\\n\\n  /// @notice Returns true if a given pool's staking rewards parameters have been initialized\\n  function _poolStakingRewardsInfoHaveBeenInitialized(StakingRewardsPoolInfo memory poolInfo)\\n    internal\\n    pure\\n    returns (bool)\\n  {\\n    return poolInfo.accumulatedRewardsPerTokenAtLastCheckpoint != 0;\\n  }\\n\\n  /// @notice Returns true if a TranchedPool's slice's rewards parameters have been initialized, otherwise false\\n  function _sliceRewardsHaveBeenInitialized(ITranchedPool pool, uint256 sliceIndex) internal view returns (bool) {\\n    StakingRewardsPoolInfo memory poolInfo = poolStakingRewards[pool];\\n    return\\n      poolInfo.slicesInfo.length > sliceIndex &&\\n      poolInfo.slicesInfo[sliceIndex].unrealizedAccumulatedRewardsPerTokenAtLastCheckpoint != 0;\\n  }\\n\\n  /// @notice Return a slice's rewards accumulator if it has been intialized,\\n  ///           otherwise return the TranchedPool's accumulator\\n  function _getSliceAccumulatorAtLastCheckpoint(\\n    StakingRewardsSliceInfo memory sliceInfo,\\n    StakingRewardsPoolInfo memory poolInfo\\n  ) internal pure returns (uint256) {\\n    require(\\n      poolInfo.accumulatedRewardsPerTokenAtLastCheckpoint != 0,\\n      \\\"unsafe: pool accumulator hasn't been initialized\\\"\\n    );\\n    bool sliceHasNotReceivedAPayment = sliceInfo.accumulatedRewardsPerTokenAtLastCheckpoint == 0;\\n    return\\n      sliceHasNotReceivedAPayment\\n        ? poolInfo.accumulatedRewardsPerTokenAtLastCheckpoint\\n        : sliceInfo.accumulatedRewardsPerTokenAtLastCheckpoint;\\n  }\\n\\n  /// @notice Return a tokenss rewards accumulator if its been initialized, otherwise return the slice's accumulator\\n  function _getTokenAccumulatorAtLastWithdraw(\\n    StakingRewardsTokenInfo memory tokenInfo,\\n    StakingRewardsSliceInfo memory sliceInfo\\n  ) internal pure returns (uint256) {\\n    require(sliceInfo.accumulatedRewardsPerTokenAtDrawdown != 0, \\\"unsafe: slice accumulator hasn't been initialized\\\");\\n    bool hasNotWithdrawn = tokenInfo.accumulatedRewardsPerTokenAtLastWithdraw == 0;\\n    if (hasNotWithdrawn) {\\n      return sliceInfo.accumulatedRewardsPerTokenAtDrawdown;\\n    } else {\\n      require(\\n        tokenInfo.accumulatedRewardsPerTokenAtLastWithdraw >= sliceInfo.accumulatedRewardsPerTokenAtDrawdown,\\n        \\\"Unexpected token accumulator\\\"\\n      );\\n      return tokenInfo.accumulatedRewardsPerTokenAtLastWithdraw;\\n    }\\n  }\\n\\n  /// @notice Returns the junior tranche of a pool given a slice index\\n  /// @param pool pool to retreive tranche from\\n  /// @param sliceIndex slice index\\n  /// @return tranche in specified slice and pool\\n  function _getJuniorTrancheForTranchedPoolSlice(ITranchedPool pool, uint256 sliceIndex)\\n    internal\\n    view\\n    returns (ITranchedPool.TrancheInfo memory)\\n  {\\n    uint256 trancheId = _sliceIndexToJuniorTrancheId(sliceIndex);\\n    return pool.getTranche(trancheId);\\n  }\\n\\n  /// @notice Return the amount of principal currently deployed in a given slice\\n  /// @param tranche tranche to get principal outstanding of\\n  function _getPrincipalDeployedForTranche(ITranchedPool.TrancheInfo memory tranche) internal pure returns (uint256) {\\n    return\\n      tranche.principalDeposited.sub(\\n        _atomicToUsdc(tranche.principalSharePrice.mul(_usdcToAtomic(tranche.principalDeposited)).div(FIDU_MANTISSA))\\n      );\\n  }\\n\\n  /// @notice Return an initialized StakingRewardsSliceInfo with the given parameters\\n  function _initializeStakingRewardsSliceInfo(\\n    uint256 fiduSharePriceAtDrawdown,\\n    uint256 principalDeployedAtDrawdown,\\n    uint256 rewardsAccumulatorAtDrawdown\\n  ) internal pure returns (StakingRewardsSliceInfo memory) {\\n    return\\n      StakingRewardsSliceInfo({\\n        fiduSharePriceAtDrawdown: fiduSharePriceAtDrawdown,\\n        principalDeployedAtLastCheckpoint: principalDeployedAtDrawdown,\\n        accumulatedRewardsPerTokenAtDrawdown: rewardsAccumulatorAtDrawdown,\\n        accumulatedRewardsPerTokenAtLastCheckpoint: rewardsAccumulatorAtDrawdown,\\n        unrealizedAccumulatedRewardsPerTokenAtLastCheckpoint: rewardsAccumulatorAtDrawdown\\n      });\\n  }\\n\\n  /// @notice Returns the amount of rewards accrued from `lastUpdatedTime` to `endTime`\\n  ///           We assume the reward rate was linear during this time\\n  /// @param rewardsAccruedSinceLastCheckpoint rewards accumulated between `lastUpdatedTime` and `currentTime`\\n  /// @param lastUpdatedTime the last timestamp the rewards accumulator was updated\\n  /// @param currentTime the current timestamp\\n  /// @param endTime the end time of the period that is elligible to accrue rewards\\n  /// @return approximate rewards accrued from `lastUpdateTime` to `endTime`\\n  function _calculateProRatedRewardsForPeriod(\\n    uint256 rewardsAccruedSinceLastCheckpoint,\\n    uint256 lastUpdatedTime,\\n    uint256 currentTime,\\n    uint256 endTime\\n  ) internal pure returns (uint256) {\\n    uint256 slopeNumerator = rewardsAccruedSinceLastCheckpoint.mul(FIDU_MANTISSA);\\n    uint256 slopeDivisor = currentTime.sub(lastUpdatedTime);\\n\\n    uint256 slope = slopeNumerator.div(slopeDivisor);\\n    uint256 span = endTime.sub(lastUpdatedTime);\\n    uint256 rewards = slope.mul(span).div(FIDU_MANTISSA);\\n    return rewards;\\n  }\\n\\n  /// @notice update a Pool's staking rewards accumulator\\n  function _updateStakingRewardsPoolInfoAccumulator(\\n    StakingRewardsPoolInfo storage poolInfo,\\n    uint256 newAccumulatorValue\\n  ) internal {\\n    poolInfo.accumulatedRewardsPerTokenAtLastCheckpoint = newAccumulatorValue;\\n    poolInfo.lastUpdateTime = block.timestamp;\\n  }\\n\\n  /* ======== MODIFIERS  ======== */\\n\\n  modifier onlyPool() {\\n    require(config.getPoolTokens().validPool(_msgSender()), \\\"Invalid pool!\\\");\\n    _;\\n  }\\n\\n  /* ======== EVENTS ======== */\\n  event BackerRewardsClaimed(\\n    address indexed owner,\\n    uint256 indexed tokenId,\\n    uint256 amountOfTranchedPoolRewards,\\n    uint256 amountOfSeniorPoolRewards\\n  );\\n  event BackerRewardsSetTotalRewards(address indexed owner, uint256 totalRewards, uint256 totalRewardPercentOfTotalGFI);\\n  event BackerRewardsSetTotalInterestReceived(address indexed owner, uint256 totalInterestReceived);\\n  event BackerRewardsSetMaxInterestDollarsEligible(address indexed owner, uint256 maxInterestDollarsEligible);\\n}\\n\",\"keccak256\":\"0x5bf5677a85275fe509a50c5cf5e5875ea89afe340585e1dad0abfd2f82529273\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x608060405234801561001057600080fd5b506148fc806100206000396000f3fe608060405234801561001057600080fd5b50600436106102125760003560e01c80635f464bb211610120578063a4063dbc116100b8578063d547741f1161007c578063d547741f14610451578063e149ee8014610464578063e58378bb14610477578063e5b791061461047f578063e63ab1e91461049257610212565b8063a4063dbc14610408578063b6db75a01461041b578063b6f8fd4014610423578063ca15c87314610436578063ccf5a9711461044957610212565b80635f464bb21461037c5780636efbe6431461038f57806379502c55146103a25780638456cb59146103b757806387f5769e146103bf5780639010d07c146103c757806391d14854146103da57806392735675146103ed578063a217fddf1461040057610212565b80632e1a7d4d116101ae5780633f4ba83a116101725780633f4ba83a14610331578063440a5aeb146103395780634f64b2be1461034c578063526d81f61461035f5780635c975abb1461036757610212565b80632e1a7d4d146102c45780632f2ff15d146102d757806334cbd458146102ea57806336568abe1461030b578063369dfa841461031e57610212565b8063097616a3146102175780630c9dbe941461022c5780630de749321461024a5780630e15561a1461025d578063242a728614610265578063248a9ca3146102785780632808e69e1461028b5780632879e4de1461029e57806328fc33c7146102b1575b600080fd5b61022a610225366004613d9d565b61049a565b005b6102346105d3565b604051610241919061405b565b60405180910390f35b610234610258366004613ec7565b6105da565b610234610869565b61022a610273366004613ec7565b610870565b610234610286366004613ec7565b6108e5565b610234610299366004613ec7565b6108fa565b61022a6102ac366004613ec7565b610b7f565b61022a6102bf366004613ec7565b610be9565b61022a6102d2366004613ec7565b610cf0565b61022a6102e5366004613edf565b61125b565b6102fd6102f8366004613d9d565b61129f565b60405161024192919061481c565b61022a610319366004613edf565b6112b9565b61023461032c366004613ec7565b6112fb565b61022a61144b565b61022a610347366004613f24565b61148b565b6102fd61035a366004613ec7565b6116c9565b61022a6116e3565b61036f61176e565b6040516102419190614050565b61023461038a366004613ec7565b611777565b61022a61039d366004613e0d565b61178a565b6103aa6119a9565b6040516102419190614023565b61022a6119b9565b6102346119f7565b6103aa6103d5366004613f03565b6119fe565b61036f6103e8366004613edf565b611a1f565b61022a6103fb366004613ec7565b611a37565b610234611b5c565b610234610416366004613d9d565b611b61565b61036f611b74565b61022a610431366004613dd5565b611b95565b610234610444366004613ec7565b611c7b565b610234611c92565b61022a61045f366004613edf565b611c99565b61022a610472366004613ec7565b611cd3565b61023461209c565b61022a61048d366004613e38565b6120ae565b6102346120f9565b600054610100900460ff16806104b357506104b361210b565b806104c1575060005460ff16155b6104e65760405162461bcd60e51b81526004016104dd906145e5565b60405180910390fd5b600054610100900460ff16158015610511576000805460ff1961ff0019909116610100171660011790555b6001600160a01b0382166105375760405162461bcd60e51b81526004016104dd906144bd565b61053f612111565b610547612192565b61054f61221e565b61056760008051602061488783398151915283611295565b61057f6000805160206148a783398151915283611295565b6105a56000805160206148a78339815191526000805160206148878339815191526122ad565b6105bd600080516020614887833981519152806122ad565b80156105cf576000805461ff00191690555b5050565b6101c75481565b60006105e4613d02565b6101c3546105fa906001600160a01b03166122c2565b6001600160a01b0316638c7a63ae846040518263ffffffff1660e01b8152600401610625919061405b565b60a06040518083038186803b15801561063d57600080fd5b505afa158015610651573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906106759190613f5e565b9050610680816122cd565b1561068f576000915050610864565b805160208201516000906106a2906122e9565b90506106ad826122fb565b15806106c057506106be82826123ed565b155b156106d15760009350505050610864565b6106d9613d3a565b6101ca6000846001600160a01b03166001600160a01b03168152602001908152602001600020604051806060016040529081600082015481526020016001820154815260200160028201805480602002602001604051908101604052809291908181526020016000905b828210156107a757838290600052602060002090600502016040518060a00160405290816000820154815260200160018201548152602001600282015481526020016003820154815260200160048201548152505081526020019060010190610743565b505050508152505090506107b9613d5b565b816040015183815181106107c957fe5b602002602001015190506107db613d8a565b5060008781526101cb602090815260408083208151928301909152548152906108048385612507565b905060006108128385612545565b9050600061082083836125af565b905060006108368a6040015187600001516125f1565b90506000610856670de0b6b3a7640000610850848661260c565b90612646565b9b5050505050505050505050505b919050565b6101c45481565b610878611b74565b6108945760405162461bcd60e51b81526004016104dd906146ee565b6101c58190556108a2612688565b6001600160a01b03167fbd23f227ee01d5b74d28337b4aa192bdb10824b0f2ad21e725a2f08af91ec81b826040516108da919061405b565b60405180910390a250565b60009081526065602052604090206002015490565b6101c3546000908190610915906001600160a01b03166122c2565b905061091f613d02565b60405163463d31d760e11b81526001600160a01b03831690638c7a63ae9061094b90879060040161405b565b60a06040518083038186803b15801561096357600080fd5b505afa158015610977573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061099b9190613f5e565b90506109a6816122cd565b156109b657600092505050610864565b805160208201516000906109c9906122e9565b90506109d4826122fb565b15806109e757506109e582826123ed565b155b156109f9576000945050505050610864565b610a01613d3a565b6101ca6000846001600160a01b03166001600160a01b03168152602001908152602001600020604051806060016040529081600082015481526020016001820154815260200160028201805480602002602001604051908101604052809291908181526020016000905b82821015610acf57838290600052602060002090600502016040518060a00160405290816000820154815260200160018201548152602001600282015481526020016003820154815260200160048201548152505081526020019060010190610a6b565b50505050815250509050610ae1613d5b565b81604001518381518110610af157fe5b60200260200101519050610b03613d8a565b5060008881526101cb60209081526040808320815192830182525482528301519091610b2f8385612545565b90506000610b3d82846125af565b90506000610b538a6040015187600001516125f1565b90506000610b6d670de0b6b3a7640000610850848661260c565b9e9d5050505050505050505050505050565b610b87611b74565b610ba35760405162461bcd60e51b81526004016104dd906146ee565b6101c6819055610bb1612688565b6001600160a01b03167feabaa681e9990f0da888d0feb7ec727809a7e832013b120a9a248ba6b16d5f44826040516108da919061405b565b6101c354610bff906001600160a01b03166122c2565b6001600160a01b031663b5ada6d8610c15612688565b6040518263ffffffff1660e01b8152600401610c319190614023565b60206040518083038186803b158015610c4957600080fd5b505afa158015610c5d573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610c819190613ea7565b610c9d5760405162461bcd60e51b81526004016104dd9061434a565b60c95460ff16610cbf5760405162461bcd60e51b81526004016104dd906146b7565b60c9805460ff191690558015610cd857610cd88161268c565b610ce06127c2565b5060c9805460ff19166001179055565b60975460ff1615610d135760405162461bcd60e51b81526004016104dd9061445c565b60c95460ff16610d355760405162461bcd60e51b81526004016104dd906146b7565b60c9805460ff191690556101c354600090610d58906001600160a01b03166122c2565b9050610d62613d02565b60405163463d31d760e11b81526001600160a01b03831690638c7a63ae90610d8e90869060040161405b565b60a06040518083038186803b158015610da657600080fd5b505afa158015610dba573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610dde9190613f5e565b80516101c35491925090610dfa906001600160a01b03166122c2565b6001600160a01b031663b5ada6d8826040518263ffffffff1660e01b8152600401610e259190614023565b60206040518083038186803b158015610e3d57600080fd5b505afa158015610e51573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610e759190613ea7565b610e915760405162461bcd60e51b81526004016104dd9061434a565b6040516331a9108f60e11b81526001600160a01b03841690636352211e90610ebd90879060040161405b565b60206040518083038186803b158015610ed557600080fd5b505afa158015610ee9573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610f0d9190613db9565b6001600160a01b0316336001600160a01b031614610f3d5760405162461bcd60e51b81526004016104dd906144f2565b6000819050806001600160a01b0316635c975abb6040518163ffffffff1660e01b815260040160206040518083038186803b158015610f7b57600080fd5b505afa158015610f8f573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610fb39190613ea7565b15610fd05760405162461bcd60e51b81526004016104dd906145b7565b6000829050806001600160a01b03166347195e136040518163ffffffff1660e01b815260040160206040518083038186803b15801561100e57600080fd5b505afa158015611022573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906110469190613db9565b6001600160a01b03166381c17a156040518163ffffffff1660e01b815260040160206040518083038186803b15801561107e57600080fd5b505afa158015611092573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906110b69190613ea7565b156110d35760405162461bcd60e51b81526004016104dd90614295565b6110dc846122cd565b156110f95760405162461bcd60e51b81526004016104dd90614788565b6000611104876112fb565b90506000611111886105da565b9050600061111f8383612a3b565b60008a81526101c8602052604090205490915061113c8185612a3b565b60008b81526101c86020526040902055821561115b5761115b8a612a60565b6101c3546111f790611175906001600160a01b0316612c9e565b6040516331a9108f60e11b81526001600160a01b038c1690636352211e906111a1908f9060040161405b565b60206040518083038186803b1580156111b957600080fd5b505afa1580156111cd573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906111f19190613db9565b84612ca9565b89611200612688565b6001600160a01b03167ff282434f7158cb3a5501455a72b1946fe84ef5f1e84350beae1f3bf45ffc583e868660405161123a92919061481c565b60405180910390a3505060c9805460ff191660011790555050505050505050565b600082815260656020526040902060020154611279906103e8612688565b6112955760405162461bcd60e51b81526004016104dd90614146565b6105cf8282612ce5565b6101ca602052600090815260409020805460019091015482565b6112c1612688565b6001600160a01b0316816001600160a01b0316146112f15760405162461bcd60e51b81526004016104dd90614739565b6105cf8282612d4e565b6101c3546000908190611316906001600160a01b03166122c2565b9050611320613d02565b60405163463d31d760e11b81526001600160a01b03831690638c7a63ae9061134c90879060040161405b565b60a06040518083038186803b15801561136457600080fd5b505afa158015611378573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061139c9190613f5e565b90506113a7816122cd565b156113b757600092505050610864565b60008481526101c8602090815260408083206001015484516001600160a01b031684526101c99092528220546113ec916125af565b60008681526101c860205260408120549192509061141290670de0b6b3a764000061260c565b9050611441670de0b6b3a76400006108508361143b866114358960400151612db7565b9061260c565b906125af565b9695505050505050565b6114656000805160206148a78339815191526103e8612688565b6114815760405162461bcd60e51b81526004016104dd906142c7565b611489612dd2565b565b611493611b74565b6114af5760405162461bcd60e51b81526004016104dd906146ee565b6101c3546114c5906001600160a01b03166122c2565b6001600160a01b031663b5ada6d8856040518263ffffffff1660e01b81526004016114f09190614023565b60206040518083038186803b15801561150857600080fd5b505afa15801561151c573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906115409190613ea7565b61155c5760405162461bcd60e51b81526004016104dd9061434a565b826115795760405162461bcd60e51b81526004016104dd90614633565b816115965760405162461bcd60e51b81526004016104dd90614633565b806115b35760405162461bcd60e51b81526004016104dd90614633565b6001600160a01b03841660009081526101ca602052604090206002810154600110156115f15760405162461bcd60e51b81526004016104dd9061456a565b60028101548282551515611603613d5b565b61160e868686612e3e565b9050811561166f57808360020160008154811061162757fe5b906000526020600020906005020160008201518160000155602082015181600101556040820151816002015560608201518160030155608082015181600401559050506116c0565b60028084018054600181810183556000928352602092839020855160059093020191825591840151918101919091556040830151918101919091556060820151600382015560808201516004909101555b50505050505050565b6101c8602052600090815260409020805460019091015482565b600054610100900460ff16806116fc57506116fc61210b565b8061170a575060005460ff16155b6117265760405162461bcd60e51b81526004016104dd906145e5565b600054610100900460ff16158015611751576000805460ff1961ff0019909116610100171660011790555b611759612192565b801561176b576000805461ff00191690555b50565b60975460ff1690565b6101cb6020526000908152604090205481565b6101c3546117a0906001600160a01b0316612e71565b6001600160a01b03166117b1612688565b6001600160a01b0316146117d75760405162461bcd60e51b81526004016104dd90614657565b6101c3546117ed906001600160a01b03166122c2565b6001600160a01b031663b5ada6d8836040518263ffffffff1660e01b81526004016118189190614023565b60206040518083038186803b15801561183057600080fd5b505afa158015611844573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906118689190613ea7565b6118845760405162461bcd60e51b81526004016104dd9061434a565b60008181526101c86020526040902060010154156118a1576105cf565b6101c3546000906118ba906001600160a01b03166122c2565b90506118c4613d02565b60405163463d31d760e11b81526001600160a01b03831690638c7a63ae906118f090869060040161405b565b60a06040518083038186803b15801561190857600080fd5b505afa15801561191c573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906119409190613f5e565b905080600001516001600160a01b0316846001600160a01b0316146119775760405162461bcd60e51b81526004016104dd906140f9565b516001600160a01b031660009081526101c960209081526040808320548584526101c890925290912060010155505050565b6101c3546001600160a01b031681565b6119d36000805160206148a78339815191526103e8612688565b6119ef5760405162461bcd60e51b81526004016104dd906142c7565b611489612ef1565b6101c65481565b6000828152606560205260408120611a169083612f4a565b90505b92915050565b6000828152606560205260408120611a169083612f56565b611a3f611b74565b611a5b5760405162461bcd60e51b81526004016104dd906146ee565b6101c48190556101c354600090611a7a906001600160a01b0316612c9e565b6001600160a01b03166318160ddd6040518163ffffffff1660e01b815260040160206040518083038186803b158015611ab257600080fd5b505afa158015611ac6573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611aea919061400b565b9050611b0760646114358361085086670de0b6b3a764000061260c565b6101c755611b13612688565b6001600160a01b03167fa75d65370da375e8498bef76d6c105c80386c2d14e939f1c680da7f9a411c609836101c754604051611b5092919061481c565b60405180910390a25050565b600081565b6101c96020526000908152604090205481565b6000611b906000805160206148878339815191526103e8612688565b905090565b600054610100900460ff1680611bae5750611bae61210b565b80611bbc575060005460ff16155b611bd85760405162461bcd60e51b81526004016104dd906145e5565b600054610100900460ff16158015611c03576000805460ff1961ff0019909116610100171660011790555b6001600160a01b03831615801590611c2357506001600160a01b03821615155b611c3f5760405162461bcd60e51b81526004016104dd906141c3565b611c488361049a565b6101c380546001600160a01b0319166001600160a01b0384161790558015611c76576000805461ff00191690555b505050565b6000818152606560205260408120611a1990612f6b565b6101c55481565b600082815260656020526040902060020154611cb7906103e8612688565b6112f15760405162461bcd60e51b81526004016104dd9061440c565b6101c354611ce9906001600160a01b03166122c2565b6001600160a01b031663b5ada6d8611cff612688565b6040518263ffffffff1660e01b8152600401611d1b9190614023565b60206040518083038186803b158015611d3357600080fd5b505afa158015611d47573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611d6b9190613ea7565b611d875760405162461bcd60e51b81526004016104dd9061434a565b60c95460ff16611da95760405162461bcd60e51b81526004016104dd906146b7565b60c9805460ff191690556000611dbd612688565b90506000611dc9612f76565b6001600160a01b03831660009081526101ca60205260409020909150611ded613d5b565b611df7848661306e565b90506000836001600160a01b031663389621866040518163ffffffff1660e01b815260040160206040518083038186803b158015611e3457600080fd5b505afa158015611e48573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611e6c919061400b565b90506000611f2984604051806060016040529081600082015481526020016001820154815260200160028201805480602002602001604051908101604052809291908181526020016000905b82821015611f1c57838290600052602060002090600502016040518060a00160405290816000820154815260200160018201548152602001600282015481526020016003820154815260200160048201548152505081526020019060010190611eb8565b5050505081525050613100565b1590508015611f3c57611f3c8483613106565b6000611f4887896123ed565b159050801561206f576101c354600090611f6a906001600160a01b0316613111565b90506000611f7786613129565b90506000826001600160a01b031663872697296040518163ffffffff1660e01b815260040160206040518083038186803b158015611fb457600080fd5b505afa158015611fc8573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611fec919061400b565b9050611ff6613d5b565b612001828489612e3e565b6001600160a01b038c1660009081526101ca602090815260408083206002908101805460018181018355918652948490208651600590960201948555928501519284019290925583015190820155606082015160038201556080909101516004909101555061207b92505050565b61207b87896000613168565b6120858584613106565b505060c9805460ff19166001179055505050505050565b60008051602061488783398151915281565b806120cb5760405162461bcd60e51b81526004016104dd90614486565b60005b81811015611c76576120f18383838181106120e557fe5b90506020020135610cf0565b6001016120ce565b6000805160206148a783398151915281565b303b1590565b600054610100900460ff168061212a575061212a61210b565b80612138575060005460ff16155b6121545760405162461bcd60e51b81526004016104dd906145e5565b600054610100900460ff16158015611759576000805460ff1961ff001990911661010017166001179055801561176b576000805461ff001916905550565b600054610100900460ff16806121ab57506121ab61210b565b806121b9575060005460ff16155b6121d55760405162461bcd60e51b81526004016104dd906145e5565b600054610100900460ff16158015612200576000805460ff1961ff0019909116610100171660011790555b6097805460ff19169055801561176b576000805461ff001916905550565b600054610100900460ff1680612237575061223761210b565b80612245575060005460ff16155b6122615760405162461bcd60e51b81526004016104dd906145e5565b600054610100900460ff1615801561228c576000805460ff1961ff0019909116610100171660011790555b60c9805460ff19166001179055801561176b576000805461ff001916905550565b60009182526065602052604090912060020155565b6000611a1982612e71565b60208101516000906122e09060026134e2565b60011492915050565b6000611a1960026108508460016125af565b6000612305613d3a565b6101ca6000846001600160a01b03166001600160a01b03168152602001908152602001600020604051806060016040529081600082015481526020016001820154815260200160028201805480602002602001604051908101604052809291908181526020016000905b828210156123d357838290600052602060002090600502016040518060a0016040529081600082015481526020016001820154815260200160028201548152602001600382015481526020016004820154815250508152602001906001019061236f565b505050508152505090506123e681613100565b9392505050565b60006123f7613d3a565b6101ca6000856001600160a01b03166001600160a01b03168152602001908152602001600020604051806060016040529081600082015481526020016001820154815260200160028201805480602002602001604051908101604052809291908181526020016000905b828210156124c557838290600052602060002090600502016040518060a00160405290816000820154815260200160018201548152602001600282015481526020016003820154815260200160048201548152505081526020019060010190612461565b50505050815250509050828160400151511180156124ff5750806040015183815181106124ee57fe5b602002602001015160800151600014155b949350505050565b80516000906125285760405162461bcd60e51b81526004016104dd90614371565b6060830151158061253d5783606001516124ff565b505051919050565b600081604001516000141561256c5760405162461bcd60e51b81526004016104dd9061420d565b82511580156125815750506040810151611a19565b6040830151845110156125a65760405162461bcd60e51b81526004016104dd90614680565b50508151611a19565b6000611a1683836040518060400160405280601e81526020017f536166654d6174683a207375627472616374696f6e206f766572666c6f77000081525061351f565b6000611a1682610850670de0b6b3a764000061143587612db7565b60008261261b57506000611a19565b8282028284828161262857fe5b0414611a165760405162461bcd60e51b81526004016104dd90614529565b6000611a1683836040518060400160405280601a81526020017f536166654d6174683a206469766973696f6e206279207a65726f00000000000081525061354b565b3390565b6101c6546101c55461269d82612db7565b106126a8575061176b565b60006126b2612688565b905060006126bf84613582565b6001600160a01b03831660008181526101c960209081526040808320815163dd0ec24160e01b815291519596508795909461275493909263dd0ec2419260048083019392829003018186803b15801561271757600080fd5b505afa15801561272b573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061274f919061400b565b612db7565b9050670de0b6b3a76400008110156127885760405160008051602061486783398151915290600090a150505050505061176b565b6127a96127a18261085087670de0b6b3a764000061260c565b835490612a3b565b82556127b58688612a3b565b6101c65550505050505050565b60006127cc612688565b90506000816001600160a01b03166347195e136040518163ffffffff1660e01b815260040160206040518083038186803b15801561280957600080fd5b505afa15801561281d573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906128419190613db9565b9050600080826001600160a01b031663ce78290d6040518163ffffffff1660e01b815260040160206040518083038186803b15801561287f57600080fd5b505afa158015612893573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906128b7919061400b565b118015612934575042826001600160a01b031663ce78290d6040518163ffffffff1660e01b815260040160206040518083038186803b1580156128f957600080fd5b505afa15801561290d573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612931919061400b565b11155b80156129ae5750816001600160a01b031663193501146040518163ffffffff1660e01b815260040160206040518083038186803b15801561297457600080fd5b505afa158015612988573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906129ac919061400b565b155b8015612a285750816001600160a01b03166321856b366040518163ffffffff1660e01b815260040160206040518083038186803b1580156129ee57600080fd5b505afa158015612a02573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612a26919061400b565b155b90508015611c7657611c7683600161375e565b600082820183811015611a165760405162461bcd60e51b81526004016104dd90614313565b6101c354600090612a79906001600160a01b03166122c2565b9050612a83613d02565b60405163463d31d760e11b81526001600160a01b03831690638c7a63ae90612aaf90869060040161405b565b60a06040518083038186803b158015612ac757600080fd5b505afa158015612adb573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612aff9190613f5e565b9050612b0a816122cd565b15612b275760405162461bcd60e51b81526004016104dd90614788565b8051612b31613d3a565b6101ca6000836001600160a01b03166001600160a01b03168152602001908152602001600020604051806060016040529081600082015481526020016001820154815260200160028201805480602002602001604051908101604052809291908181526020016000905b82821015612bff57838290600052602060002090600502016040518060a00160405290816000820154815260200160018201548152602001600282015481526020016003820154815260200160048201548152505081526020019060010190612b9b565b505050508152505090506000612c1884602001516122e9565b9050612c22613d5b565b82604001518281518110612c3257fe5b602002602001015190506000612c488285612507565b60008981526101cb6020526040902054909150811015612c855760405160008051602061486783398151915290600090a15050505050505061176b565b60008881526101cb602052604090205550505050505050565b6000611a1982613856565b611c768383836040518060400160405280601881526020017704661696c656420746f207472616e736665722045524332360441b81525061386e565b6000828152606560205260409020612cfd9082613940565b156105cf57612d0a612688565b6001600160a01b0316816001600160a01b0316837f2f8788117e7eff1d82e926ec794901d17c78024a50270940304540a733656f0d60405160405180910390a45050565b6000828152606560205260409020612d669082613955565b156105cf57612d73612688565b6001600160a01b0316816001600160a01b0316837ff6391f5c32d9c69d2a47ea670b442974b53935d1edc7fd64eb21e047a839171b60405160405180910390a45050565b6000611a19620f424061085084670de0b6b3a764000061260c565b60975460ff16612df45760405162461bcd60e51b81526004016104dd90614195565b6097805460ff191690557f5db9ee0a495bf2e6ff9c91a7834c1ba4fdd244a5e8aa4e537bd38aeae4b073aa612e27612688565b604051612e349190614023565b60405180910390a1565b612e46613d5b565b506040805160a081018252938452602084019290925290820181905260608201819052608082015290565b60006001600160a01b03821663b93f9b0a600c5b6040518263ffffffff1660e01b8152600401612ea1919061405b565b60206040518083038186803b158015612eb957600080fd5b505afa158015612ecd573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611a199190613db9565b60975460ff1615612f145760405162461bcd60e51b81526004016104dd9061445c565b6097805460ff191660011790557f62e78cea01bee320cd4e420270b5ea74000d11b0c9f74754ebdbfc544b05a258612e27612688565b6000611a16838361396a565b6000611a16836001600160a01b0384166139af565b6000611a19826139c7565b6101c3546000908190612f91906001600160a01b03166139cb565b905042816001600160a01b031663c8f33c916040518163ffffffff1660e01b815260040160206040518083038186803b158015612fcd57600080fd5b505afa158015612fe1573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190613005919061400b565b14611b905760405163ce0cf1a560e01b81526001600160a01b0382169063ce0cf1a5906130379060009060040161405b565b600060405180830381600087803b15801561305157600080fd5b505af1158015613065573d6000803e3d6000fd5b50505050905090565b613076613d5b565b6000613081836139e3565b60405163d972e8ad60e01b81529091506001600160a01b0385169063d972e8ad906130b090849060040161405b565b60a06040518083038186803b1580156130c857600080fd5b505afa1580156130dc573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906124ff9190613fba565b51151590565b815542600190910155565b60006001600160a01b03821663b93f9b0a600e612e85565b6000611a1961315d613158670de0b6b3a764000061085061314d8760200151612db7565b60408801519061260c565b6139f5565b6020840151906125af565b6001600160a01b03831660009081526101ca602052604081206002810180549192918590811061319457fe5b9060005260206000209060050201905060006131ae612f76565b90506131b8613d5b565b6131c2878761306e565b90506000826001600160a01b031663389621866040518163ffffffff1660e01b815260040160206040518083038186803b1580156131ff57600080fd5b505afa158015613213573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190613237919061400b565b85549091508110156132645760405160008051602061486783398151915290600090a15050505050611c76565b84546000906132749083906125af565b90506000896001600160a01b03166347195e136040518163ffffffff1660e01b815260040160206040518083038186803b1580156132b157600080fd5b505afa1580156132c5573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906132e99190613db9565b6001600160a01b03166364fb2d956040518163ffffffff1660e01b815260040160206040518083038186803b15801561332157600080fd5b505afa158015613335573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190613359919061400b565b42119050801561345657613453828860010154428d6001600160a01b03166347195e136040518163ffffffff1660e01b815260040160206040518083038186803b1580156133a657600080fd5b505afa1580156133ba573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906133de9190613db9565b6001600160a01b03166364fb2d956040518163ffffffff1660e01b815260040160206040518083038186803b15801561341657600080fd5b505afa15801561342a573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061344e919061400b565b613a16565b91505b600061346185613129565b9050600061348a61274f8760200151610850620f42408c6001015461260c90919063ffffffff16565b905060006134a4670de0b6b3a7640000610850878561260c565b60048a01549091506134b69082612a3b565b60048a0155600189018390558a156134d357600489015460038a01555b50505050505050505050505050565b6000611a16838360405180604001604052806018815260200177536166654d6174683a206d6f64756c6f206279207a65726f60401b815250613a7d565b600081848411156135435760405162461bcd60e51b81526004016104dd9190614064565b505050900390565b6000818361356c5760405162461bcd60e51b81526004016104dd9190614064565b50600083858161357857fe5b0495945050505050565b6101c354600090819061359d906001600160a01b0316612c9e565b6001600160a01b03166318160ddd6040518163ffffffff1660e01b815260040160206040518083038186803b1580156135d557600080fd5b505afa1580156135e9573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061360d919061400b565b9050600061361a84612db7565b9050600061362a6101c654612db7565b9050600061363782613ab1565b9050600061365961274f61364a866139f5565b613653866139f5565b90612a3b565b90506101c55481111561366c57506101c5545b600061367b8361143b84613ab1565b9050600061368b6101c554613ab1565b9050600081116136ad5760405162461bcd60e51b81526004016104dd906143c1565b60006136de670de0b6b3a76400006108508a6114356064610850886108506101c7548c61260c90919063ffffffff16565b90506000613726670de0b6b3a76400006108508b6114356064610850896108506101c754611435613721670de0b6b3a7640000600161260c90919063ffffffff16565b613ab1565b9050613732818661260c565b82106137505760405162461bcd60e51b81526004016104dd906147bf565b509998505050505050505050565b6000613768612f76565b90506000816001600160a01b031663389621866040518163ffffffff1660e01b815260040160206040518083038186803b1580156137a557600080fd5b505afa1580156137b9573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906137dd919061400b565b6001600160a01b03851660009081526101ca602052604090208054919250908210156138225760405160008051602061486783398151915290600090a15050506105cf565b60005b60028201548110156138445761383c868287613168565b600101613825565b5061384f8183613106565b5050505050565b60006001600160a01b03821663b93f9b0a6012612e85565b6001600160a01b0383166138945760405162461bcd60e51b81526004016104dd9061425e565b60405163a9059cbb60e01b81526000906001600160a01b0386169063a9059cbb906138c59087908790600401614037565b602060405180830381600087803b1580156138df57600080fd5b505af11580156138f3573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906139179190613ea7565b905081816139385760405162461bcd60e51b81526004016104dd9190614064565b505050505050565b6000611a16836001600160a01b038416613bf2565b6000611a16836001600160a01b038416613c3c565b8154600090821061398d5760405162461bcd60e51b81526004016104dd906140b7565b82600001828154811061399c57fe5b9060005260206000200154905092915050565b60009081526001919091016020526040902054151590565b5490565b60006001600160a01b03821663b93f9b0a6015612e85565b6000611a196002611435846001612a3b565b6000611a19613a0f670de0b6b3a7640000620f4240612646565b8390612646565b600080613a2b86670de0b6b3a764000061260c565b90506000613a3985876125af565b90506000613a478383612646565b90506000613a5586896125af565b90506000613a6f670de0b6b3a7640000610850858561260c565b9a9950505050505050505050565b60008183613a9e5760405162461bcd60e51b81526004016104dd9190614064565b50828481613aa857fe5b06949350505050565b600081613ac057506000610864565b816001600160801b8210613ad95760809190911c9060401b5b600160401b8210613aef5760409190911c9060201b5b6401000000008210613b065760209190911c9060101b5b620100008210613b1b5760109190911c9060081b5b6101008210613b2f5760089190911c9060041b5b60108210613b425760049190911c9060021b5b60088210613b4e5760011b5b6001818581613b5957fe5b048201901c90506001818581613b6b57fe5b048201901c90506001818581613b7d57fe5b048201901c90506001818581613b8f57fe5b048201901c90506001818581613ba157fe5b048201901c90506001818581613bb357fe5b048201901c90506001818581613bc557fe5b048201901c90506000818581613bd757fe5b049050808210613be75780613be9565b815b95945050505050565b6000613bfe83836139af565b613c3457508154600181810184556000848152602080822090930184905584548482528286019093526040902091909155611a19565b506000611a19565b60008181526001830160205260408120548015613cf85783546000198083019190810190600090879083908110613c6f57fe5b9060005260206000200154905080876000018481548110613c8c57fe5b600091825260208083209091019290925582815260018981019092526040902090840190558654879080613cbc57fe5b60019003818190600052602060002001600090559055866001016000878152602001908152602001600020600090556001945050505050611a19565b6000915050611a19565b6040518060a0016040528060006001600160a01b03168152602001600081526020016000815260200160008152602001600081525090565b60405180606001604052806000815260200160008152602001606081525090565b6040518060a0016040528060008152602001600081526020016000815260200160008152602001600081525090565b6040518060200160405280600081525090565b600060208284031215613dae578081fd5b8135611a1681614851565b600060208284031215613dca578081fd5b8151611a1681614851565b60008060408385031215613de7578081fd5b8235613df281614851565b91506020830135613e0281614851565b809150509250929050565b60008060408385031215613e1f578182fd5b8235613e2a81614851565b946020939093013593505050565b60008060208385031215613e4a578182fd5b823567ffffffffffffffff80821115613e61578384fd5b818501915085601f830112613e74578384fd5b813581811115613e82578485fd5b8660208083028501011115613e95578485fd5b60209290920196919550909350505050565b600060208284031215613eb8578081fd5b81518015158114611a16578182fd5b600060208284031215613ed8578081fd5b5035919050565b60008060408385031215613ef1578182fd5b823591506020830135613e0281614851565b60008060408385031215613f15578182fd5b50508035926020909101359150565b60008060008060808587031215613f39578182fd5b8435613f4481614851565b966020860135965060408601359560600135945092505050565b600060a08284031215613f6f578081fd5b613f7960a061482a565b8251613f8481614851565b80825250602083015160208201526040830151604082015260608301516060820152608083015160808201528091505092915050565b600060a08284031215613fcb578081fd5b613fd560a061482a565b82518152602083015160208201526040830151604082015260608301516060820152608083015160808201528091505092915050565b60006020828403121561401c578081fd5b5051919050565b6001600160a01b0391909116815260200190565b6001600160a01b03929092168252602082015260400190565b901515815260200190565b90815260200190565b6000602080835283518082850152825b8181101561409057858101830151858201604001528201614074565b818111156140a15783604083870101525b50601f01601f1916929092016040019392505050565b60208082526022908201527f456e756d657261626c655365743a20696e646578206f7574206f6620626f756e604082015261647360f01b606082015260800190565b6020808252602d908201527f506f6f6c41646472657373206d75737420657175616c20506f6f6c546f6b656e60408201526c20706f6f6c206164647265737360981b606082015260800190565b6020808252602f908201527f416363657373436f6e74726f6c3a2073656e646572206d75737420626520616e60408201526e0818591b5a5b881d1bc819dc985b9d608a1b606082015260800190565b60208082526014908201527314185d5cd8589b194e881b9bdd081c185d5cd95960621b604082015260600190565b6020808252602a908201527f4f776e657220616e6420636f6e666967206164647265737365732063616e6e6f6040820152697420626520656d70747960b01b606082015260800190565b60208082526031908201527f756e736166653a20736c69636520616363756d756c61746f72206861736e2774604082015270081899595b881a5b9a5d1a585b1a5e9959607a1b606082015260800190565b6020808252601a908201527f43616e27742073656e6420746f207a65726f2061646472657373000000000000604082015260600190565b602080825260189082015277506f6f6c206973206c617465206f6e207061796d656e747360401b604082015260600190565b6020808252602c908201527f4d75737420686176652070617573657220726f6c6520746f20706572666f726d60408201526b103a3434b99030b1ba34b7b760a11b606082015260800190565b6020808252601b908201527f536166654d6174683a206164646974696f6e206f766572666c6f770000000000604082015260600190565b6020808252600d908201526c496e76616c696420706f6f6c2160981b604082015260600190565b60208082526030908201527f756e736166653a20706f6f6c20616363756d756c61746f72206861736e27742060408201526f1899595b881a5b9a5d1a585b1a5e995960821b606082015260800190565b6020808252602b908201527f6d6178496e746572657374446f6c6c617273456c696769626c65206d7573742060408201526a6e6f74206265207a65726f60a81b606082015260800190565b60208082526030908201527f416363657373436f6e74726f6c3a2073656e646572206d75737420626520616e60408201526f2061646d696e20746f207265766f6b6560801b606082015260800190565b60208082526010908201526f14185d5cd8589b194e881c185d5cd95960821b604082015260600190565b6020808252601e908201527f546f6b656e73496473206c656e677468206d757374206e6f7420626520300000604082015260600190565b6020808252818101527f4f776e65722063616e6e6f7420626520746865207a65726f2061646472657373604082015260600190565b6020808252601a908201527f4d757374206265206f776e6572206f6620506f6f6c546f6b656e000000000000604082015260600190565b60208082526021908201527f536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f6040820152607760f81b606082015260800190565b6020808252602d908201527f747279696e6720746f206f7665727772697465206d756c746920736c6963652060408201526c7265776172647320696e666f2160981b606082015260800190565b602080825260149082015273141bdbdb081dda5d1a191c985dc81c185d5cd95960621b604082015260600190565b6020808252602e908201527f436f6e747261637420696e7374616e63652068617320616c726561647920626560408201526d195b881a5b9a5d1a585b1a5e995960921b606082015260800190565b6020808252600a90820152690496e76616c69643a20360b41b604082015260600190565b6020808252600f908201526e496e76616c69642073656e6465722160881b604082015260600190565b6020808252601c908201527f556e657870656374656420746f6b656e20616363756d756c61746f7200000000604082015260600190565b6020808252601f908201527f5265656e7472616e637947756172643a207265656e7472616e742063616c6c00604082015260600190565b6020808252602b908201527f4d75737420686176652061646d696e20726f6c6520746f20706572666f726d2060408201526a3a3434b99030b1ba34b7b760a91b606082015260800190565b6020808252602f908201527f416363657373436f6e74726f6c3a2063616e206f6e6c792072656e6f756e636560408201526e103937b632b9903337b91039b2b63360891b606082015260800190565b6020808252601f908201527f496e656c696769626c652073656e696f72207472616e63686520746f6b656e00604082015260600190565b6020808252603d908201527f6e657747726f7373526577617264732063616e6e6f742062652067726561746560408201527f72207468656e20746865206d6178206766692070657220646f6c6c6172000000606082015260800190565b918252602082015260400190565b60405181810167ffffffffffffffff8111828210171561484957600080fd5b604052919050565b6001600160a01b038116811461176b57600080fdfe75a25907c86842cd8f301fe24ccf300b65e4b0f91b7fe55286a7d0ec33a2490eb19546dff01e856fb3f010c267a7b1c60363cf8a4664e21cc89c26224620214e65d7a28e3265b37a6474929f336521b332c1681b933f6cb9f3376673440d862aa26469706673582212206de78f5b69c5574ff5c0d76674a337088f9a853b7b35063d55f690017137a44364736f6c634300060c0033",
  "deployedBytecode": "0x608060405234801561001057600080fd5b50600436106102125760003560e01c80635f464bb211610120578063a4063dbc116100b8578063d547741f1161007c578063d547741f14610451578063e149ee8014610464578063e58378bb14610477578063e5b791061461047f578063e63ab1e91461049257610212565b8063a4063dbc14610408578063b6db75a01461041b578063b6f8fd4014610423578063ca15c87314610436578063ccf5a9711461044957610212565b80635f464bb21461037c5780636efbe6431461038f57806379502c55146103a25780638456cb59146103b757806387f5769e146103bf5780639010d07c146103c757806391d14854146103da57806392735675146103ed578063a217fddf1461040057610212565b80632e1a7d4d116101ae5780633f4ba83a116101725780633f4ba83a14610331578063440a5aeb146103395780634f64b2be1461034c578063526d81f61461035f5780635c975abb1461036757610212565b80632e1a7d4d146102c45780632f2ff15d146102d757806334cbd458146102ea57806336568abe1461030b578063369dfa841461031e57610212565b8063097616a3146102175780630c9dbe941461022c5780630de749321461024a5780630e15561a1461025d578063242a728614610265578063248a9ca3146102785780632808e69e1461028b5780632879e4de1461029e57806328fc33c7146102b1575b600080fd5b61022a610225366004613d9d565b61049a565b005b6102346105d3565b604051610241919061405b565b60405180910390f35b610234610258366004613ec7565b6105da565b610234610869565b61022a610273366004613ec7565b610870565b610234610286366004613ec7565b6108e5565b610234610299366004613ec7565b6108fa565b61022a6102ac366004613ec7565b610b7f565b61022a6102bf366004613ec7565b610be9565b61022a6102d2366004613ec7565b610cf0565b61022a6102e5366004613edf565b61125b565b6102fd6102f8366004613d9d565b61129f565b60405161024192919061481c565b61022a610319366004613edf565b6112b9565b61023461032c366004613ec7565b6112fb565b61022a61144b565b61022a610347366004613f24565b61148b565b6102fd61035a366004613ec7565b6116c9565b61022a6116e3565b61036f61176e565b6040516102419190614050565b61023461038a366004613ec7565b611777565b61022a61039d366004613e0d565b61178a565b6103aa6119a9565b6040516102419190614023565b61022a6119b9565b6102346119f7565b6103aa6103d5366004613f03565b6119fe565b61036f6103e8366004613edf565b611a1f565b61022a6103fb366004613ec7565b611a37565b610234611b5c565b610234610416366004613d9d565b611b61565b61036f611b74565b61022a610431366004613dd5565b611b95565b610234610444366004613ec7565b611c7b565b610234611c92565b61022a61045f366004613edf565b611c99565b61022a610472366004613ec7565b611cd3565b61023461209c565b61022a61048d366004613e38565b6120ae565b6102346120f9565b600054610100900460ff16806104b357506104b361210b565b806104c1575060005460ff16155b6104e65760405162461bcd60e51b81526004016104dd906145e5565b60405180910390fd5b600054610100900460ff16158015610511576000805460ff1961ff0019909116610100171660011790555b6001600160a01b0382166105375760405162461bcd60e51b81526004016104dd906144bd565b61053f612111565b610547612192565b61054f61221e565b61056760008051602061488783398151915283611295565b61057f6000805160206148a783398151915283611295565b6105a56000805160206148a78339815191526000805160206148878339815191526122ad565b6105bd600080516020614887833981519152806122ad565b80156105cf576000805461ff00191690555b5050565b6101c75481565b60006105e4613d02565b6101c3546105fa906001600160a01b03166122c2565b6001600160a01b0316638c7a63ae846040518263ffffffff1660e01b8152600401610625919061405b565b60a06040518083038186803b15801561063d57600080fd5b505afa158015610651573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906106759190613f5e565b9050610680816122cd565b1561068f576000915050610864565b805160208201516000906106a2906122e9565b90506106ad826122fb565b15806106c057506106be82826123ed565b155b156106d15760009350505050610864565b6106d9613d3a565b6101ca6000846001600160a01b03166001600160a01b03168152602001908152602001600020604051806060016040529081600082015481526020016001820154815260200160028201805480602002602001604051908101604052809291908181526020016000905b828210156107a757838290600052602060002090600502016040518060a00160405290816000820154815260200160018201548152602001600282015481526020016003820154815260200160048201548152505081526020019060010190610743565b505050508152505090506107b9613d5b565b816040015183815181106107c957fe5b602002602001015190506107db613d8a565b5060008781526101cb602090815260408083208151928301909152548152906108048385612507565b905060006108128385612545565b9050600061082083836125af565b905060006108368a6040015187600001516125f1565b90506000610856670de0b6b3a7640000610850848661260c565b90612646565b9b5050505050505050505050505b919050565b6101c45481565b610878611b74565b6108945760405162461bcd60e51b81526004016104dd906146ee565b6101c58190556108a2612688565b6001600160a01b03167fbd23f227ee01d5b74d28337b4aa192bdb10824b0f2ad21e725a2f08af91ec81b826040516108da919061405b565b60405180910390a250565b60009081526065602052604090206002015490565b6101c3546000908190610915906001600160a01b03166122c2565b905061091f613d02565b60405163463d31d760e11b81526001600160a01b03831690638c7a63ae9061094b90879060040161405b565b60a06040518083038186803b15801561096357600080fd5b505afa158015610977573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061099b9190613f5e565b90506109a6816122cd565b156109b657600092505050610864565b805160208201516000906109c9906122e9565b90506109d4826122fb565b15806109e757506109e582826123ed565b155b156109f9576000945050505050610864565b610a01613d3a565b6101ca6000846001600160a01b03166001600160a01b03168152602001908152602001600020604051806060016040529081600082015481526020016001820154815260200160028201805480602002602001604051908101604052809291908181526020016000905b82821015610acf57838290600052602060002090600502016040518060a00160405290816000820154815260200160018201548152602001600282015481526020016003820154815260200160048201548152505081526020019060010190610a6b565b50505050815250509050610ae1613d5b565b81604001518381518110610af157fe5b60200260200101519050610b03613d8a565b5060008881526101cb60209081526040808320815192830182525482528301519091610b2f8385612545565b90506000610b3d82846125af565b90506000610b538a6040015187600001516125f1565b90506000610b6d670de0b6b3a7640000610850848661260c565b9e9d5050505050505050505050505050565b610b87611b74565b610ba35760405162461bcd60e51b81526004016104dd906146ee565b6101c6819055610bb1612688565b6001600160a01b03167feabaa681e9990f0da888d0feb7ec727809a7e832013b120a9a248ba6b16d5f44826040516108da919061405b565b6101c354610bff906001600160a01b03166122c2565b6001600160a01b031663b5ada6d8610c15612688565b6040518263ffffffff1660e01b8152600401610c319190614023565b60206040518083038186803b158015610c4957600080fd5b505afa158015610c5d573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610c819190613ea7565b610c9d5760405162461bcd60e51b81526004016104dd9061434a565b60c95460ff16610cbf5760405162461bcd60e51b81526004016104dd906146b7565b60c9805460ff191690558015610cd857610cd88161268c565b610ce06127c2565b5060c9805460ff19166001179055565b60975460ff1615610d135760405162461bcd60e51b81526004016104dd9061445c565b60c95460ff16610d355760405162461bcd60e51b81526004016104dd906146b7565b60c9805460ff191690556101c354600090610d58906001600160a01b03166122c2565b9050610d62613d02565b60405163463d31d760e11b81526001600160a01b03831690638c7a63ae90610d8e90869060040161405b565b60a06040518083038186803b158015610da657600080fd5b505afa158015610dba573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610dde9190613f5e565b80516101c35491925090610dfa906001600160a01b03166122c2565b6001600160a01b031663b5ada6d8826040518263ffffffff1660e01b8152600401610e259190614023565b60206040518083038186803b158015610e3d57600080fd5b505afa158015610e51573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610e759190613ea7565b610e915760405162461bcd60e51b81526004016104dd9061434a565b6040516331a9108f60e11b81526001600160a01b03841690636352211e90610ebd90879060040161405b565b60206040518083038186803b158015610ed557600080fd5b505afa158015610ee9573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610f0d9190613db9565b6001600160a01b0316336001600160a01b031614610f3d5760405162461bcd60e51b81526004016104dd906144f2565b6000819050806001600160a01b0316635c975abb6040518163ffffffff1660e01b815260040160206040518083038186803b158015610f7b57600080fd5b505afa158015610f8f573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610fb39190613ea7565b15610fd05760405162461bcd60e51b81526004016104dd906145b7565b6000829050806001600160a01b03166347195e136040518163ffffffff1660e01b815260040160206040518083038186803b15801561100e57600080fd5b505afa158015611022573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906110469190613db9565b6001600160a01b03166381c17a156040518163ffffffff1660e01b815260040160206040518083038186803b15801561107e57600080fd5b505afa158015611092573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906110b69190613ea7565b156110d35760405162461bcd60e51b81526004016104dd90614295565b6110dc846122cd565b156110f95760405162461bcd60e51b81526004016104dd90614788565b6000611104876112fb565b90506000611111886105da565b9050600061111f8383612a3b565b60008a81526101c8602052604090205490915061113c8185612a3b565b60008b81526101c86020526040902055821561115b5761115b8a612a60565b6101c3546111f790611175906001600160a01b0316612c9e565b6040516331a9108f60e11b81526001600160a01b038c1690636352211e906111a1908f9060040161405b565b60206040518083038186803b1580156111b957600080fd5b505afa1580156111cd573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906111f19190613db9565b84612ca9565b89611200612688565b6001600160a01b03167ff282434f7158cb3a5501455a72b1946fe84ef5f1e84350beae1f3bf45ffc583e868660405161123a92919061481c565b60405180910390a3505060c9805460ff191660011790555050505050505050565b600082815260656020526040902060020154611279906103e8612688565b6112955760405162461bcd60e51b81526004016104dd90614146565b6105cf8282612ce5565b6101ca602052600090815260409020805460019091015482565b6112c1612688565b6001600160a01b0316816001600160a01b0316146112f15760405162461bcd60e51b81526004016104dd90614739565b6105cf8282612d4e565b6101c3546000908190611316906001600160a01b03166122c2565b9050611320613d02565b60405163463d31d760e11b81526001600160a01b03831690638c7a63ae9061134c90879060040161405b565b60a06040518083038186803b15801561136457600080fd5b505afa158015611378573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061139c9190613f5e565b90506113a7816122cd565b156113b757600092505050610864565b60008481526101c8602090815260408083206001015484516001600160a01b031684526101c99092528220546113ec916125af565b60008681526101c860205260408120549192509061141290670de0b6b3a764000061260c565b9050611441670de0b6b3a76400006108508361143b866114358960400151612db7565b9061260c565b906125af565b9695505050505050565b6114656000805160206148a78339815191526103e8612688565b6114815760405162461bcd60e51b81526004016104dd906142c7565b611489612dd2565b565b611493611b74565b6114af5760405162461bcd60e51b81526004016104dd906146ee565b6101c3546114c5906001600160a01b03166122c2565b6001600160a01b031663b5ada6d8856040518263ffffffff1660e01b81526004016114f09190614023565b60206040518083038186803b15801561150857600080fd5b505afa15801561151c573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906115409190613ea7565b61155c5760405162461bcd60e51b81526004016104dd9061434a565b826115795760405162461bcd60e51b81526004016104dd90614633565b816115965760405162461bcd60e51b81526004016104dd90614633565b806115b35760405162461bcd60e51b81526004016104dd90614633565b6001600160a01b03841660009081526101ca602052604090206002810154600110156115f15760405162461bcd60e51b81526004016104dd9061456a565b60028101548282551515611603613d5b565b61160e868686612e3e565b9050811561166f57808360020160008154811061162757fe5b906000526020600020906005020160008201518160000155602082015181600101556040820151816002015560608201518160030155608082015181600401559050506116c0565b60028084018054600181810183556000928352602092839020855160059093020191825591840151918101919091556040830151918101919091556060820151600382015560808201516004909101555b50505050505050565b6101c8602052600090815260409020805460019091015482565b600054610100900460ff16806116fc57506116fc61210b565b8061170a575060005460ff16155b6117265760405162461bcd60e51b81526004016104dd906145e5565b600054610100900460ff16158015611751576000805460ff1961ff0019909116610100171660011790555b611759612192565b801561176b576000805461ff00191690555b50565b60975460ff1690565b6101cb6020526000908152604090205481565b6101c3546117a0906001600160a01b0316612e71565b6001600160a01b03166117b1612688565b6001600160a01b0316146117d75760405162461bcd60e51b81526004016104dd90614657565b6101c3546117ed906001600160a01b03166122c2565b6001600160a01b031663b5ada6d8836040518263ffffffff1660e01b81526004016118189190614023565b60206040518083038186803b15801561183057600080fd5b505afa158015611844573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906118689190613ea7565b6118845760405162461bcd60e51b81526004016104dd9061434a565b60008181526101c86020526040902060010154156118a1576105cf565b6101c3546000906118ba906001600160a01b03166122c2565b90506118c4613d02565b60405163463d31d760e11b81526001600160a01b03831690638c7a63ae906118f090869060040161405b565b60a06040518083038186803b15801561190857600080fd5b505afa15801561191c573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906119409190613f5e565b905080600001516001600160a01b0316846001600160a01b0316146119775760405162461bcd60e51b81526004016104dd906140f9565b516001600160a01b031660009081526101c960209081526040808320548584526101c890925290912060010155505050565b6101c3546001600160a01b031681565b6119d36000805160206148a78339815191526103e8612688565b6119ef5760405162461bcd60e51b81526004016104dd906142c7565b611489612ef1565b6101c65481565b6000828152606560205260408120611a169083612f4a565b90505b92915050565b6000828152606560205260408120611a169083612f56565b611a3f611b74565b611a5b5760405162461bcd60e51b81526004016104dd906146ee565b6101c48190556101c354600090611a7a906001600160a01b0316612c9e565b6001600160a01b03166318160ddd6040518163ffffffff1660e01b815260040160206040518083038186803b158015611ab257600080fd5b505afa158015611ac6573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611aea919061400b565b9050611b0760646114358361085086670de0b6b3a764000061260c565b6101c755611b13612688565b6001600160a01b03167fa75d65370da375e8498bef76d6c105c80386c2d14e939f1c680da7f9a411c609836101c754604051611b5092919061481c565b60405180910390a25050565b600081565b6101c96020526000908152604090205481565b6000611b906000805160206148878339815191526103e8612688565b905090565b600054610100900460ff1680611bae5750611bae61210b565b80611bbc575060005460ff16155b611bd85760405162461bcd60e51b81526004016104dd906145e5565b600054610100900460ff16158015611c03576000805460ff1961ff0019909116610100171660011790555b6001600160a01b03831615801590611c2357506001600160a01b03821615155b611c3f5760405162461bcd60e51b81526004016104dd906141c3565b611c488361049a565b6101c380546001600160a01b0319166001600160a01b0384161790558015611c76576000805461ff00191690555b505050565b6000818152606560205260408120611a1990612f6b565b6101c55481565b600082815260656020526040902060020154611cb7906103e8612688565b6112f15760405162461bcd60e51b81526004016104dd9061440c565b6101c354611ce9906001600160a01b03166122c2565b6001600160a01b031663b5ada6d8611cff612688565b6040518263ffffffff1660e01b8152600401611d1b9190614023565b60206040518083038186803b158015611d3357600080fd5b505afa158015611d47573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611d6b9190613ea7565b611d875760405162461bcd60e51b81526004016104dd9061434a565b60c95460ff16611da95760405162461bcd60e51b81526004016104dd906146b7565b60c9805460ff191690556000611dbd612688565b90506000611dc9612f76565b6001600160a01b03831660009081526101ca60205260409020909150611ded613d5b565b611df7848661306e565b90506000836001600160a01b031663389621866040518163ffffffff1660e01b815260040160206040518083038186803b158015611e3457600080fd5b505afa158015611e48573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611e6c919061400b565b90506000611f2984604051806060016040529081600082015481526020016001820154815260200160028201805480602002602001604051908101604052809291908181526020016000905b82821015611f1c57838290600052602060002090600502016040518060a00160405290816000820154815260200160018201548152602001600282015481526020016003820154815260200160048201548152505081526020019060010190611eb8565b5050505081525050613100565b1590508015611f3c57611f3c8483613106565b6000611f4887896123ed565b159050801561206f576101c354600090611f6a906001600160a01b0316613111565b90506000611f7786613129565b90506000826001600160a01b031663872697296040518163ffffffff1660e01b815260040160206040518083038186803b158015611fb457600080fd5b505afa158015611fc8573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611fec919061400b565b9050611ff6613d5b565b612001828489612e3e565b6001600160a01b038c1660009081526101ca602090815260408083206002908101805460018181018355918652948490208651600590960201948555928501519284019290925583015190820155606082015160038201556080909101516004909101555061207b92505050565b61207b87896000613168565b6120858584613106565b505060c9805460ff19166001179055505050505050565b60008051602061488783398151915281565b806120cb5760405162461bcd60e51b81526004016104dd90614486565b60005b81811015611c76576120f18383838181106120e557fe5b90506020020135610cf0565b6001016120ce565b6000805160206148a783398151915281565b303b1590565b600054610100900460ff168061212a575061212a61210b565b80612138575060005460ff16155b6121545760405162461bcd60e51b81526004016104dd906145e5565b600054610100900460ff16158015611759576000805460ff1961ff001990911661010017166001179055801561176b576000805461ff001916905550565b600054610100900460ff16806121ab57506121ab61210b565b806121b9575060005460ff16155b6121d55760405162461bcd60e51b81526004016104dd906145e5565b600054610100900460ff16158015612200576000805460ff1961ff0019909116610100171660011790555b6097805460ff19169055801561176b576000805461ff001916905550565b600054610100900460ff1680612237575061223761210b565b80612245575060005460ff16155b6122615760405162461bcd60e51b81526004016104dd906145e5565b600054610100900460ff1615801561228c576000805460ff1961ff0019909116610100171660011790555b60c9805460ff19166001179055801561176b576000805461ff001916905550565b60009182526065602052604090912060020155565b6000611a1982612e71565b60208101516000906122e09060026134e2565b60011492915050565b6000611a1960026108508460016125af565b6000612305613d3a565b6101ca6000846001600160a01b03166001600160a01b03168152602001908152602001600020604051806060016040529081600082015481526020016001820154815260200160028201805480602002602001604051908101604052809291908181526020016000905b828210156123d357838290600052602060002090600502016040518060a0016040529081600082015481526020016001820154815260200160028201548152602001600382015481526020016004820154815250508152602001906001019061236f565b505050508152505090506123e681613100565b9392505050565b60006123f7613d3a565b6101ca6000856001600160a01b03166001600160a01b03168152602001908152602001600020604051806060016040529081600082015481526020016001820154815260200160028201805480602002602001604051908101604052809291908181526020016000905b828210156124c557838290600052602060002090600502016040518060a00160405290816000820154815260200160018201548152602001600282015481526020016003820154815260200160048201548152505081526020019060010190612461565b50505050815250509050828160400151511180156124ff5750806040015183815181106124ee57fe5b602002602001015160800151600014155b949350505050565b80516000906125285760405162461bcd60e51b81526004016104dd90614371565b6060830151158061253d5783606001516124ff565b505051919050565b600081604001516000141561256c5760405162461bcd60e51b81526004016104dd9061420d565b82511580156125815750506040810151611a19565b6040830151845110156125a65760405162461bcd60e51b81526004016104dd90614680565b50508151611a19565b6000611a1683836040518060400160405280601e81526020017f536166654d6174683a207375627472616374696f6e206f766572666c6f77000081525061351f565b6000611a1682610850670de0b6b3a764000061143587612db7565b60008261261b57506000611a19565b8282028284828161262857fe5b0414611a165760405162461bcd60e51b81526004016104dd90614529565b6000611a1683836040518060400160405280601a81526020017f536166654d6174683a206469766973696f6e206279207a65726f00000000000081525061354b565b3390565b6101c6546101c55461269d82612db7565b106126a8575061176b565b60006126b2612688565b905060006126bf84613582565b6001600160a01b03831660008181526101c960209081526040808320815163dd0ec24160e01b815291519596508795909461275493909263dd0ec2419260048083019392829003018186803b15801561271757600080fd5b505afa15801561272b573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061274f919061400b565b612db7565b9050670de0b6b3a76400008110156127885760405160008051602061486783398151915290600090a150505050505061176b565b6127a96127a18261085087670de0b6b3a764000061260c565b835490612a3b565b82556127b58688612a3b565b6101c65550505050505050565b60006127cc612688565b90506000816001600160a01b03166347195e136040518163ffffffff1660e01b815260040160206040518083038186803b15801561280957600080fd5b505afa15801561281d573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906128419190613db9565b9050600080826001600160a01b031663ce78290d6040518163ffffffff1660e01b815260040160206040518083038186803b15801561287f57600080fd5b505afa158015612893573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906128b7919061400b565b118015612934575042826001600160a01b031663ce78290d6040518163ffffffff1660e01b815260040160206040518083038186803b1580156128f957600080fd5b505afa15801561290d573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612931919061400b565b11155b80156129ae5750816001600160a01b031663193501146040518163ffffffff1660e01b815260040160206040518083038186803b15801561297457600080fd5b505afa158015612988573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906129ac919061400b565b155b8015612a285750816001600160a01b03166321856b366040518163ffffffff1660e01b815260040160206040518083038186803b1580156129ee57600080fd5b505afa158015612a02573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612a26919061400b565b155b90508015611c7657611c7683600161375e565b600082820183811015611a165760405162461bcd60e51b81526004016104dd90614313565b6101c354600090612a79906001600160a01b03166122c2565b9050612a83613d02565b60405163463d31d760e11b81526001600160a01b03831690638c7a63ae90612aaf90869060040161405b565b60a06040518083038186803b158015612ac757600080fd5b505afa158015612adb573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612aff9190613f5e565b9050612b0a816122cd565b15612b275760405162461bcd60e51b81526004016104dd90614788565b8051612b31613d3a565b6101ca6000836001600160a01b03166001600160a01b03168152602001908152602001600020604051806060016040529081600082015481526020016001820154815260200160028201805480602002602001604051908101604052809291908181526020016000905b82821015612bff57838290600052602060002090600502016040518060a00160405290816000820154815260200160018201548152602001600282015481526020016003820154815260200160048201548152505081526020019060010190612b9b565b505050508152505090506000612c1884602001516122e9565b9050612c22613d5b565b82604001518281518110612c3257fe5b602002602001015190506000612c488285612507565b60008981526101cb6020526040902054909150811015612c855760405160008051602061486783398151915290600090a15050505050505061176b565b60008881526101cb602052604090205550505050505050565b6000611a1982613856565b611c768383836040518060400160405280601881526020017704661696c656420746f207472616e736665722045524332360441b81525061386e565b6000828152606560205260409020612cfd9082613940565b156105cf57612d0a612688565b6001600160a01b0316816001600160a01b0316837f2f8788117e7eff1d82e926ec794901d17c78024a50270940304540a733656f0d60405160405180910390a45050565b6000828152606560205260409020612d669082613955565b156105cf57612d73612688565b6001600160a01b0316816001600160a01b0316837ff6391f5c32d9c69d2a47ea670b442974b53935d1edc7fd64eb21e047a839171b60405160405180910390a45050565b6000611a19620f424061085084670de0b6b3a764000061260c565b60975460ff16612df45760405162461bcd60e51b81526004016104dd90614195565b6097805460ff191690557f5db9ee0a495bf2e6ff9c91a7834c1ba4fdd244a5e8aa4e537bd38aeae4b073aa612e27612688565b604051612e349190614023565b60405180910390a1565b612e46613d5b565b506040805160a081018252938452602084019290925290820181905260608201819052608082015290565b60006001600160a01b03821663b93f9b0a600c5b6040518263ffffffff1660e01b8152600401612ea1919061405b565b60206040518083038186803b158015612eb957600080fd5b505afa158015612ecd573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611a199190613db9565b60975460ff1615612f145760405162461bcd60e51b81526004016104dd9061445c565b6097805460ff191660011790557f62e78cea01bee320cd4e420270b5ea74000d11b0c9f74754ebdbfc544b05a258612e27612688565b6000611a16838361396a565b6000611a16836001600160a01b0384166139af565b6000611a19826139c7565b6101c3546000908190612f91906001600160a01b03166139cb565b905042816001600160a01b031663c8f33c916040518163ffffffff1660e01b815260040160206040518083038186803b158015612fcd57600080fd5b505afa158015612fe1573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190613005919061400b565b14611b905760405163ce0cf1a560e01b81526001600160a01b0382169063ce0cf1a5906130379060009060040161405b565b600060405180830381600087803b15801561305157600080fd5b505af1158015613065573d6000803e3d6000fd5b50505050905090565b613076613d5b565b6000613081836139e3565b60405163d972e8ad60e01b81529091506001600160a01b0385169063d972e8ad906130b090849060040161405b565b60a06040518083038186803b1580156130c857600080fd5b505afa1580156130dc573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906124ff9190613fba565b51151590565b815542600190910155565b60006001600160a01b03821663b93f9b0a600e612e85565b6000611a1961315d613158670de0b6b3a764000061085061314d8760200151612db7565b60408801519061260c565b6139f5565b6020840151906125af565b6001600160a01b03831660009081526101ca602052604081206002810180549192918590811061319457fe5b9060005260206000209060050201905060006131ae612f76565b90506131b8613d5b565b6131c2878761306e565b90506000826001600160a01b031663389621866040518163ffffffff1660e01b815260040160206040518083038186803b1580156131ff57600080fd5b505afa158015613213573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190613237919061400b565b85549091508110156132645760405160008051602061486783398151915290600090a15050505050611c76565b84546000906132749083906125af565b90506000896001600160a01b03166347195e136040518163ffffffff1660e01b815260040160206040518083038186803b1580156132b157600080fd5b505afa1580156132c5573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906132e99190613db9565b6001600160a01b03166364fb2d956040518163ffffffff1660e01b815260040160206040518083038186803b15801561332157600080fd5b505afa158015613335573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190613359919061400b565b42119050801561345657613453828860010154428d6001600160a01b03166347195e136040518163ffffffff1660e01b815260040160206040518083038186803b1580156133a657600080fd5b505afa1580156133ba573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906133de9190613db9565b6001600160a01b03166364fb2d956040518163ffffffff1660e01b815260040160206040518083038186803b15801561341657600080fd5b505afa15801561342a573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061344e919061400b565b613a16565b91505b600061346185613129565b9050600061348a61274f8760200151610850620f42408c6001015461260c90919063ffffffff16565b905060006134a4670de0b6b3a7640000610850878561260c565b60048a01549091506134b69082612a3b565b60048a0155600189018390558a156134d357600489015460038a01555b50505050505050505050505050565b6000611a16838360405180604001604052806018815260200177536166654d6174683a206d6f64756c6f206279207a65726f60401b815250613a7d565b600081848411156135435760405162461bcd60e51b81526004016104dd9190614064565b505050900390565b6000818361356c5760405162461bcd60e51b81526004016104dd9190614064565b50600083858161357857fe5b0495945050505050565b6101c354600090819061359d906001600160a01b0316612c9e565b6001600160a01b03166318160ddd6040518163ffffffff1660e01b815260040160206040518083038186803b1580156135d557600080fd5b505afa1580156135e9573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061360d919061400b565b9050600061361a84612db7565b9050600061362a6101c654612db7565b9050600061363782613ab1565b9050600061365961274f61364a866139f5565b613653866139f5565b90612a3b565b90506101c55481111561366c57506101c5545b600061367b8361143b84613ab1565b9050600061368b6101c554613ab1565b9050600081116136ad5760405162461bcd60e51b81526004016104dd906143c1565b60006136de670de0b6b3a76400006108508a6114356064610850886108506101c7548c61260c90919063ffffffff16565b90506000613726670de0b6b3a76400006108508b6114356064610850896108506101c754611435613721670de0b6b3a7640000600161260c90919063ffffffff16565b613ab1565b9050613732818661260c565b82106137505760405162461bcd60e51b81526004016104dd906147bf565b509998505050505050505050565b6000613768612f76565b90506000816001600160a01b031663389621866040518163ffffffff1660e01b815260040160206040518083038186803b1580156137a557600080fd5b505afa1580156137b9573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906137dd919061400b565b6001600160a01b03851660009081526101ca602052604090208054919250908210156138225760405160008051602061486783398151915290600090a15050506105cf565b60005b60028201548110156138445761383c868287613168565b600101613825565b5061384f8183613106565b5050505050565b60006001600160a01b03821663b93f9b0a6012612e85565b6001600160a01b0383166138945760405162461bcd60e51b81526004016104dd9061425e565b60405163a9059cbb60e01b81526000906001600160a01b0386169063a9059cbb906138c59087908790600401614037565b602060405180830381600087803b1580156138df57600080fd5b505af11580156138f3573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906139179190613ea7565b905081816139385760405162461bcd60e51b81526004016104dd9190614064565b505050505050565b6000611a16836001600160a01b038416613bf2565b6000611a16836001600160a01b038416613c3c565b8154600090821061398d5760405162461bcd60e51b81526004016104dd906140b7565b82600001828154811061399c57fe5b9060005260206000200154905092915050565b60009081526001919091016020526040902054151590565b5490565b60006001600160a01b03821663b93f9b0a6015612e85565b6000611a196002611435846001612a3b565b6000611a19613a0f670de0b6b3a7640000620f4240612646565b8390612646565b600080613a2b86670de0b6b3a764000061260c565b90506000613a3985876125af565b90506000613a478383612646565b90506000613a5586896125af565b90506000613a6f670de0b6b3a7640000610850858561260c565b9a9950505050505050505050565b60008183613a9e5760405162461bcd60e51b81526004016104dd9190614064565b50828481613aa857fe5b06949350505050565b600081613ac057506000610864565b816001600160801b8210613ad95760809190911c9060401b5b600160401b8210613aef5760409190911c9060201b5b6401000000008210613b065760209190911c9060101b5b620100008210613b1b5760109190911c9060081b5b6101008210613b2f5760089190911c9060041b5b60108210613b425760049190911c9060021b5b60088210613b4e5760011b5b6001818581613b5957fe5b048201901c90506001818581613b6b57fe5b048201901c90506001818581613b7d57fe5b048201901c90506001818581613b8f57fe5b048201901c90506001818581613ba157fe5b048201901c90506001818581613bb357fe5b048201901c90506001818581613bc557fe5b048201901c90506000818581613bd757fe5b049050808210613be75780613be9565b815b95945050505050565b6000613bfe83836139af565b613c3457508154600181810184556000848152602080822090930184905584548482528286019093526040902091909155611a19565b506000611a19565b60008181526001830160205260408120548015613cf85783546000198083019190810190600090879083908110613c6f57fe5b9060005260206000200154905080876000018481548110613c8c57fe5b600091825260208083209091019290925582815260018981019092526040902090840190558654879080613cbc57fe5b60019003818190600052602060002001600090559055866001016000878152602001908152602001600020600090556001945050505050611a19565b6000915050611a19565b6040518060a0016040528060006001600160a01b03168152602001600081526020016000815260200160008152602001600081525090565b60405180606001604052806000815260200160008152602001606081525090565b6040518060a0016040528060008152602001600081526020016000815260200160008152602001600081525090565b6040518060200160405280600081525090565b600060208284031215613dae578081fd5b8135611a1681614851565b600060208284031215613dca578081fd5b8151611a1681614851565b60008060408385031215613de7578081fd5b8235613df281614851565b91506020830135613e0281614851565b809150509250929050565b60008060408385031215613e1f578182fd5b8235613e2a81614851565b946020939093013593505050565b60008060208385031215613e4a578182fd5b823567ffffffffffffffff80821115613e61578384fd5b818501915085601f830112613e74578384fd5b813581811115613e82578485fd5b8660208083028501011115613e95578485fd5b60209290920196919550909350505050565b600060208284031215613eb8578081fd5b81518015158114611a16578182fd5b600060208284031215613ed8578081fd5b5035919050565b60008060408385031215613ef1578182fd5b823591506020830135613e0281614851565b60008060408385031215613f15578182fd5b50508035926020909101359150565b60008060008060808587031215613f39578182fd5b8435613f4481614851565b966020860135965060408601359560600135945092505050565b600060a08284031215613f6f578081fd5b613f7960a061482a565b8251613f8481614851565b80825250602083015160208201526040830151604082015260608301516060820152608083015160808201528091505092915050565b600060a08284031215613fcb578081fd5b613fd560a061482a565b82518152602083015160208201526040830151604082015260608301516060820152608083015160808201528091505092915050565b60006020828403121561401c578081fd5b5051919050565b6001600160a01b0391909116815260200190565b6001600160a01b03929092168252602082015260400190565b901515815260200190565b90815260200190565b6000602080835283518082850152825b8181101561409057858101830151858201604001528201614074565b818111156140a15783604083870101525b50601f01601f1916929092016040019392505050565b60208082526022908201527f456e756d657261626c655365743a20696e646578206f7574206f6620626f756e604082015261647360f01b606082015260800190565b6020808252602d908201527f506f6f6c41646472657373206d75737420657175616c20506f6f6c546f6b656e60408201526c20706f6f6c206164647265737360981b606082015260800190565b6020808252602f908201527f416363657373436f6e74726f6c3a2073656e646572206d75737420626520616e60408201526e0818591b5a5b881d1bc819dc985b9d608a1b606082015260800190565b60208082526014908201527314185d5cd8589b194e881b9bdd081c185d5cd95960621b604082015260600190565b6020808252602a908201527f4f776e657220616e6420636f6e666967206164647265737365732063616e6e6f6040820152697420626520656d70747960b01b606082015260800190565b60208082526031908201527f756e736166653a20736c69636520616363756d756c61746f72206861736e2774604082015270081899595b881a5b9a5d1a585b1a5e9959607a1b606082015260800190565b6020808252601a908201527f43616e27742073656e6420746f207a65726f2061646472657373000000000000604082015260600190565b602080825260189082015277506f6f6c206973206c617465206f6e207061796d656e747360401b604082015260600190565b6020808252602c908201527f4d75737420686176652070617573657220726f6c6520746f20706572666f726d60408201526b103a3434b99030b1ba34b7b760a11b606082015260800190565b6020808252601b908201527f536166654d6174683a206164646974696f6e206f766572666c6f770000000000604082015260600190565b6020808252600d908201526c496e76616c696420706f6f6c2160981b604082015260600190565b60208082526030908201527f756e736166653a20706f6f6c20616363756d756c61746f72206861736e27742060408201526f1899595b881a5b9a5d1a585b1a5e995960821b606082015260800190565b6020808252602b908201527f6d6178496e746572657374446f6c6c617273456c696769626c65206d7573742060408201526a6e6f74206265207a65726f60a81b606082015260800190565b60208082526030908201527f416363657373436f6e74726f6c3a2073656e646572206d75737420626520616e60408201526f2061646d696e20746f207265766f6b6560801b606082015260800190565b60208082526010908201526f14185d5cd8589b194e881c185d5cd95960821b604082015260600190565b6020808252601e908201527f546f6b656e73496473206c656e677468206d757374206e6f7420626520300000604082015260600190565b6020808252818101527f4f776e65722063616e6e6f7420626520746865207a65726f2061646472657373604082015260600190565b6020808252601a908201527f4d757374206265206f776e6572206f6620506f6f6c546f6b656e000000000000604082015260600190565b60208082526021908201527f536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f6040820152607760f81b606082015260800190565b6020808252602d908201527f747279696e6720746f206f7665727772697465206d756c746920736c6963652060408201526c7265776172647320696e666f2160981b606082015260800190565b602080825260149082015273141bdbdb081dda5d1a191c985dc81c185d5cd95960621b604082015260600190565b6020808252602e908201527f436f6e747261637420696e7374616e63652068617320616c726561647920626560408201526d195b881a5b9a5d1a585b1a5e995960921b606082015260800190565b6020808252600a90820152690496e76616c69643a20360b41b604082015260600190565b6020808252600f908201526e496e76616c69642073656e6465722160881b604082015260600190565b6020808252601c908201527f556e657870656374656420746f6b656e20616363756d756c61746f7200000000604082015260600190565b6020808252601f908201527f5265656e7472616e637947756172643a207265656e7472616e742063616c6c00604082015260600190565b6020808252602b908201527f4d75737420686176652061646d696e20726f6c6520746f20706572666f726d2060408201526a3a3434b99030b1ba34b7b760a91b606082015260800190565b6020808252602f908201527f416363657373436f6e74726f6c3a2063616e206f6e6c792072656e6f756e636560408201526e103937b632b9903337b91039b2b63360891b606082015260800190565b6020808252601f908201527f496e656c696769626c652073656e696f72207472616e63686520746f6b656e00604082015260600190565b6020808252603d908201527f6e657747726f7373526577617264732063616e6e6f742062652067726561746560408201527f72207468656e20746865206d6178206766692070657220646f6c6c6172000000606082015260800190565b918252602082015260400190565b60405181810167ffffffffffffffff8111828210171561484957600080fd5b604052919050565b6001600160a01b038116811461176b57600080fdfe75a25907c86842cd8f301fe24ccf300b65e4b0f91b7fe55286a7d0ec33a2490eb19546dff01e856fb3f010c267a7b1c60363cf8a4664e21cc89c26224620214e65d7a28e3265b37a6474929f336521b332c1681b933f6cb9f3376673440d862aa26469706673582212206de78f5b69c5574ff5c0d76674a337088f9a853b7b35063d55f690017137a44364736f6c634300060c0033",
  "devdoc": {
    "kind": "dev",
    "methods": {
      "allocateRewards(uint256)": {
        "params": {
          "_interestPaymentAmount": "The amount of total dollars the interest payment, expects 10^6 value"
        }
      },
      "forceInitializeStakingRewardsPoolInfo(address,uint256,uint256,uint256)": {
        "details": "this is _only_ meant to be called on pools that didnt qualify for the backer rewards airdrop       but were deployed before this contract."
      },
      "getRoleAdmin(bytes32)": {
        "details": "Returns the admin role that controls `role`. See {grantRole} and {revokeRole}. To change a role's admin, use {_setRoleAdmin}."
      },
      "getRoleMember(bytes32,uint256)": {
        "details": "Returns one of the accounts that have `role`. `index` must be a value between 0 and {getRoleMemberCount}, non-inclusive. Role bearers are not sorted in any particular way, and their ordering may change at any point. WARNING: When using {getRoleMember} and {getRoleMemberCount}, make sure you perform all queries on the same block. See the following https://forum.openzeppelin.com/t/iterating-over-elements-on-enumerableset-in-openzeppelin-contracts/2296[forum post] for more information."
      },
      "getRoleMemberCount(bytes32)": {
        "details": "Returns the number of accounts that have `role`. Can be used together with {getRoleMember} to enumerate all bearers of a role."
      },
      "grantRole(bytes32,address)": {
        "details": "Grants `role` to `account`. If `account` had not been already granted `role`, emits a {RoleGranted} event. Requirements: - the caller must have ``role``'s admin role."
      },
      "hasRole(bytes32,address)": {
        "details": "Returns `true` if `account` has been granted `role`."
      },
      "onTranchedPoolDrawdown(uint256)": {
        "details": "initializes rewards info for the calling TranchedPool"
      },
      "pause()": {
        "details": "Pauses all functions guarded by Pause See {Pausable-_pause}. Requirements: - the caller must have the PAUSER_ROLE."
      },
      "paused()": {
        "details": "Returns true if the contract is paused, and false otherwise."
      },
      "poolTokenClaimableRewards(uint256)": {
        "params": {
          "tokenId": "Pool token id"
        },
        "returns": {
          "_0": "The amount of GFI claimable"
        }
      },
      "renounceRole(bytes32,address)": {
        "details": "Revokes `role` from the calling account. Roles are often managed via {grantRole} and {revokeRole}: this function's purpose is to provide a mechanism for accounts to lose their privileges if they are compromised (such as when a trusted device is misplaced). If the calling account had been granted `role`, emits a {RoleRevoked} event. Requirements: - the caller must be `account`."
      },
      "revokeRole(bytes32,address)": {
        "details": "Revokes `role` from `account`. If `account` had been granted `role`, emits a {RoleRevoked} event. Requirements: - the caller must have ``role``'s admin role."
      },
      "setMaxInterestDollarsEligible(uint256)": {
        "params": {
          "_maxInterestDollarsEligible": "The amount of interest dollars eligible for GFI rewards, expects 10^18 value"
        }
      },
      "setPoolTokenAccRewardsPerPrincipalDollarAtMint(address,uint256)": {
        "params": {
          "tokenId": "Pool token id"
        }
      },
      "setTotalInterestReceived(uint256)": {
        "params": {
          "_totalInterestReceived": "The amount of interest the protocol has received to date, expects 10^6 value"
        }
      },
      "setTotalRewards(uint256)": {
        "params": {
          "_totalRewards": "The amount of GFI rewards available, expects 10^18 value"
        }
      },
      "stakingRewardsClaimed(uint256)": {
        "params": {
          "tokenId": "Pool token id"
        },
        "returns": {
          "_0": "The amount of GFI claimed"
        }
      },
      "stakingRewardsEarnedSinceLastWithdraw(uint256)": {
        "params": {
          "tokenId": "token id to get rewards"
        },
        "returns": {
          "_0": "amount of rewards"
        }
      },
      "unpause()": {
        "details": "Unpauses the contract See {Pausable-_unpause}. Requirements: - the caller must have the Pauser role"
      },
      "withdraw(uint256)": {
        "params": {
          "tokenId": "Pool token id"
        }
      },
      "withdrawMultiple(uint256[])": {
        "params": {
          "tokenIds": "Array of pool token id"
        }
      }
    },
    "version": 1
  },
  "userdoc": {
    "events": {
      "SafetyCheckTriggered()": {
        "notice": "Emitted when a safety check fails"
      }
    },
    "kind": "user",
    "methods": {
      "allocateRewards(uint256)": {
        "notice": "Calculates the accRewardsPerPrincipalDollar for a given pool,          when a interest payment is received by the protocol"
      },
      "forceInitializeStakingRewardsPoolInfo(address,uint256,uint256,uint256)": {
        "notice": "intialize the first slice of a StakingRewardsPoolInfo"
      },
      "maxInterestDollarsEligible()": {
        "notice": "interest $ eligible for gfi rewards, times 1e18"
      },
      "onTranchedPoolDrawdown(uint256)": {
        "notice": "callback for TranchedPools when they drawdown"
      },
      "poolStakingRewards(address)": {
        "notice": "Staking rewards info for each pool"
      },
      "poolTokenClaimableRewards(uint256)": {
        "notice": "Calculate the gross available gfi rewards for a PoolToken"
      },
      "pools(address)": {
        "notice": "pool.address -> BackerRewardsInfo"
      },
      "setMaxInterestDollarsEligible(uint256)": {
        "notice": "Set the max dollars across the entire protocol that are eligible for GFI rewards"
      },
      "setPoolTokenAccRewardsPerPrincipalDollarAtMint(address,uint256)": {
        "notice": "When a pool token is minted for multiple drawdowns,  set accRewardsPerPrincipalDollarAtMint to the current accRewardsPerPrincipalDollar price"
      },
      "setTotalInterestReceived(uint256)": {
        "notice": "Set the total interest received to date. This should only be called once on contract deploy."
      },
      "setTotalRewards(uint256)": {
        "notice": "Set the total gfi rewards and the % of total GFI"
      },
      "stakingRewardsClaimed(uint256)": {
        "notice": "Calculates the amount of staking rewards already claimed for a PoolToken. This function is provided for the sake of external (e.g. frontend client) consumption; it is not necessary as an input to the mutative calculations in this contract."
      },
      "stakingRewardsEarnedSinceLastWithdraw(uint256)": {
        "notice": "Returns the amount of staking rewards earned by a given token since the last time its staking rewards were withdrawn."
      },
      "tokenStakingRewards(uint256)": {
        "notice": "Staking rewards info for each pool token"
      },
      "tokens(uint256)": {
        "notice": "poolTokenId -> BackerRewardsTokenInfo"
      },
      "totalInterestReceived()": {
        "notice": "counter of total interest repayments, times 1e6"
      },
      "totalRewardPercentOfTotalGFI()": {
        "notice": "totalRewards/totalGFISupply * 100, times 1e18"
      },
      "totalRewards()": {
        "notice": "total amount of GFI rewards available, times 1e18"
      },
      "withdraw(uint256)": {
        "notice": "PoolToken request to withdraw all allocated rewards"
      },
      "withdrawMultiple(uint256[])": {
        "notice": "PoolToken request to withdraw multiple PoolTokens allocated rewards"
      }
    },
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 151,
        "contract": "contracts/rewards/BackerRewards.sol:BackerRewards",
        "label": "initialized",
        "offset": 0,
        "slot": "0",
        "type": "t_bool"
      },
      {
        "astId": 154,
        "contract": "contracts/rewards/BackerRewards.sol:BackerRewards",
        "label": "initializing",
        "offset": 1,
        "slot": "0",
        "type": "t_bool"
      },
      {
        "astId": 219,
        "contract": "contracts/rewards/BackerRewards.sol:BackerRewards",
        "label": "______gap",
        "offset": 0,
        "slot": "1",
        "type": "t_array(t_uint256)50_storage"
      },
      {
        "astId": 144,
        "contract": "contracts/rewards/BackerRewards.sol:BackerRewards",
        "label": "__gap",
        "offset": 0,
        "slot": "51",
        "type": "t_array(t_uint256)50_storage"
      },
      {
        "astId": 264,
        "contract": "contracts/rewards/BackerRewards.sol:BackerRewards",
        "label": "_roles",
        "offset": 0,
        "slot": "101",
        "type": "t_mapping(t_bytes32,t_struct(RoleData)260_storage)"
      },
      {
        "astId": 509,
        "contract": "contracts/rewards/BackerRewards.sol:BackerRewards",
        "label": "__gap",
        "offset": 0,
        "slot": "102",
        "type": "t_array(t_uint256)49_storage"
      },
      {
        "astId": 4429,
        "contract": "contracts/rewards/BackerRewards.sol:BackerRewards",
        "label": "_paused",
        "offset": 0,
        "slot": "151",
        "type": "t_bool"
      },
      {
        "astId": 4518,
        "contract": "contracts/rewards/BackerRewards.sol:BackerRewards",
        "label": "__gap",
        "offset": 0,
        "slot": "152",
        "type": "t_array(t_uint256)49_storage"
      },
      {
        "astId": 4527,
        "contract": "contracts/rewards/BackerRewards.sol:BackerRewards",
        "label": "_notEntered",
        "offset": 0,
        "slot": "201",
        "type": "t_bool"
      },
      {
        "astId": 4568,
        "contract": "contracts/rewards/BackerRewards.sol:BackerRewards",
        "label": "__gap",
        "offset": 0,
        "slot": "202",
        "type": "t_array(t_uint256)49_storage"
      },
      {
        "astId": 12118,
        "contract": "contracts/rewards/BackerRewards.sol:BackerRewards",
        "label": "__gap1",
        "offset": 0,
        "slot": "251",
        "type": "t_array(t_uint256)50_storage"
      },
      {
        "astId": 12122,
        "contract": "contracts/rewards/BackerRewards.sol:BackerRewards",
        "label": "__gap2",
        "offset": 0,
        "slot": "301",
        "type": "t_array(t_uint256)50_storage"
      },
      {
        "astId": 12126,
        "contract": "contracts/rewards/BackerRewards.sol:BackerRewards",
        "label": "__gap3",
        "offset": 0,
        "slot": "351",
        "type": "t_array(t_uint256)50_storage"
      },
      {
        "astId": 12130,
        "contract": "contracts/rewards/BackerRewards.sol:BackerRewards",
        "label": "__gap4",
        "offset": 0,
        "slot": "401",
        "type": "t_array(t_uint256)50_storage"
      },
      {
        "astId": 29369,
        "contract": "contracts/rewards/BackerRewards.sol:BackerRewards",
        "label": "config",
        "offset": 0,
        "slot": "451",
        "type": "t_contract(GoldfinchConfig)17591"
      },
      {
        "astId": 29426,
        "contract": "contracts/rewards/BackerRewards.sol:BackerRewards",
        "label": "totalRewards",
        "offset": 0,
        "slot": "452",
        "type": "t_uint256"
      },
      {
        "astId": 29429,
        "contract": "contracts/rewards/BackerRewards.sol:BackerRewards",
        "label": "maxInterestDollarsEligible",
        "offset": 0,
        "slot": "453",
        "type": "t_uint256"
      },
      {
        "astId": 29432,
        "contract": "contracts/rewards/BackerRewards.sol:BackerRewards",
        "label": "totalInterestReceived",
        "offset": 0,
        "slot": "454",
        "type": "t_uint256"
      },
      {
        "astId": 29435,
        "contract": "contracts/rewards/BackerRewards.sol:BackerRewards",
        "label": "totalRewardPercentOfTotalGFI",
        "offset": 0,
        "slot": "455",
        "type": "t_uint256"
      },
      {
        "astId": 29440,
        "contract": "contracts/rewards/BackerRewards.sol:BackerRewards",
        "label": "tokens",
        "offset": 0,
        "slot": "456",
        "type": "t_mapping(t_uint256,t_struct(BackerRewardsTokenInfo)29401_storage)"
      },
      {
        "astId": 29445,
        "contract": "contracts/rewards/BackerRewards.sol:BackerRewards",
        "label": "pools",
        "offset": 0,
        "slot": "457",
        "type": "t_mapping(t_address,t_struct(BackerRewardsInfo)29396_storage)"
      },
      {
        "astId": 29450,
        "contract": "contracts/rewards/BackerRewards.sol:BackerRewards",
        "label": "poolStakingRewards",
        "offset": 0,
        "slot": "458",
        "type": "t_mapping(t_contract(ITranchedPool)10674,t_struct(StakingRewardsPoolInfo)29409_storage)"
      },
      {
        "astId": 29455,
        "contract": "contracts/rewards/BackerRewards.sol:BackerRewards",
        "label": "tokenStakingRewards",
        "offset": 0,
        "slot": "459",
        "type": "t_mapping(t_uint256,t_struct(StakingRewardsTokenInfo)29423_storage)"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_array(t_bytes32)dyn_storage": {
        "base": "t_bytes32",
        "encoding": "dynamic_array",
        "label": "bytes32[]",
        "numberOfBytes": "32"
      },
      "t_array(t_struct(StakingRewardsSliceInfo)29420_storage)dyn_storage": {
        "base": "t_struct(StakingRewardsSliceInfo)29420_storage",
        "encoding": "dynamic_array",
        "label": "struct BackerRewards.StakingRewardsSliceInfo[]",
        "numberOfBytes": "32"
      },
      "t_array(t_uint256)49_storage": {
        "base": "t_uint256",
        "encoding": "inplace",
        "label": "uint256[49]",
        "numberOfBytes": "1568"
      },
      "t_array(t_uint256)50_storage": {
        "base": "t_uint256",
        "encoding": "inplace",
        "label": "uint256[50]",
        "numberOfBytes": "1600"
      },
      "t_bool": {
        "encoding": "inplace",
        "label": "bool",
        "numberOfBytes": "1"
      },
      "t_bytes32": {
        "encoding": "inplace",
        "label": "bytes32",
        "numberOfBytes": "32"
      },
      "t_contract(GoldfinchConfig)17591": {
        "encoding": "inplace",
        "label": "contract GoldfinchConfig",
        "numberOfBytes": "20"
      },
      "t_contract(ITranchedPool)10674": {
        "encoding": "inplace",
        "label": "contract ITranchedPool",
        "numberOfBytes": "20"
      },
      "t_mapping(t_address,t_struct(BackerRewardsInfo)29396_storage)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => struct BackerRewards.BackerRewardsInfo)",
        "numberOfBytes": "32",
        "value": "t_struct(BackerRewardsInfo)29396_storage"
      },
      "t_mapping(t_bytes32,t_struct(RoleData)260_storage)": {
        "encoding": "mapping",
        "key": "t_bytes32",
        "label": "mapping(bytes32 => struct AccessControlUpgradeSafe.RoleData)",
        "numberOfBytes": "32",
        "value": "t_struct(RoleData)260_storage"
      },
      "t_mapping(t_bytes32,t_uint256)": {
        "encoding": "mapping",
        "key": "t_bytes32",
        "label": "mapping(bytes32 => uint256)",
        "numberOfBytes": "32",
        "value": "t_uint256"
      },
      "t_mapping(t_contract(ITranchedPool)10674,t_struct(StakingRewardsPoolInfo)29409_storage)": {
        "encoding": "mapping",
        "key": "t_contract(ITranchedPool)10674",
        "label": "mapping(contract ITranchedPool => struct BackerRewards.StakingRewardsPoolInfo)",
        "numberOfBytes": "32",
        "value": "t_struct(StakingRewardsPoolInfo)29409_storage"
      },
      "t_mapping(t_uint256,t_struct(BackerRewardsTokenInfo)29401_storage)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => struct BackerRewards.BackerRewardsTokenInfo)",
        "numberOfBytes": "32",
        "value": "t_struct(BackerRewardsTokenInfo)29401_storage"
      },
      "t_mapping(t_uint256,t_struct(StakingRewardsTokenInfo)29423_storage)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => struct BackerRewards.StakingRewardsTokenInfo)",
        "numberOfBytes": "32",
        "value": "t_struct(StakingRewardsTokenInfo)29423_storage"
      },
      "t_struct(AddressSet)4204_storage": {
        "encoding": "inplace",
        "label": "struct EnumerableSet.AddressSet",
        "members": [
          {
            "astId": 4203,
            "contract": "contracts/rewards/BackerRewards.sol:BackerRewards",
            "label": "_inner",
            "offset": 0,
            "slot": "0",
            "type": "t_struct(Set)4024_storage"
          }
        ],
        "numberOfBytes": "64"
      },
      "t_struct(BackerRewardsInfo)29396_storage": {
        "encoding": "inplace",
        "label": "struct BackerRewards.BackerRewardsInfo",
        "members": [
          {
            "astId": 29395,
            "contract": "contracts/rewards/BackerRewards.sol:BackerRewards",
            "label": "accRewardsPerPrincipalDollar",
            "offset": 0,
            "slot": "0",
            "type": "t_uint256"
          }
        ],
        "numberOfBytes": "32"
      },
      "t_struct(BackerRewardsTokenInfo)29401_storage": {
        "encoding": "inplace",
        "label": "struct BackerRewards.BackerRewardsTokenInfo",
        "members": [
          {
            "astId": 29398,
            "contract": "contracts/rewards/BackerRewards.sol:BackerRewards",
            "label": "rewardsClaimed",
            "offset": 0,
            "slot": "0",
            "type": "t_uint256"
          },
          {
            "astId": 29400,
            "contract": "contracts/rewards/BackerRewards.sol:BackerRewards",
            "label": "accRewardsPerPrincipalDollarAtMint",
            "offset": 0,
            "slot": "1",
            "type": "t_uint256"
          }
        ],
        "numberOfBytes": "64"
      },
      "t_struct(RoleData)260_storage": {
        "encoding": "inplace",
        "label": "struct AccessControlUpgradeSafe.RoleData",
        "members": [
          {
            "astId": 257,
            "contract": "contracts/rewards/BackerRewards.sol:BackerRewards",
            "label": "members",
            "offset": 0,
            "slot": "0",
            "type": "t_struct(AddressSet)4204_storage"
          },
          {
            "astId": 259,
            "contract": "contracts/rewards/BackerRewards.sol:BackerRewards",
            "label": "adminRole",
            "offset": 0,
            "slot": "2",
            "type": "t_bytes32"
          }
        ],
        "numberOfBytes": "96"
      },
      "t_struct(Set)4024_storage": {
        "encoding": "inplace",
        "label": "struct EnumerableSet.Set",
        "members": [
          {
            "astId": 4019,
            "contract": "contracts/rewards/BackerRewards.sol:BackerRewards",
            "label": "_values",
            "offset": 0,
            "slot": "0",
            "type": "t_array(t_bytes32)dyn_storage"
          },
          {
            "astId": 4023,
            "contract": "contracts/rewards/BackerRewards.sol:BackerRewards",
            "label": "_indexes",
            "offset": 0,
            "slot": "1",
            "type": "t_mapping(t_bytes32,t_uint256)"
          }
        ],
        "numberOfBytes": "64"
      },
      "t_struct(StakingRewardsPoolInfo)29409_storage": {
        "encoding": "inplace",
        "label": "struct BackerRewards.StakingRewardsPoolInfo",
        "members": [
          {
            "astId": 29403,
            "contract": "contracts/rewards/BackerRewards.sol:BackerRewards",
            "label": "accumulatedRewardsPerTokenAtLastCheckpoint",
            "offset": 0,
            "slot": "0",
            "type": "t_uint256"
          },
          {
            "astId": 29405,
            "contract": "contracts/rewards/BackerRewards.sol:BackerRewards",
            "label": "lastUpdateTime",
            "offset": 0,
            "slot": "1",
            "type": "t_uint256"
          },
          {
            "astId": 29408,
            "contract": "contracts/rewards/BackerRewards.sol:BackerRewards",
            "label": "slicesInfo",
            "offset": 0,
            "slot": "2",
            "type": "t_array(t_struct(StakingRewardsSliceInfo)29420_storage)dyn_storage"
          }
        ],
        "numberOfBytes": "96"
      },
      "t_struct(StakingRewardsSliceInfo)29420_storage": {
        "encoding": "inplace",
        "label": "struct BackerRewards.StakingRewardsSliceInfo",
        "members": [
          {
            "astId": 29411,
            "contract": "contracts/rewards/BackerRewards.sol:BackerRewards",
            "label": "fiduSharePriceAtDrawdown",
            "offset": 0,
            "slot": "0",
            "type": "t_uint256"
          },
          {
            "astId": 29413,
            "contract": "contracts/rewards/BackerRewards.sol:BackerRewards",
            "label": "principalDeployedAtLastCheckpoint",
            "offset": 0,
            "slot": "1",
            "type": "t_uint256"
          },
          {
            "astId": 29415,
            "contract": "contracts/rewards/BackerRewards.sol:BackerRewards",
            "label": "accumulatedRewardsPerTokenAtDrawdown",
            "offset": 0,
            "slot": "2",
            "type": "t_uint256"
          },
          {
            "astId": 29417,
            "contract": "contracts/rewards/BackerRewards.sol:BackerRewards",
            "label": "accumulatedRewardsPerTokenAtLastCheckpoint",
            "offset": 0,
            "slot": "3",
            "type": "t_uint256"
          },
          {
            "astId": 29419,
            "contract": "contracts/rewards/BackerRewards.sol:BackerRewards",
            "label": "unrealizedAccumulatedRewardsPerTokenAtLastCheckpoint",
            "offset": 0,
            "slot": "4",
            "type": "t_uint256"
          }
        ],
        "numberOfBytes": "160"
      },
      "t_struct(StakingRewardsTokenInfo)29423_storage": {
        "encoding": "inplace",
        "label": "struct BackerRewards.StakingRewardsTokenInfo",
        "members": [
          {
            "astId": 29422,
            "contract": "contracts/rewards/BackerRewards.sol:BackerRewards",
            "label": "accumulatedRewardsPerTokenAtLastWithdraw",
            "offset": 0,
            "slot": "0",
            "type": "t_uint256"
          }
        ],
        "numberOfBytes": "32"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      }
    }
  }
}