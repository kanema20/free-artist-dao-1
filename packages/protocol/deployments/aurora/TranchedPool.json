{
  "address": "0x034F9C34a9bBfE33bb8fDd5aFb62CEC999404813",
  "abi": [
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "contract IV2CreditLine",
          "name": "oldCreditLine",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "contract IV2CreditLine",
          "name": "newCreditLine",
          "type": "address"
        }
      ],
      "name": "CreditLineMigrated",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "owner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "tranche",
          "type": "uint256"
        },
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "DepositMade",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "borrower",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "DrawdownMade",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "pool",
          "type": "address"
        }
      ],
      "name": "DrawdownsPaused",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "pool",
          "type": "address"
        }
      ],
      "name": "DrawdownsUnpaused",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "pool",
          "type": "address"
        }
      ],
      "name": "EmergencyShutdown",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "Paused",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "payer",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "pool",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "interestAmount",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "principalAmount",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "remainingAmount",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "reserveAmount",
          "type": "uint256"
        }
      ],
      "name": "PaymentApplied",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "from",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "ReserveFundsCollected",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "account",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "sender",
          "type": "address"
        }
      ],
      "name": "RoleGranted",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "account",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "sender",
          "type": "address"
        }
      ],
      "name": "RoleRevoked",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "pool",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "tranche",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "principalSharePrice",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "int256",
          "name": "principalDelta",
          "type": "int256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "interestSharePrice",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "int256",
          "name": "interestDelta",
          "type": "int256"
        }
      ],
      "name": "SharePriceUpdated",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "pool",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "sliceId",
          "type": "uint256"
        }
      ],
      "name": "SliceCreated",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "pool",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "trancheId",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "lockedUntil",
          "type": "uint256"
        }
      ],
      "name": "TrancheLocked",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "pool",
          "type": "address"
        }
      ],
      "name": "TranchedPoolAssessed",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "Unpaused",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "owner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "tranche",
          "type": "uint256"
        },
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "interestWithdrawn",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "principalWithdrawn",
          "type": "uint256"
        }
      ],
      "name": "WithdrawalMade",
      "type": "event"
    },
    {
      "inputs": [],
      "name": "DEFAULT_ADMIN_ROLE",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "LOCKER_ROLE",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "NUM_TRANCHES_PER_SLICE",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "pure",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "OWNER_ROLE",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "PAUSER_ROLE",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "SENIOR_ROLE",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "owner",
          "type": "address"
        }
      ],
      "name": "__BaseUpgradeablePausable__init",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "__PauserPausable__init",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "allowedUIDTypes",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "assess",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "availableToWithdraw",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "config",
      "outputs": [
        {
          "internalType": "contract GoldfinchConfig",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "createdAt",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "creditLine",
      "outputs": [
        {
          "internalType": "contract IV2CreditLine",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "tranche",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "deposit",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "tranche",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "deadline",
          "type": "uint256"
        },
        {
          "internalType": "uint8",
          "name": "v",
          "type": "uint8"
        },
        {
          "internalType": "bytes32",
          "name": "r",
          "type": "bytes32"
        },
        {
          "internalType": "bytes32",
          "name": "s",
          "type": "bytes32"
        }
      ],
      "name": "depositWithPermit",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "drawdown",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "drawdownsPaused",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "emergencyShutdown",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "fundableAt",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getAllowedUIDTypes",
      "outputs": [
        {
          "internalType": "uint256[]",
          "name": "",
          "type": "uint256[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        }
      ],
      "name": "getRoleAdmin",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "internalType": "uint256",
          "name": "index",
          "type": "uint256"
        }
      ],
      "name": "getRoleMember",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        }
      ],
      "name": "getRoleMemberCount",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "tranche",
          "type": "uint256"
        }
      ],
      "name": "getTranche",
      "outputs": [
        {
          "components": [
            {
              "internalType": "uint256",
              "name": "id",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "principalDeposited",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "principalSharePrice",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "interestSharePrice",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "lockedUntil",
              "type": "uint256"
            }
          ],
          "internalType": "struct ITranchedPool.TrancheInfo",
          "name": "",
          "type": "tuple"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getVersion",
      "outputs": [
        {
          "internalType": "uint8[3]",
          "name": "version",
          "type": "uint8[3]"
        }
      ],
      "stateMutability": "pure",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "grantRole",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "sender",
          "type": "address"
        }
      ],
      "name": "hasAllowedUID",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "hasRole",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_config",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_borrower",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_juniorFeePercent",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_limit",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_interestApr",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_paymentPeriodInDays",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_termInDays",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_lateFeeApr",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_principalGracePeriodInDays",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_fundableAt",
          "type": "uint256"
        },
        {
          "internalType": "uint256[]",
          "name": "_allowedUIDTypes",
          "type": "uint256[]"
        }
      ],
      "name": "initialize",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_fundableAt",
          "type": "uint256"
        }
      ],
      "name": "initializeNextSlice",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "isAdmin",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "juniorFeePercent",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "lockJuniorCapital",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "lockPool",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_borrower",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_maxLimit",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_interestApr",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_paymentPeriodInDays",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_termInDays",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_lateFeeApr",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_principalGracePeriodInDays",
          "type": "uint256"
        }
      ],
      "name": "migrateCreditLine",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "numSlices",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "pause",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "pauseDrawdowns",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "paused",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "pay",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "index",
          "type": "uint256"
        }
      ],
      "name": "poolSlices",
      "outputs": [
        {
          "components": [
            {
              "components": [
                {
                  "internalType": "uint256",
                  "name": "id",
                  "type": "uint256"
                },
                {
                  "internalType": "uint256",
                  "name": "principalDeposited",
                  "type": "uint256"
                },
                {
                  "internalType": "uint256",
                  "name": "principalSharePrice",
                  "type": "uint256"
                },
                {
                  "internalType": "uint256",
                  "name": "interestSharePrice",
                  "type": "uint256"
                },
                {
                  "internalType": "uint256",
                  "name": "lockedUntil",
                  "type": "uint256"
                }
              ],
              "internalType": "struct ITranchedPool.TrancheInfo",
              "name": "seniorTranche",
              "type": "tuple"
            },
            {
              "components": [
                {
                  "internalType": "uint256",
                  "name": "id",
                  "type": "uint256"
                },
                {
                  "internalType": "uint256",
                  "name": "principalDeposited",
                  "type": "uint256"
                },
                {
                  "internalType": "uint256",
                  "name": "principalSharePrice",
                  "type": "uint256"
                },
                {
                  "internalType": "uint256",
                  "name": "interestSharePrice",
                  "type": "uint256"
                },
                {
                  "internalType": "uint256",
                  "name": "lockedUntil",
                  "type": "uint256"
                }
              ],
              "internalType": "struct ITranchedPool.TrancheInfo",
              "name": "juniorTranche",
              "type": "tuple"
            },
            {
              "internalType": "uint256",
              "name": "totalInterestAccrued",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "principalDeployed",
              "type": "uint256"
            }
          ],
          "internalType": "struct ITranchedPool.PoolSlice",
          "name": "",
          "type": "tuple"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "renounceRole",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "revokeRole",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256[]",
          "name": "ids",
          "type": "uint256[]"
        }
      ],
      "name": "setAllowedUIDTypes",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "newFundableAt",
          "type": "uint256"
        }
      ],
      "name": "setFundableAt",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "newAmount",
          "type": "uint256"
        }
      ],
      "name": "setLimit",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "newAmount",
          "type": "uint256"
        }
      ],
      "name": "setMaxLimit",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "totalDeployed",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "totalJuniorDeposits",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "unpause",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "unpauseDrawdowns",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "withdraw",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "withdrawMax",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "interestWithdrawn",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "principalWithdrawn",
          "type": "uint256"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256[]",
          "name": "tokenIds",
          "type": "uint256[]"
        },
        {
          "internalType": "uint256[]",
          "name": "amounts",
          "type": "uint256[]"
        }
      ],
      "name": "withdrawMultiple",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    }
  ],
  "transactionHash": "0xdb3a4a4e34593b4af583ca25aafb9c040bbf13eb6db8922c8739c584e9080776",
  "receipt": {
    "to": null,
    "from": "0x108Cc3833CD49333A7908e4bB52f4CF8f4090425",
    "contractAddress": "0x034F9C34a9bBfE33bb8fDd5aFb62CEC999404813",
    "transactionIndex": 0,
    "gasUsed": "4803407",
    "logsBloom": "0x
    "blockHash": "0x2bf2803364879ccfab6789e6bd07690d70dd866af133b8c24ac003389f827464",
    "transactionHash": "0xdb3a4a4e34593b4af583ca25aafb9c040bbf13eb6db8922c8739c584e9080776",
    "logs": [],
    "blockNumber": 103147858,
    "cumulativeGasUsed": "0",
    "status": 1,
    "byzantium": true
  },
  "args": [],
  "solcInputHash": "bf6f46dcbe6f600dbdc728698b461228",
  "metadata": "{\"compiler\":{\"version\":\"0.6.12+commit.27d51765\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"contract IV2CreditLine\",\"name\":\"oldCreditLine\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"contract IV2CreditLine\",\"name\":\"newCreditLine\",\"type\":\"address\"}],\"name\":\"CreditLineMigrated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"tranche\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"DepositMade\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"borrower\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"DrawdownMade\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"pool\",\"type\":\"address\"}],\"name\":\"DrawdownsPaused\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"pool\",\"type\":\"address\"}],\"name\":\"DrawdownsUnpaused\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"pool\",\"type\":\"address\"}],\"name\":\"EmergencyShutdown\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"Paused\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"payer\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"pool\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"interestAmount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"principalAmount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"remainingAmount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"reserveAmount\",\"type\":\"uint256\"}],\"name\":\"PaymentApplied\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"ReserveFundsCollected\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"}],\"name\":\"RoleGranted\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"}],\"name\":\"RoleRevoked\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"pool\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"tranche\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"principalSharePrice\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"int256\",\"name\":\"principalDelta\",\"type\":\"int256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"interestSharePrice\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"int256\",\"name\":\"interestDelta\",\"type\":\"int256\"}],\"name\":\"SharePriceUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"pool\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"sliceId\",\"type\":\"uint256\"}],\"name\":\"SliceCreated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"pool\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"trancheId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"lockedUntil\",\"type\":\"uint256\"}],\"name\":\"TrancheLocked\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"pool\",\"type\":\"address\"}],\"name\":\"TranchedPoolAssessed\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"Unpaused\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"tranche\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"interestWithdrawn\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"principalWithdrawn\",\"type\":\"uint256\"}],\"name\":\"WithdrawalMade\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"DEFAULT_ADMIN_ROLE\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"LOCKER_ROLE\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"NUM_TRANCHES_PER_SLICE\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"OWNER_ROLE\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"PAUSER_ROLE\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"SENIOR_ROLE\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"__BaseUpgradeablePausable__init\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"__PauserPausable__init\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"allowedUIDTypes\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"assess\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"availableToWithdraw\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"config\",\"outputs\":[{\"internalType\":\"contract GoldfinchConfig\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"createdAt\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"creditLine\",\"outputs\":[{\"internalType\":\"contract IV2CreditLine\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tranche\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"deposit\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tranche\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"deadline\",\"type\":\"uint256\"},{\"internalType\":\"uint8\",\"name\":\"v\",\"type\":\"uint8\"},{\"internalType\":\"bytes32\",\"name\":\"r\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"s\",\"type\":\"bytes32\"}],\"name\":\"depositWithPermit\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"drawdown\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"drawdownsPaused\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"emergencyShutdown\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"fundableAt\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getAllowedUIDTypes\",\"outputs\":[{\"internalType\":\"uint256[]\",\"name\":\"\",\"type\":\"uint256[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"}],\"name\":\"getRoleAdmin\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"uint256\",\"name\":\"index\",\"type\":\"uint256\"}],\"name\":\"getRoleMember\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"}],\"name\":\"getRoleMemberCount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tranche\",\"type\":\"uint256\"}],\"name\":\"getTranche\",\"outputs\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"principalDeposited\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"principalSharePrice\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"interestSharePrice\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"lockedUntil\",\"type\":\"uint256\"}],\"internalType\":\"struct ITranchedPool.TrancheInfo\",\"name\":\"\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getVersion\",\"outputs\":[{\"internalType\":\"uint8[3]\",\"name\":\"version\",\"type\":\"uint8[3]\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"grantRole\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"}],\"name\":\"hasAllowedUID\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"hasRole\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_config\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_borrower\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_juniorFeePercent\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_limit\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_interestApr\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_paymentPeriodInDays\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_termInDays\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_lateFeeApr\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_principalGracePeriodInDays\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_fundableAt\",\"type\":\"uint256\"},{\"internalType\":\"uint256[]\",\"name\":\"_allowedUIDTypes\",\"type\":\"uint256[]\"}],\"name\":\"initialize\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_fundableAt\",\"type\":\"uint256\"}],\"name\":\"initializeNextSlice\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"isAdmin\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"juniorFeePercent\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"lockJuniorCapital\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"lockPool\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_borrower\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_maxLimit\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_interestApr\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_paymentPeriodInDays\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_termInDays\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_lateFeeApr\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_principalGracePeriodInDays\",\"type\":\"uint256\"}],\"name\":\"migrateCreditLine\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"numSlices\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"pause\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"pauseDrawdowns\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"paused\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"pay\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"index\",\"type\":\"uint256\"}],\"name\":\"poolSlices\",\"outputs\":[{\"components\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"principalDeposited\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"principalSharePrice\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"interestSharePrice\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"lockedUntil\",\"type\":\"uint256\"}],\"internalType\":\"struct ITranchedPool.TrancheInfo\",\"name\":\"seniorTranche\",\"type\":\"tuple\"},{\"components\":[{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"principalDeposited\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"principalSharePrice\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"interestSharePrice\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"lockedUntil\",\"type\":\"uint256\"}],\"internalType\":\"struct ITranchedPool.TrancheInfo\",\"name\":\"juniorTranche\",\"type\":\"tuple\"},{\"internalType\":\"uint256\",\"name\":\"totalInterestAccrued\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"principalDeployed\",\"type\":\"uint256\"}],\"internalType\":\"struct ITranchedPool.PoolSlice\",\"name\":\"\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"renounceRole\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"revokeRole\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256[]\",\"name\":\"ids\",\"type\":\"uint256[]\"}],\"name\":\"setAllowedUIDTypes\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"newFundableAt\",\"type\":\"uint256\"}],\"name\":\"setFundableAt\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"newAmount\",\"type\":\"uint256\"}],\"name\":\"setLimit\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"newAmount\",\"type\":\"uint256\"}],\"name\":\"setMaxLimit\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalDeployed\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalJuniorDeposits\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"unpause\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"unpauseDrawdowns\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"withdraw\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"withdrawMax\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"interestWithdrawn\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"principalWithdrawn\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256[]\",\"name\":\"tokenIds\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256[]\",\"name\":\"amounts\",\"type\":\"uint256[]\"}],\"name\":\"withdrawMultiple\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"availableToWithdraw(uint256)\":{\"params\":{\"tokenId\":\"The token representing the position\"},\"returns\":{\"_0\":\"interestRedeemable The interest available to redeem\",\"_1\":\"principalRedeemable The principal available to redeem\"}},\"deposit(uint256,uint256)\":{\"params\":{\"amount\":\"The USDC amount to tranfer from the caller to the pool\",\"tranche\":\"The number representing the tranche to deposit into\"},\"returns\":{\"_0\":\"tokenId The tokenId of the NFT\"}},\"drawdown(uint256)\":{\"params\":{\"amount\":\"The amount to drawdown from the creditline (must be < limit)\"}},\"getRoleAdmin(bytes32)\":{\"details\":\"Returns the admin role that controls `role`. See {grantRole} and {revokeRole}. To change a role's admin, use {_setRoleAdmin}.\"},\"getRoleMember(bytes32,uint256)\":{\"details\":\"Returns one of the accounts that have `role`. `index` must be a value between 0 and {getRoleMemberCount}, non-inclusive. Role bearers are not sorted in any particular way, and their ordering may change at any point. WARNING: When using {getRoleMember} and {getRoleMemberCount}, make sure you perform all queries on the same block. See the following https://forum.openzeppelin.com/t/iterating-over-elements-on-enumerableset-in-openzeppelin-contracts/2296[forum post] for more information.\"},\"getRoleMemberCount(bytes32)\":{\"details\":\"Returns the number of accounts that have `role`. Can be used together with {getRoleMember} to enumerate all bearers of a role.\"},\"grantRole(bytes32,address)\":{\"details\":\"Grants `role` to `account`. If `account` had not been already granted `role`, emits a {RoleGranted} event. Requirements: - the caller must have ``role``'s admin role.\"},\"hasRole(bytes32,address)\":{\"details\":\"Returns `true` if `account` has been granted `role`.\"},\"migrateCreditLine(address,uint256,uint256,uint256,uint256,uint256,uint256)\":{\"params\":{\"_borrower\":\"The borrower address\",\"_interestApr\":\"The new interest APR\",\"_lateFeeApr\":\"The new late fee APR\",\"_maxLimit\":\"The new max limit\",\"_paymentPeriodInDays\":\"The new payment period in days\",\"_termInDays\":\"The new term in days\"}},\"pause()\":{\"details\":\"Pauses all functions guarded by Pause See {Pausable-_pause}. Requirements: - the caller must have the PAUSER_ROLE.\"},\"paused()\":{\"details\":\"Returns true if the contract is paused, and false otherwise.\"},\"pay(uint256)\":{\"params\":{\"amount\":\"The amount to repay\"}},\"renounceRole(bytes32,address)\":{\"details\":\"Revokes `role` from the calling account. Roles are often managed via {grantRole} and {revokeRole}: this function's purpose is to provide a mechanism for accounts to lose their privileges if they are compromised (such as when a trusted device is misplaced). If the calling account had been granted `role`, emits a {RoleRevoked} event. Requirements: - the caller must be `account`.\"},\"revokeRole(bytes32,address)\":{\"details\":\"Revokes `role` from `account`. If `account` had been granted `role`, emits a {RoleRevoked} event. Requirements: - the caller must have ``role``'s admin role.\"},\"totalJuniorDeposits()\":{\"returns\":{\"_0\":\"The total USDC amount deposited into all junior tranches\"}},\"unpause()\":{\"details\":\"Unpauses the contract See {Pausable-_unpause}. Requirements: - the caller must have the Pauser role\"},\"withdraw(uint256,uint256)\":{\"params\":{\"amount\":\"The amount to withdraw (must be <= interest+principal currently available to withdraw)\",\"tokenId\":\"The NFT representing the position\"},\"returns\":{\"_0\":\"interestWithdrawn The interest amount that was withdrawn\",\"_1\":\"principalWithdrawn The principal amount that was withdrawn\"}},\"withdrawMax(uint256)\":{\"params\":{\"tokenId\":\"The NFT representing the position\"},\"returns\":{\"interestWithdrawn\":\"The interest amount that was withdrawn\",\"principalWithdrawn\":\"The principal amount that was withdrawn\"}},\"withdrawMultiple(uint256[],uint256[])\":{\"params\":{\"amounts\":\"An array of amounts to withdraw from the corresponding tokenIds\",\"tokenIds\":\"An array of tokens ids representing the position\"}}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"assess()\":{\"notice\":\"Triggers an assessment of the creditline and the applies the payments according the tranche waterfall\"},\"availableToWithdraw(uint256)\":{\"notice\":\"Determines the amount of interest and principal redeemable by a particular tokenId\"},\"deposit(uint256,uint256)\":{\"notice\":\"Deposit a USDC amount into the pool for a tranche. Mints an NFT to the caller representing the position\"},\"drawdown(uint256)\":{\"notice\":\"Draws down the funds (and locks the pool) to the borrower address. Can only be called by the borrower\"},\"emergencyShutdown()\":{\"notice\":\"Pauses the pool and sweeps any remaining funds to the treasury reserve.\"},\"getVersion()\":{\"notice\":\"Returns the version triplet `[major, minor, patch]`\"},\"lockJuniorCapital()\":{\"notice\":\"Locks the junior tranche, preventing more junior deposits. Gives time for the senior to determine how much to invest (ensure leverage ratio cannot change for the period)\"},\"lockPool()\":{\"notice\":\"Locks the pool (locks both senior and junior tranches and starts the drawdown period). Beyond the drawdown period, any unused capital is available to withdraw by all depositors\"},\"migrateCreditLine(address,uint256,uint256,uint256,uint256,uint256,uint256)\":{\"notice\":\"Migrates the accounting variables from the current creditline to a brand new one\"},\"pauseDrawdowns()\":{\"notice\":\"Pauses all drawdowns (but not deposits/withdraws)\"},\"pay(uint256)\":{\"notice\":\"Allows repaying the creditline. Collects the USDC amount from the sender and triggers an assess\"},\"totalJuniorDeposits()\":{\"notice\":\"Returns the total junior capital deposited\"},\"unpauseDrawdowns()\":{\"notice\":\"Unpause drawdowns\"},\"withdraw(uint256,uint256)\":{\"notice\":\"Withdraw an already deposited amount if the funds are available\"},\"withdrawMax(uint256)\":{\"notice\":\"Similar to withdraw but will withdraw all available funds\"},\"withdrawMultiple(uint256[],uint256[])\":{\"notice\":\"Withdraw from many tokens (that the sender owns) in a single transaction\"}},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/protocol/core/TranchedPool.sol\":\"TranchedPool\"},\"evmVersion\":\"istanbul\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":100},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts-ethereum-package/contracts/GSN/Context.sol\":{\"content\":\"pragma solidity ^0.6.0;\\nimport \\\"../Initializable.sol\\\";\\n\\n/*\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with GSN meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\ncontract ContextUpgradeSafe is Initializable {\\n    // Empty internal constructor, to prevent people from mistakenly deploying\\n    // an instance of this contract, which should be used via inheritance.\\n\\n    function __Context_init() internal initializer {\\n        __Context_init_unchained();\\n    }\\n\\n    function __Context_init_unchained() internal initializer {\\n\\n\\n    }\\n\\n\\n    function _msgSender() internal view virtual returns (address payable) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes memory) {\\n        this; // silence state mutability warning without generating bytecode - see https://github.com/ethereum/solidity/issues/2691\\n        return msg.data;\\n    }\\n\\n    uint256[50] private __gap;\\n}\\n\",\"keccak256\":\"0xe81686511d62f18b2d9c693c2c94c0a789c690de63aa90e15451ebf65c5bfd3e\"},\"@openzeppelin/contracts-ethereum-package/contracts/Initializable.sol\":{\"content\":\"pragma solidity >=0.4.24 <0.7.0;\\n\\n\\n/**\\n * @title Initializable\\n *\\n * @dev Helper contract to support initializer functions. To use it, replace\\n * the constructor with a function that has the `initializer` modifier.\\n * WARNING: Unlike constructors, initializer functions must be manually\\n * invoked. This applies both to deploying an Initializable contract, as well\\n * as extending an Initializable contract via inheritance.\\n * WARNING: When used with inheritance, manual care must be taken to not invoke\\n * a parent initializer twice, or ensure that all initializers are idempotent,\\n * because this is not dealt with automatically as with constructors.\\n */\\ncontract Initializable {\\n\\n  /**\\n   * @dev Indicates that the contract has been initialized.\\n   */\\n  bool private initialized;\\n\\n  /**\\n   * @dev Indicates that the contract is in the process of being initialized.\\n   */\\n  bool private initializing;\\n\\n  /**\\n   * @dev Modifier to use in the initializer function of a contract.\\n   */\\n  modifier initializer() {\\n    require(initializing || isConstructor() || !initialized, \\\"Contract instance has already been initialized\\\");\\n\\n    bool isTopLevelCall = !initializing;\\n    if (isTopLevelCall) {\\n      initializing = true;\\n      initialized = true;\\n    }\\n\\n    _;\\n\\n    if (isTopLevelCall) {\\n      initializing = false;\\n    }\\n  }\\n\\n  /// @dev Returns true if and only if the function is running in the constructor\\n  function isConstructor() private view returns (bool) {\\n    // extcodesize checks the size of the code stored in an address, and\\n    // address returns the current address. Since the code is still not\\n    // deployed when running a constructor, any checks on its code size will\\n    // yield zero, making it an effective way to detect if a contract is\\n    // under construction or not.\\n    address self = address(this);\\n    uint256 cs;\\n    assembly { cs := extcodesize(self) }\\n    return cs == 0;\\n  }\\n\\n  // Reserved storage space to allow for layout changes in the future.\\n  uint256[50] private ______gap;\\n}\\n\",\"keccak256\":\"0x9bfec92e36234ecc99b5d37230acb6cd1f99560233753162204104a4897e8721\"},\"@openzeppelin/contracts-ethereum-package/contracts/access/AccessControl.sol\":{\"content\":\"pragma solidity ^0.6.0;\\n\\nimport \\\"../utils/EnumerableSet.sol\\\";\\nimport \\\"../utils/Address.sol\\\";\\nimport \\\"../GSN/Context.sol\\\";\\nimport \\\"../Initializable.sol\\\";\\n\\n/**\\n * @dev Contract module that allows children to implement role-based access\\n * control mechanisms.\\n *\\n * Roles are referred to by their `bytes32` identifier. These should be exposed\\n * in the external API and be unique. The best way to achieve this is by\\n * using `public constant` hash digests:\\n *\\n * ```\\n * bytes32 public constant MY_ROLE = keccak256(\\\"MY_ROLE\\\");\\n * ```\\n *\\n * Roles can be used to represent a set of permissions. To restrict access to a\\n * function call, use {hasRole}:\\n *\\n * ```\\n * function foo() public {\\n *     require(hasRole(MY_ROLE, _msgSender()));\\n *     ...\\n * }\\n * ```\\n *\\n * Roles can be granted and revoked dynamically via the {grantRole} and\\n * {revokeRole} functions. Each role has an associated admin role, and only\\n * accounts that have a role's admin role can call {grantRole} and {revokeRole}.\\n *\\n * By default, the admin role for all roles is `DEFAULT_ADMIN_ROLE`, which means\\n * that only accounts with this role will be able to grant or revoke other\\n * roles. More complex role relationships can be created by using\\n * {_setRoleAdmin}.\\n */\\nabstract contract AccessControlUpgradeSafe is Initializable, ContextUpgradeSafe {\\n    function __AccessControl_init() internal initializer {\\n        __Context_init_unchained();\\n        __AccessControl_init_unchained();\\n    }\\n\\n    function __AccessControl_init_unchained() internal initializer {\\n\\n\\n    }\\n\\n    using EnumerableSet for EnumerableSet.AddressSet;\\n    using Address for address;\\n\\n    struct RoleData {\\n        EnumerableSet.AddressSet members;\\n        bytes32 adminRole;\\n    }\\n\\n    mapping (bytes32 => RoleData) private _roles;\\n\\n    bytes32 public constant DEFAULT_ADMIN_ROLE = 0x00;\\n\\n    /**\\n     * @dev Emitted when `account` is granted `role`.\\n     *\\n     * `sender` is the account that originated the contract call, an admin role\\n     * bearer except when using {_setupRole}.\\n     */\\n    event RoleGranted(bytes32 indexed role, address indexed account, address indexed sender);\\n\\n    /**\\n     * @dev Emitted when `account` is revoked `role`.\\n     *\\n     * `sender` is the account that originated the contract call:\\n     *   - if using `revokeRole`, it is the admin role bearer\\n     *   - if using `renounceRole`, it is the role bearer (i.e. `account`)\\n     */\\n    event RoleRevoked(bytes32 indexed role, address indexed account, address indexed sender);\\n\\n    /**\\n     * @dev Returns `true` if `account` has been granted `role`.\\n     */\\n    function hasRole(bytes32 role, address account) public view returns (bool) {\\n        return _roles[role].members.contains(account);\\n    }\\n\\n    /**\\n     * @dev Returns the number of accounts that have `role`. Can be used\\n     * together with {getRoleMember} to enumerate all bearers of a role.\\n     */\\n    function getRoleMemberCount(bytes32 role) public view returns (uint256) {\\n        return _roles[role].members.length();\\n    }\\n\\n    /**\\n     * @dev Returns one of the accounts that have `role`. `index` must be a\\n     * value between 0 and {getRoleMemberCount}, non-inclusive.\\n     *\\n     * Role bearers are not sorted in any particular way, and their ordering may\\n     * change at any point.\\n     *\\n     * WARNING: When using {getRoleMember} and {getRoleMemberCount}, make sure\\n     * you perform all queries on the same block. See the following\\n     * https://forum.openzeppelin.com/t/iterating-over-elements-on-enumerableset-in-openzeppelin-contracts/2296[forum post]\\n     * for more information.\\n     */\\n    function getRoleMember(bytes32 role, uint256 index) public view returns (address) {\\n        return _roles[role].members.at(index);\\n    }\\n\\n    /**\\n     * @dev Returns the admin role that controls `role`. See {grantRole} and\\n     * {revokeRole}.\\n     *\\n     * To change a role's admin, use {_setRoleAdmin}.\\n     */\\n    function getRoleAdmin(bytes32 role) public view returns (bytes32) {\\n        return _roles[role].adminRole;\\n    }\\n\\n    /**\\n     * @dev Grants `role` to `account`.\\n     *\\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     */\\n    function grantRole(bytes32 role, address account) public virtual {\\n        require(hasRole(_roles[role].adminRole, _msgSender()), \\\"AccessControl: sender must be an admin to grant\\\");\\n\\n        _grantRole(role, account);\\n    }\\n\\n    /**\\n     * @dev Revokes `role` from `account`.\\n     *\\n     * If `account` had been granted `role`, emits a {RoleRevoked} event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     */\\n    function revokeRole(bytes32 role, address account) public virtual {\\n        require(hasRole(_roles[role].adminRole, _msgSender()), \\\"AccessControl: sender must be an admin to revoke\\\");\\n\\n        _revokeRole(role, account);\\n    }\\n\\n    /**\\n     * @dev Revokes `role` from the calling account.\\n     *\\n     * Roles are often managed via {grantRole} and {revokeRole}: this function's\\n     * purpose is to provide a mechanism for accounts to lose their privileges\\n     * if they are compromised (such as when a trusted device is misplaced).\\n     *\\n     * If the calling account had been granted `role`, emits a {RoleRevoked}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must be `account`.\\n     */\\n    function renounceRole(bytes32 role, address account) public virtual {\\n        require(account == _msgSender(), \\\"AccessControl: can only renounce roles for self\\\");\\n\\n        _revokeRole(role, account);\\n    }\\n\\n    /**\\n     * @dev Grants `role` to `account`.\\n     *\\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\\n     * event. Note that unlike {grantRole}, this function doesn't perform any\\n     * checks on the calling account.\\n     *\\n     * [WARNING]\\n     * ====\\n     * This function should only be called from the constructor when setting\\n     * up the initial roles for the system.\\n     *\\n     * Using this function in any other way is effectively circumventing the admin\\n     * system imposed by {AccessControl}.\\n     * ====\\n     */\\n    function _setupRole(bytes32 role, address account) internal virtual {\\n        _grantRole(role, account);\\n    }\\n\\n    /**\\n     * @dev Sets `adminRole` as ``role``'s admin role.\\n     */\\n    function _setRoleAdmin(bytes32 role, bytes32 adminRole) internal virtual {\\n        _roles[role].adminRole = adminRole;\\n    }\\n\\n    function _grantRole(bytes32 role, address account) private {\\n        if (_roles[role].members.add(account)) {\\n            emit RoleGranted(role, account, _msgSender());\\n        }\\n    }\\n\\n    function _revokeRole(bytes32 role, address account) private {\\n        if (_roles[role].members.remove(account)) {\\n            emit RoleRevoked(role, account, _msgSender());\\n        }\\n    }\\n\\n    uint256[49] private __gap;\\n}\\n\",\"keccak256\":\"0x3954a5ee18b9297616912390eac7b0fe698e6ffea5a50dc3ccb0980cae210e86\"},\"@openzeppelin/contracts-ethereum-package/contracts/introspection/IERC165.sol\":{\"content\":\"pragma solidity ^0.6.0;\\n\\n/**\\n * @dev Interface of the ERC165 standard, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\\n *\\n * Implementers can declare support of contract interfaces, which can then be\\n * queried by others ({ERC165Checker}).\\n *\\n * For an implementation, see {ERC165}.\\n */\\ninterface IERC165 {\\n    /**\\n     * @dev Returns true if this contract implements the interface defined by\\n     * `interfaceId`. See the corresponding\\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\\n     * to learn more about how these ids are created.\\n     *\\n     * This function call must use less than 30 000 gas.\\n     */\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\\n}\\n\",\"keccak256\":\"0x9175561c374ec1fc33045e5dfdde2057e63e00debf432875f9e1e3395d99c149\"},\"@openzeppelin/contracts-ethereum-package/contracts/math/Math.sol\":{\"content\":\"pragma solidity ^0.6.0;\\n\\n/**\\n * @dev Standard math utilities missing in the Solidity language.\\n */\\nlibrary Math {\\n    /**\\n     * @dev Returns the largest of two numbers.\\n     */\\n    function max(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a >= b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the smallest of two numbers.\\n     */\\n    function min(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a < b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the average of two numbers. The result is rounded towards\\n     * zero.\\n     */\\n    function average(uint256 a, uint256 b) internal pure returns (uint256) {\\n        // (a + b) / 2 can overflow, so we distribute\\n        return (a / 2) + (b / 2) + ((a % 2 + b % 2) / 2);\\n    }\\n}\\n\",\"keccak256\":\"0x50280546205978ca6573541955e15453b4c07a19e6c8ec4f6785a5ae0d7343fb\"},\"@openzeppelin/contracts-ethereum-package/contracts/math/SafeMath.sol\":{\"content\":\"pragma solidity ^0.6.0;\\n\\n/**\\n * @dev Wrappers over Solidity's arithmetic operations with added overflow\\n * checks.\\n *\\n * Arithmetic operations in Solidity wrap on overflow. This can easily result\\n * in bugs, because programmers usually assume that an overflow raises an\\n * error, which is the standard behavior in high level programming languages.\\n * `SafeMath` restores this intuition by reverting the transaction when an\\n * operation overflows.\\n *\\n * Using this library instead of the unchecked operations eliminates an entire\\n * class of bugs, so it's recommended to use it always.\\n */\\nlibrary SafeMath {\\n    /**\\n     * @dev Returns the addition of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `+` operator.\\n     *\\n     * Requirements:\\n     * - Addition cannot overflow.\\n     */\\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\\n        uint256 c = a + b;\\n        require(c >= a, \\\"SafeMath: addition overflow\\\");\\n\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting on\\n     * overflow (when the result is negative).\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     * - Subtraction cannot overflow.\\n     */\\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return sub(a, b, \\\"SafeMath: subtraction overflow\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\\n     * overflow (when the result is negative).\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     * - Subtraction cannot overflow.\\n     */\\n    function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        require(b <= a, errorMessage);\\n        uint256 c = a - b;\\n\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the multiplication of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `*` operator.\\n     *\\n     * Requirements:\\n     * - Multiplication cannot overflow.\\n     */\\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\\n        // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\\n        // benefit is lost if 'b' is also tested.\\n        // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\\n        if (a == 0) {\\n            return 0;\\n        }\\n\\n        uint256 c = a * b;\\n        require(c / a == b, \\\"SafeMath: multiplication overflow\\\");\\n\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers. Reverts on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\\n     * uses an invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     * - The divisor cannot be zero.\\n     */\\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return div(a, b, \\\"SafeMath: division by zero\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers. Reverts with custom message on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\\n     * uses an invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     * - The divisor cannot be zero.\\n     */\\n    function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        // Solidity only automatically asserts when dividing by 0\\n        require(b > 0, errorMessage);\\n        uint256 c = a / b;\\n        // assert(a == b * c + a % b); // There is no case in which this doesn't hold\\n\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * Reverts when dividing by zero.\\n     *\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     * - The divisor cannot be zero.\\n     */\\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return mod(a, b, \\\"SafeMath: modulo by zero\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * Reverts with custom message when dividing by zero.\\n     *\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     * - The divisor cannot be zero.\\n     */\\n    function mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        require(b != 0, errorMessage);\\n        return a % b;\\n    }\\n}\\n\",\"keccak256\":\"0x04d34b3cd5677bea25f8dfceb6dec0eaa071d4d4b789a43f13fe0c415ba4c296\"},\"@openzeppelin/contracts-ethereum-package/contracts/math/SignedSafeMath.sol\":{\"content\":\"pragma solidity ^0.6.0;\\n\\n/**\\n * @title SignedSafeMath\\n * @dev Signed math operations with safety checks that revert on error.\\n */\\nlibrary SignedSafeMath {\\n    int256 constant private _INT256_MIN = -2**255;\\n\\n    /**\\n     * @dev Multiplies two signed integers, reverts on overflow.\\n     */\\n    function mul(int256 a, int256 b) internal pure returns (int256) {\\n        // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\\n        // benefit is lost if 'b' is also tested.\\n        // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\\n        if (a == 0) {\\n            return 0;\\n        }\\n\\n        require(!(a == -1 && b == _INT256_MIN), \\\"SignedSafeMath: multiplication overflow\\\");\\n\\n        int256 c = a * b;\\n        require(c / a == b, \\\"SignedSafeMath: multiplication overflow\\\");\\n\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Integer division of two signed integers truncating the quotient, reverts on division by zero.\\n     */\\n    function div(int256 a, int256 b) internal pure returns (int256) {\\n        require(b != 0, \\\"SignedSafeMath: division by zero\\\");\\n        require(!(b == -1 && a == _INT256_MIN), \\\"SignedSafeMath: division overflow\\\");\\n\\n        int256 c = a / b;\\n\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Subtracts two signed integers, reverts on overflow.\\n     */\\n    function sub(int256 a, int256 b) internal pure returns (int256) {\\n        int256 c = a - b;\\n        require((b >= 0 && c <= a) || (b < 0 && c > a), \\\"SignedSafeMath: subtraction overflow\\\");\\n\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Adds two signed integers, reverts on overflow.\\n     */\\n    function add(int256 a, int256 b) internal pure returns (int256) {\\n        int256 c = a + b;\\n        require((b >= 0 && c >= a) || (b < 0 && c < a), \\\"SignedSafeMath: addition overflow\\\");\\n\\n        return c;\\n    }\\n}\\n\",\"keccak256\":\"0xfadc24a31d75d6b3f955190cffe13bbe6e24a274c12b2b60e8c4004131487ce8\"},\"@openzeppelin/contracts-ethereum-package/contracts/token/ERC20/IERC20.sol\":{\"content\":\"pragma solidity ^0.6.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address recipient, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n}\\n\",\"keccak256\":\"0x6cc1cb934a3ac2137a7dcaed018af9e235392236ceecfd3687259702b9c767ad\"},\"@openzeppelin/contracts-ethereum-package/contracts/token/ERC721/IERC721.sol\":{\"content\":\"pragma solidity ^0.6.2;\\n\\nimport \\\"../../introspection/IERC165.sol\\\";\\n\\n/**\\n * @dev Required interface of an ERC721 compliant contract.\\n */\\ninterface IERC721 is IERC165 {\\n    event Transfer(address indexed from, address indexed to, uint256 indexed tokenId);\\n    event Approval(address indexed owner, address indexed approved, uint256 indexed tokenId);\\n    event ApprovalForAll(address indexed owner, address indexed operator, bool approved);\\n\\n    /**\\n     * @dev Returns the number of NFTs in ``owner``'s account.\\n     */\\n    function balanceOf(address owner) external view returns (uint256 balance);\\n\\n    /**\\n     * @dev Returns the owner of the NFT specified by `tokenId`.\\n     */\\n    function ownerOf(uint256 tokenId) external view returns (address owner);\\n\\n    /**\\n     * @dev Transfers a specific NFT (`tokenId`) from one account (`from`) to\\n     * another (`to`).\\n     *\\n     *\\n     *\\n     * Requirements:\\n     * - `from`, `to` cannot be zero.\\n     * - `tokenId` must be owned by `from`.\\n     * - If the caller is not `from`, it must be have been allowed to move this\\n     * NFT by either {approve} or {setApprovalForAll}.\\n     */\\n    function safeTransferFrom(address from, address to, uint256 tokenId) external;\\n    /**\\n     * @dev Transfers a specific NFT (`tokenId`) from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Requirements:\\n     * - If the caller is not `from`, it must be approved to move this NFT by\\n     * either {approve} or {setApprovalForAll}.\\n     */\\n    function transferFrom(address from, address to, uint256 tokenId) external;\\n    function approve(address to, uint256 tokenId) external;\\n    function getApproved(uint256 tokenId) external view returns (address operator);\\n\\n    function setApprovalForAll(address operator, bool _approved) external;\\n    function isApprovedForAll(address owner, address operator) external view returns (bool);\\n\\n\\n    function safeTransferFrom(address from, address to, uint256 tokenId, bytes calldata data) external;\\n}\\n\",\"keccak256\":\"0x734b5bedb78074a59bca6aff9e5a1801c9c7e9c5314daf32e14857161fb36932\"},\"@openzeppelin/contracts-ethereum-package/contracts/utils/Address.sol\":{\"content\":\"pragma solidity ^0.6.2;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // According to EIP-1052, 0x0 is the value returned for not-yet created accounts\\n        // and 0xc5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470 is returned\\n        // for accounts without code, i.e. `keccak256('')`\\n        bytes32 codehash;\\n        bytes32 accountHash = 0xc5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470;\\n        // solhint-disable-next-line no-inline-assembly\\n        assembly { codehash := extcodehash(account) }\\n        return (codehash != accountHash && codehash != 0x0);\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        // solhint-disable-next-line avoid-low-level-calls, avoid-call-value\\n        (bool success, ) = recipient.call{ value: amount }(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n}\\n\",\"keccak256\":\"0x5f7da58ee3d9faa9b8999a93d49c8ff978f1afc88ae9bcfc6f9cbb44da011c2b\"},\"@openzeppelin/contracts-ethereum-package/contracts/utils/EnumerableSet.sol\":{\"content\":\"pragma solidity ^0.6.0;\\n\\n/**\\n * @dev Library for managing\\n * https://en.wikipedia.org/wiki/Set_(abstract_data_type)[sets] of primitive\\n * types.\\n *\\n * Sets have the following properties:\\n *\\n * - Elements are added, removed, and checked for existence in constant time\\n * (O(1)).\\n * - Elements are enumerated in O(n). No guarantees are made on the ordering.\\n *\\n * ```\\n * contract Example {\\n *     // Add the library methods\\n *     using EnumerableSet for EnumerableSet.AddressSet;\\n *\\n *     // Declare a set state variable\\n *     EnumerableSet.AddressSet private mySet;\\n * }\\n * ```\\n *\\n * As of v3.0.0, only sets of type `address` (`AddressSet`) and `uint256`\\n * (`UintSet`) are supported.\\n */\\nlibrary EnumerableSet {\\n    // To implement this library for multiple types with as little code\\n    // repetition as possible, we write it in terms of a generic Set type with\\n    // bytes32 values.\\n    // The Set implementation uses private functions, and user-facing\\n    // implementations (such as AddressSet) are just wrappers around the\\n    // underlying Set.\\n    // This means that we can only create new EnumerableSets for types that fit\\n    // in bytes32.\\n\\n    struct Set {\\n        // Storage of set values\\n        bytes32[] _values;\\n\\n        // Position of the value in the `values` array, plus 1 because index 0\\n        // means a value is not in the set.\\n        mapping (bytes32 => uint256) _indexes;\\n    }\\n\\n    /**\\n     * @dev Add a value to a set. O(1).\\n     *\\n     * Returns true if the value was added to the set, that is if it was not\\n     * already present.\\n     */\\n    function _add(Set storage set, bytes32 value) private returns (bool) {\\n        if (!_contains(set, value)) {\\n            set._values.push(value);\\n            // The value is stored at length-1, but we add 1 to all indexes\\n            // and use 0 as a sentinel value\\n            set._indexes[value] = set._values.length;\\n            return true;\\n        } else {\\n            return false;\\n        }\\n    }\\n\\n    /**\\n     * @dev Removes a value from a set. O(1).\\n     *\\n     * Returns true if the value was removed from the set, that is if it was\\n     * present.\\n     */\\n    function _remove(Set storage set, bytes32 value) private returns (bool) {\\n        // We read and store the value's index to prevent multiple reads from the same storage slot\\n        uint256 valueIndex = set._indexes[value];\\n\\n        if (valueIndex != 0) { // Equivalent to contains(set, value)\\n            // To delete an element from the _values array in O(1), we swap the element to delete with the last one in\\n            // the array, and then remove the last element (sometimes called as 'swap and pop').\\n            // This modifies the order of the array, as noted in {at}.\\n\\n            uint256 toDeleteIndex = valueIndex - 1;\\n            uint256 lastIndex = set._values.length - 1;\\n\\n            // When the value to delete is the last one, the swap operation is unnecessary. However, since this occurs\\n            // so rarely, we still do the swap anyway to avoid the gas cost of adding an 'if' statement.\\n\\n            bytes32 lastvalue = set._values[lastIndex];\\n\\n            // Move the last value to the index where the value to delete is\\n            set._values[toDeleteIndex] = lastvalue;\\n            // Update the index for the moved value\\n            set._indexes[lastvalue] = toDeleteIndex + 1; // All indexes are 1-based\\n\\n            // Delete the slot where the moved value was stored\\n            set._values.pop();\\n\\n            // Delete the index for the deleted slot\\n            delete set._indexes[value];\\n\\n            return true;\\n        } else {\\n            return false;\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns true if the value is in the set. O(1).\\n     */\\n    function _contains(Set storage set, bytes32 value) private view returns (bool) {\\n        return set._indexes[value] != 0;\\n    }\\n\\n    /**\\n     * @dev Returns the number of values on the set. O(1).\\n     */\\n    function _length(Set storage set) private view returns (uint256) {\\n        return set._values.length;\\n    }\\n\\n   /**\\n    * @dev Returns the value stored at position `index` in the set. O(1).\\n    *\\n    * Note that there are no guarantees on the ordering of values inside the\\n    * array, and it may change when more values are added or removed.\\n    *\\n    * Requirements:\\n    *\\n    * - `index` must be strictly less than {length}.\\n    */\\n    function _at(Set storage set, uint256 index) private view returns (bytes32) {\\n        require(set._values.length > index, \\\"EnumerableSet: index out of bounds\\\");\\n        return set._values[index];\\n    }\\n\\n    // AddressSet\\n\\n    struct AddressSet {\\n        Set _inner;\\n    }\\n\\n    /**\\n     * @dev Add a value to a set. O(1).\\n     *\\n     * Returns true if the value was added to the set, that is if it was not\\n     * already present.\\n     */\\n    function add(AddressSet storage set, address value) internal returns (bool) {\\n        return _add(set._inner, bytes32(uint256(value)));\\n    }\\n\\n    /**\\n     * @dev Removes a value from a set. O(1).\\n     *\\n     * Returns true if the value was removed from the set, that is if it was\\n     * present.\\n     */\\n    function remove(AddressSet storage set, address value) internal returns (bool) {\\n        return _remove(set._inner, bytes32(uint256(value)));\\n    }\\n\\n    /**\\n     * @dev Returns true if the value is in the set. O(1).\\n     */\\n    function contains(AddressSet storage set, address value) internal view returns (bool) {\\n        return _contains(set._inner, bytes32(uint256(value)));\\n    }\\n\\n    /**\\n     * @dev Returns the number of values in the set. O(1).\\n     */\\n    function length(AddressSet storage set) internal view returns (uint256) {\\n        return _length(set._inner);\\n    }\\n\\n   /**\\n    * @dev Returns the value stored at position `index` in the set. O(1).\\n    *\\n    * Note that there are no guarantees on the ordering of values inside the\\n    * array, and it may change when more values are added or removed.\\n    *\\n    * Requirements:\\n    *\\n    * - `index` must be strictly less than {length}.\\n    */\\n    function at(AddressSet storage set, uint256 index) internal view returns (address) {\\n        return address(uint256(_at(set._inner, index)));\\n    }\\n\\n\\n    // UintSet\\n\\n    struct UintSet {\\n        Set _inner;\\n    }\\n\\n    /**\\n     * @dev Add a value to a set. O(1).\\n     *\\n     * Returns true if the value was added to the set, that is if it was not\\n     * already present.\\n     */\\n    function add(UintSet storage set, uint256 value) internal returns (bool) {\\n        return _add(set._inner, bytes32(value));\\n    }\\n\\n    /**\\n     * @dev Removes a value from a set. O(1).\\n     *\\n     * Returns true if the value was removed from the set, that is if it was\\n     * present.\\n     */\\n    function remove(UintSet storage set, uint256 value) internal returns (bool) {\\n        return _remove(set._inner, bytes32(value));\\n    }\\n\\n    /**\\n     * @dev Returns true if the value is in the set. O(1).\\n     */\\n    function contains(UintSet storage set, uint256 value) internal view returns (bool) {\\n        return _contains(set._inner, bytes32(value));\\n    }\\n\\n    /**\\n     * @dev Returns the number of values on the set. O(1).\\n     */\\n    function length(UintSet storage set) internal view returns (uint256) {\\n        return _length(set._inner);\\n    }\\n\\n   /**\\n    * @dev Returns the value stored at position `index` in the set. O(1).\\n    *\\n    * Note that there are no guarantees on the ordering of values inside the\\n    * array, and it may change when more values are added or removed.\\n    *\\n    * Requirements:\\n    *\\n    * - `index` must be strictly less than {length}.\\n    */\\n    function at(UintSet storage set, uint256 index) internal view returns (uint256) {\\n        return uint256(_at(set._inner, index));\\n    }\\n}\\n\",\"keccak256\":\"0x7f6401708b61f575b497aa7c8118ca9d70348643c83c26e70d9b643edf1a95c1\"},\"@openzeppelin/contracts-ethereum-package/contracts/utils/Pausable.sol\":{\"content\":\"pragma solidity ^0.6.0;\\n\\nimport \\\"../GSN/Context.sol\\\";\\nimport \\\"../Initializable.sol\\\";\\n\\n/**\\n * @dev Contract module which allows children to implement an emergency stop\\n * mechanism that can be triggered by an authorized account.\\n *\\n * This module is used through inheritance. It will make available the\\n * modifiers `whenNotPaused` and `whenPaused`, which can be applied to\\n * the functions of your contract. Note that they will not be pausable by\\n * simply including this module, only once the modifiers are put in place.\\n */\\ncontract PausableUpgradeSafe is Initializable, ContextUpgradeSafe {\\n    /**\\n     * @dev Emitted when the pause is triggered by `account`.\\n     */\\n    event Paused(address account);\\n\\n    /**\\n     * @dev Emitted when the pause is lifted by `account`.\\n     */\\n    event Unpaused(address account);\\n\\n    bool private _paused;\\n\\n    /**\\n     * @dev Initializes the contract in unpaused state.\\n     */\\n\\n    function __Pausable_init() internal initializer {\\n        __Context_init_unchained();\\n        __Pausable_init_unchained();\\n    }\\n\\n    function __Pausable_init_unchained() internal initializer {\\n\\n\\n        _paused = false;\\n\\n    }\\n\\n\\n    /**\\n     * @dev Returns true if the contract is paused, and false otherwise.\\n     */\\n    function paused() public view returns (bool) {\\n        return _paused;\\n    }\\n\\n    /**\\n     * @dev Modifier to make a function callable only when the contract is not paused.\\n     */\\n    modifier whenNotPaused() {\\n        require(!_paused, \\\"Pausable: paused\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Modifier to make a function callable only when the contract is paused.\\n     */\\n    modifier whenPaused() {\\n        require(_paused, \\\"Pausable: not paused\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Triggers stopped state.\\n     */\\n    function _pause() internal virtual whenNotPaused {\\n        _paused = true;\\n        emit Paused(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Returns to normal state.\\n     */\\n    function _unpause() internal virtual whenPaused {\\n        _paused = false;\\n        emit Unpaused(_msgSender());\\n    }\\n\\n    uint256[49] private __gap;\\n}\\n\",\"keccak256\":\"0x2ad5473fe88d9ab30c6cd495ab8895daae8c4a48cf8231282a2d339387b35006\"},\"@openzeppelin/contracts-ethereum-package/contracts/utils/ReentrancyGuard.sol\":{\"content\":\"pragma solidity ^0.6.0;\\nimport \\\"../Initializable.sol\\\";\\n\\n/**\\n * @dev Contract module that helps prevent reentrant calls to a function.\\n *\\n * Inheriting from `ReentrancyGuard` will make the {nonReentrant} modifier\\n * available, which can be applied to functions to make sure there are no nested\\n * (reentrant) calls to them.\\n *\\n * Note that because there is a single `nonReentrant` guard, functions marked as\\n * `nonReentrant` may not call one another. This can be worked around by making\\n * those functions `private`, and then adding `external` `nonReentrant` entry\\n * points to them.\\n *\\n * TIP: If you would like to learn more about reentrancy and alternative ways\\n * to protect against it, check out our blog post\\n * https://blog.openzeppelin.com/reentrancy-after-istanbul/[Reentrancy After Istanbul].\\n */\\ncontract ReentrancyGuardUpgradeSafe is Initializable {\\n    bool private _notEntered;\\n\\n\\n    function __ReentrancyGuard_init() internal initializer {\\n        __ReentrancyGuard_init_unchained();\\n    }\\n\\n    function __ReentrancyGuard_init_unchained() internal initializer {\\n\\n\\n        // Storing an initial non-zero value makes deployment a bit more\\n        // expensive, but in exchange the refund on every call to nonReentrant\\n        // will be lower in amount. Since refunds are capped to a percetange of\\n        // the total transaction's gas, it is best to keep them low in cases\\n        // like this one, to increase the likelihood of the full refund coming\\n        // into effect.\\n        _notEntered = true;\\n\\n    }\\n\\n\\n    /**\\n     * @dev Prevents a contract from calling itself, directly or indirectly.\\n     * Calling a `nonReentrant` function from another `nonReentrant`\\n     * function is not supported. It is possible to prevent this from happening\\n     * by making the `nonReentrant` function external, and make it call a\\n     * `private` function that does the actual work.\\n     */\\n    modifier nonReentrant() {\\n        // On the first call to nonReentrant, _notEntered will be true\\n        require(_notEntered, \\\"ReentrancyGuard: reentrant call\\\");\\n\\n        // Any calls to nonReentrant after this point will fail\\n        _notEntered = false;\\n\\n        _;\\n\\n        // By storing the original value once again, a refund is triggered (see\\n        // https://eips.ethereum.org/EIPS/eip-2200)\\n        _notEntered = true;\\n    }\\n\\n    uint256[49] private __gap;\\n}\\n\",\"keccak256\":\"0x75a600e5ed3443ecf3b7fb636064b404b358317fd6cd91e70e3ca5cf2370e882\"},\"@openzeppelin/contracts/drafts/IERC20Permit.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.0 <0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 Permit extension allowing approvals to be made via signatures, as defined in\\n * https://eips.ethereum.org/EIPS/eip-2612[EIP-2612].\\n *\\n * Adds the {permit} method, which can be used to change an account's ERC20 allowance (see {IERC20-allowance}) by\\n * presenting a message signed by the account. By not relying on `{IERC20-approve}`, the token holder account doesn't\\n * need to send a transaction, and thus is not required to hold Ether at all.\\n */\\ninterface IERC20Permit {\\n    /**\\n     * @dev Sets `value` as the allowance of `spender` over `owner`'s tokens,\\n     * given `owner`'s signed approval.\\n     *\\n     * IMPORTANT: The same issues {IERC20-approve} has related to transaction\\n     * ordering also apply here.\\n     *\\n     * Emits an {Approval} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     * - `deadline` must be a timestamp in the future.\\n     * - `v`, `r` and `s` must be a valid `secp256k1` signature from `owner`\\n     * over the EIP712-formatted function arguments.\\n     * - the signature must use ``owner``'s current nonce (see {nonces}).\\n     *\\n     * For more information on the signature format, see the\\n     * https://eips.ethereum.org/EIPS/eip-2612#specification[relevant EIP\\n     * section].\\n     */\\n    function permit(address owner, address spender, uint256 value, uint256 deadline, uint8 v, bytes32 r, bytes32 s) external;\\n\\n    /**\\n     * @dev Returns the current nonce for `owner`. This value must be\\n     * included whenever a signature is generated for {permit}.\\n     *\\n     * Every successful call to {permit} increases ``owner``'s nonce by one. This\\n     * prevents a signature from being used multiple times.\\n     */\\n    function nonces(address owner) external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the domain separator used in the encoding of the signature for `permit`, as defined by {EIP712}.\\n     */\\n    // solhint-disable-next-line func-name-mixedcase\\n    function DOMAIN_SEPARATOR() external view returns (bytes32);\\n}\\n\",\"keccak256\":\"0x1aab7754719ba764a8a05bec47e975001400f62986474945eb3dbee6d871259f\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Address.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.2 <0.8.0;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize, which returns 0 for contracts in\\n        // construction, since the code is only stored at the end of the\\n        // constructor execution.\\n\\n        uint256 size;\\n        // solhint-disable-next-line no-inline-assembly\\n        assembly { size := extcodesize(account) }\\n        return size > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        // solhint-disable-next-line avoid-low-level-calls, avoid-call-value\\n        (bool success, ) = recipient.call{ value: amount }(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain`call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n      return functionCall(target, data, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data, string memory errorMessage) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(address target, bytes memory data, uint256 value) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(address target, bytes memory data, uint256 value, string memory errorMessage) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        require(isContract(target), \\\"Address: call to non-contract\\\");\\n\\n        // solhint-disable-next-line avoid-low-level-calls\\n        (bool success, bytes memory returndata) = target.call{ value: value }(data);\\n        return _verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data, string memory errorMessage) internal view returns (bytes memory) {\\n        require(isContract(target), \\\"Address: static call to non-contract\\\");\\n\\n        // solhint-disable-next-line avoid-low-level-calls\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return _verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data, string memory errorMessage) internal returns (bytes memory) {\\n        require(isContract(target), \\\"Address: delegate call to non-contract\\\");\\n\\n        // solhint-disable-next-line avoid-low-level-calls\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return _verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    function _verifyCallResult(bool success, bytes memory returndata, string memory errorMessage) private pure returns(bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            // Look for revert reason and bubble it up if present\\n            if (returndata.length > 0) {\\n                // The easiest way to bubble the revert reason is using memory via assembly\\n\\n                // solhint-disable-next-line no-inline-assembly\\n                assembly {\\n                    let returndata_size := mload(returndata)\\n                    revert(add(32, returndata), returndata_size)\\n                }\\n            } else {\\n                revert(errorMessage);\\n            }\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x28911e614500ae7c607a432a709d35da25f3bc5ddc8bd12b278b66358070c0ea\",\"license\":\"MIT\"},\"contracts/external/FixedPoint.sol\":{\"content\":\"// SPDX-License-Identifier: AGPL-3.0-only\\n// solhint-disable\\n// Imported from https://github.com/UMAprotocol/protocol/blob/4d1c8cc47a4df5e79f978cb05647a7432e111a3d/packages/core/contracts/common/implementation/FixedPoint.sol\\npragma solidity 0.6.12;\\npragma experimental ABIEncoderV2;\\n\\nimport \\\"@openzeppelin/contracts-ethereum-package/contracts/math/SafeMath.sol\\\";\\nimport \\\"@openzeppelin/contracts-ethereum-package/contracts/math/SignedSafeMath.sol\\\";\\n\\n/**\\n * @title Library for fixed point arithmetic on uints\\n */\\nlibrary FixedPoint {\\n  using SafeMath for uint256;\\n  using SignedSafeMath for int256;\\n\\n  // Supports 18 decimals. E.g., 1e18 represents \\\"1\\\", 5e17 represents \\\"0.5\\\".\\n  // For unsigned values:\\n  //   This can represent a value up to (2^256 - 1)/10^18 = ~10^59. 10^59 will be stored internally as uint256 10^77.\\n  uint256 private constant FP_SCALING_FACTOR = 10**18;\\n\\n  // --------------------------------------- UNSIGNED -----------------------------------------------------------------------------\\n  struct Unsigned {\\n    uint256 rawValue;\\n  }\\n\\n  /**\\n   * @notice Constructs an `Unsigned` from an unscaled uint, e.g., `b=5` gets stored internally as `5**18`.\\n   * @param a uint to convert into a FixedPoint.\\n   * @return the converted FixedPoint.\\n   */\\n  function fromUnscaledUint(uint256 a) internal pure returns (Unsigned memory) {\\n    return Unsigned(a.mul(FP_SCALING_FACTOR));\\n  }\\n\\n  /**\\n   * @notice Whether `a` is equal to `b`.\\n   * @param a a FixedPoint.\\n   * @param b a uint256.\\n   * @return True if equal, or False.\\n   */\\n  function isEqual(Unsigned memory a, uint256 b) internal pure returns (bool) {\\n    return a.rawValue == fromUnscaledUint(b).rawValue;\\n  }\\n\\n  /**\\n   * @notice Whether `a` is equal to `b`.\\n   * @param a a FixedPoint.\\n   * @param b a FixedPoint.\\n   * @return True if equal, or False.\\n   */\\n  function isEqual(Unsigned memory a, Unsigned memory b) internal pure returns (bool) {\\n    return a.rawValue == b.rawValue;\\n  }\\n\\n  /**\\n   * @notice Whether `a` is greater than `b`.\\n   * @param a a FixedPoint.\\n   * @param b a FixedPoint.\\n   * @return True if `a > b`, or False.\\n   */\\n  function isGreaterThan(Unsigned memory a, Unsigned memory b) internal pure returns (bool) {\\n    return a.rawValue > b.rawValue;\\n  }\\n\\n  /**\\n   * @notice Whether `a` is greater than `b`.\\n   * @param a a FixedPoint.\\n   * @param b a uint256.\\n   * @return True if `a > b`, or False.\\n   */\\n  function isGreaterThan(Unsigned memory a, uint256 b) internal pure returns (bool) {\\n    return a.rawValue > fromUnscaledUint(b).rawValue;\\n  }\\n\\n  /**\\n   * @notice Whether `a` is greater than `b`.\\n   * @param a a uint256.\\n   * @param b a FixedPoint.\\n   * @return True if `a > b`, or False.\\n   */\\n  function isGreaterThan(uint256 a, Unsigned memory b) internal pure returns (bool) {\\n    return fromUnscaledUint(a).rawValue > b.rawValue;\\n  }\\n\\n  /**\\n   * @notice Whether `a` is greater than or equal to `b`.\\n   * @param a a FixedPoint.\\n   * @param b a FixedPoint.\\n   * @return True if `a >= b`, or False.\\n   */\\n  function isGreaterThanOrEqual(Unsigned memory a, Unsigned memory b) internal pure returns (bool) {\\n    return a.rawValue >= b.rawValue;\\n  }\\n\\n  /**\\n   * @notice Whether `a` is greater than or equal to `b`.\\n   * @param a a FixedPoint.\\n   * @param b a uint256.\\n   * @return True if `a >= b`, or False.\\n   */\\n  function isGreaterThanOrEqual(Unsigned memory a, uint256 b) internal pure returns (bool) {\\n    return a.rawValue >= fromUnscaledUint(b).rawValue;\\n  }\\n\\n  /**\\n   * @notice Whether `a` is greater than or equal to `b`.\\n   * @param a a uint256.\\n   * @param b a FixedPoint.\\n   * @return True if `a >= b`, or False.\\n   */\\n  function isGreaterThanOrEqual(uint256 a, Unsigned memory b) internal pure returns (bool) {\\n    return fromUnscaledUint(a).rawValue >= b.rawValue;\\n  }\\n\\n  /**\\n   * @notice Whether `a` is less than `b`.\\n   * @param a a FixedPoint.\\n   * @param b a FixedPoint.\\n   * @return True if `a < b`, or False.\\n   */\\n  function isLessThan(Unsigned memory a, Unsigned memory b) internal pure returns (bool) {\\n    return a.rawValue < b.rawValue;\\n  }\\n\\n  /**\\n   * @notice Whether `a` is less than `b`.\\n   * @param a a FixedPoint.\\n   * @param b a uint256.\\n   * @return True if `a < b`, or False.\\n   */\\n  function isLessThan(Unsigned memory a, uint256 b) internal pure returns (bool) {\\n    return a.rawValue < fromUnscaledUint(b).rawValue;\\n  }\\n\\n  /**\\n   * @notice Whether `a` is less than `b`.\\n   * @param a a uint256.\\n   * @param b a FixedPoint.\\n   * @return True if `a < b`, or False.\\n   */\\n  function isLessThan(uint256 a, Unsigned memory b) internal pure returns (bool) {\\n    return fromUnscaledUint(a).rawValue < b.rawValue;\\n  }\\n\\n  /**\\n   * @notice Whether `a` is less than or equal to `b`.\\n   * @param a a FixedPoint.\\n   * @param b a FixedPoint.\\n   * @return True if `a <= b`, or False.\\n   */\\n  function isLessThanOrEqual(Unsigned memory a, Unsigned memory b) internal pure returns (bool) {\\n    return a.rawValue <= b.rawValue;\\n  }\\n\\n  /**\\n   * @notice Whether `a` is less than or equal to `b`.\\n   * @param a a FixedPoint.\\n   * @param b a uint256.\\n   * @return True if `a <= b`, or False.\\n   */\\n  function isLessThanOrEqual(Unsigned memory a, uint256 b) internal pure returns (bool) {\\n    return a.rawValue <= fromUnscaledUint(b).rawValue;\\n  }\\n\\n  /**\\n   * @notice Whether `a` is less than or equal to `b`.\\n   * @param a a uint256.\\n   * @param b a FixedPoint.\\n   * @return True if `a <= b`, or False.\\n   */\\n  function isLessThanOrEqual(uint256 a, Unsigned memory b) internal pure returns (bool) {\\n    return fromUnscaledUint(a).rawValue <= b.rawValue;\\n  }\\n\\n  /**\\n   * @notice The minimum of `a` and `b`.\\n   * @param a a FixedPoint.\\n   * @param b a FixedPoint.\\n   * @return the minimum of `a` and `b`.\\n   */\\n  function min(Unsigned memory a, Unsigned memory b) internal pure returns (Unsigned memory) {\\n    return a.rawValue < b.rawValue ? a : b;\\n  }\\n\\n  /**\\n   * @notice The maximum of `a` and `b`.\\n   * @param a a FixedPoint.\\n   * @param b a FixedPoint.\\n   * @return the maximum of `a` and `b`.\\n   */\\n  function max(Unsigned memory a, Unsigned memory b) internal pure returns (Unsigned memory) {\\n    return a.rawValue > b.rawValue ? a : b;\\n  }\\n\\n  /**\\n   * @notice Adds two `Unsigned`s, reverting on overflow.\\n   * @param a a FixedPoint.\\n   * @param b a FixedPoint.\\n   * @return the sum of `a` and `b`.\\n   */\\n  function add(Unsigned memory a, Unsigned memory b) internal pure returns (Unsigned memory) {\\n    return Unsigned(a.rawValue.add(b.rawValue));\\n  }\\n\\n  /**\\n   * @notice Adds an `Unsigned` to an unscaled uint, reverting on overflow.\\n   * @param a a FixedPoint.\\n   * @param b a uint256.\\n   * @return the sum of `a` and `b`.\\n   */\\n  function add(Unsigned memory a, uint256 b) internal pure returns (Unsigned memory) {\\n    return add(a, fromUnscaledUint(b));\\n  }\\n\\n  /**\\n   * @notice Subtracts two `Unsigned`s, reverting on overflow.\\n   * @param a a FixedPoint.\\n   * @param b a FixedPoint.\\n   * @return the difference of `a` and `b`.\\n   */\\n  function sub(Unsigned memory a, Unsigned memory b) internal pure returns (Unsigned memory) {\\n    return Unsigned(a.rawValue.sub(b.rawValue));\\n  }\\n\\n  /**\\n   * @notice Subtracts an unscaled uint256 from an `Unsigned`, reverting on overflow.\\n   * @param a a FixedPoint.\\n   * @param b a uint256.\\n   * @return the difference of `a` and `b`.\\n   */\\n  function sub(Unsigned memory a, uint256 b) internal pure returns (Unsigned memory) {\\n    return sub(a, fromUnscaledUint(b));\\n  }\\n\\n  /**\\n   * @notice Subtracts an `Unsigned` from an unscaled uint256, reverting on overflow.\\n   * @param a a uint256.\\n   * @param b a FixedPoint.\\n   * @return the difference of `a` and `b`.\\n   */\\n  function sub(uint256 a, Unsigned memory b) internal pure returns (Unsigned memory) {\\n    return sub(fromUnscaledUint(a), b);\\n  }\\n\\n  /**\\n   * @notice Multiplies two `Unsigned`s, reverting on overflow.\\n   * @dev This will \\\"floor\\\" the product.\\n   * @param a a FixedPoint.\\n   * @param b a FixedPoint.\\n   * @return the product of `a` and `b`.\\n   */\\n  function mul(Unsigned memory a, Unsigned memory b) internal pure returns (Unsigned memory) {\\n    // There are two caveats with this computation:\\n    // 1. Max output for the represented number is ~10^41, otherwise an intermediate value overflows. 10^41 is\\n    // stored internally as a uint256 ~10^59.\\n    // 2. Results that can't be represented exactly are truncated not rounded. E.g., 1.4 * 2e-18 = 2.8e-18, which\\n    // would round to 3, but this computation produces the result 2.\\n    // No need to use SafeMath because FP_SCALING_FACTOR != 0.\\n    return Unsigned(a.rawValue.mul(b.rawValue) / FP_SCALING_FACTOR);\\n  }\\n\\n  /**\\n   * @notice Multiplies an `Unsigned` and an unscaled uint256, reverting on overflow.\\n   * @dev This will \\\"floor\\\" the product.\\n   * @param a a FixedPoint.\\n   * @param b a uint256.\\n   * @return the product of `a` and `b`.\\n   */\\n  function mul(Unsigned memory a, uint256 b) internal pure returns (Unsigned memory) {\\n    return Unsigned(a.rawValue.mul(b));\\n  }\\n\\n  /**\\n   * @notice Multiplies two `Unsigned`s and \\\"ceil's\\\" the product, reverting on overflow.\\n   * @param a a FixedPoint.\\n   * @param b a FixedPoint.\\n   * @return the product of `a` and `b`.\\n   */\\n  function mulCeil(Unsigned memory a, Unsigned memory b) internal pure returns (Unsigned memory) {\\n    uint256 mulRaw = a.rawValue.mul(b.rawValue);\\n    uint256 mulFloor = mulRaw / FP_SCALING_FACTOR;\\n    uint256 mod = mulRaw.mod(FP_SCALING_FACTOR);\\n    if (mod != 0) {\\n      return Unsigned(mulFloor.add(1));\\n    } else {\\n      return Unsigned(mulFloor);\\n    }\\n  }\\n\\n  /**\\n   * @notice Multiplies an `Unsigned` and an unscaled uint256 and \\\"ceil's\\\" the product, reverting on overflow.\\n   * @param a a FixedPoint.\\n   * @param b a FixedPoint.\\n   * @return the product of `a` and `b`.\\n   */\\n  function mulCeil(Unsigned memory a, uint256 b) internal pure returns (Unsigned memory) {\\n    // Since b is an int, there is no risk of truncation and we can just mul it normally\\n    return Unsigned(a.rawValue.mul(b));\\n  }\\n\\n  /**\\n   * @notice Divides one `Unsigned` by an `Unsigned`, reverting on overflow or division by 0.\\n   * @dev This will \\\"floor\\\" the quotient.\\n   * @param a a FixedPoint numerator.\\n   * @param b a FixedPoint denominator.\\n   * @return the quotient of `a` divided by `b`.\\n   */\\n  function div(Unsigned memory a, Unsigned memory b) internal pure returns (Unsigned memory) {\\n    // There are two caveats with this computation:\\n    // 1. Max value for the number dividend `a` represents is ~10^41, otherwise an intermediate value overflows.\\n    // 10^41 is stored internally as a uint256 10^59.\\n    // 2. Results that can't be represented exactly are truncated not rounded. E.g., 2 / 3 = 0.6 repeating, which\\n    // would round to 0.666666666666666667, but this computation produces the result 0.666666666666666666.\\n    return Unsigned(a.rawValue.mul(FP_SCALING_FACTOR).div(b.rawValue));\\n  }\\n\\n  /**\\n   * @notice Divides one `Unsigned` by an unscaled uint256, reverting on overflow or division by 0.\\n   * @dev This will \\\"floor\\\" the quotient.\\n   * @param a a FixedPoint numerator.\\n   * @param b a uint256 denominator.\\n   * @return the quotient of `a` divided by `b`.\\n   */\\n  function div(Unsigned memory a, uint256 b) internal pure returns (Unsigned memory) {\\n    return Unsigned(a.rawValue.div(b));\\n  }\\n\\n  /**\\n   * @notice Divides one unscaled uint256 by an `Unsigned`, reverting on overflow or division by 0.\\n   * @dev This will \\\"floor\\\" the quotient.\\n   * @param a a uint256 numerator.\\n   * @param b a FixedPoint denominator.\\n   * @return the quotient of `a` divided by `b`.\\n   */\\n  function div(uint256 a, Unsigned memory b) internal pure returns (Unsigned memory) {\\n    return div(fromUnscaledUint(a), b);\\n  }\\n\\n  /**\\n   * @notice Divides one `Unsigned` by an `Unsigned` and \\\"ceil's\\\" the quotient, reverting on overflow or division by 0.\\n   * @param a a FixedPoint numerator.\\n   * @param b a FixedPoint denominator.\\n   * @return the quotient of `a` divided by `b`.\\n   */\\n  function divCeil(Unsigned memory a, Unsigned memory b) internal pure returns (Unsigned memory) {\\n    uint256 aScaled = a.rawValue.mul(FP_SCALING_FACTOR);\\n    uint256 divFloor = aScaled.div(b.rawValue);\\n    uint256 mod = aScaled.mod(b.rawValue);\\n    if (mod != 0) {\\n      return Unsigned(divFloor.add(1));\\n    } else {\\n      return Unsigned(divFloor);\\n    }\\n  }\\n\\n  /**\\n   * @notice Divides one `Unsigned` by an unscaled uint256 and \\\"ceil's\\\" the quotient, reverting on overflow or division by 0.\\n   * @param a a FixedPoint numerator.\\n   * @param b a uint256 denominator.\\n   * @return the quotient of `a` divided by `b`.\\n   */\\n  function divCeil(Unsigned memory a, uint256 b) internal pure returns (Unsigned memory) {\\n    // Because it is possible that a quotient gets truncated, we can't just call \\\"Unsigned(a.rawValue.div(b))\\\"\\n    // similarly to mulCeil with a uint256 as the second parameter. Therefore we need to convert b into an Unsigned.\\n    // This creates the possibility of overflow if b is very large.\\n    return divCeil(a, fromUnscaledUint(b));\\n  }\\n\\n  /**\\n   * @notice Raises an `Unsigned` to the power of an unscaled uint256, reverting on overflow. E.g., `b=2` squares `a`.\\n   * @dev This will \\\"floor\\\" the result.\\n   * @param a a FixedPoint numerator.\\n   * @param b a uint256 denominator.\\n   * @return output is `a` to the power of `b`.\\n   */\\n  function pow(Unsigned memory a, uint256 b) internal pure returns (Unsigned memory output) {\\n    output = fromUnscaledUint(1);\\n    for (uint256 i = 0; i < b; i = i.add(1)) {\\n      output = mul(output, a);\\n    }\\n  }\\n\\n  // ------------------------------------------------- SIGNED -------------------------------------------------------------\\n  // Supports 18 decimals. E.g., 1e18 represents \\\"1\\\", 5e17 represents \\\"0.5\\\".\\n  // For signed values:\\n  //   This can represent a value up (or down) to +-(2^255 - 1)/10^18 = ~10^58. 10^58 will be stored internally as int256 10^76.\\n  int256 private constant SFP_SCALING_FACTOR = 10**18;\\n\\n  struct Signed {\\n    int256 rawValue;\\n  }\\n\\n  function fromSigned(Signed memory a) internal pure returns (Unsigned memory) {\\n    require(a.rawValue >= 0, \\\"Negative value provided\\\");\\n    return Unsigned(uint256(a.rawValue));\\n  }\\n\\n  function fromUnsigned(Unsigned memory a) internal pure returns (Signed memory) {\\n    require(a.rawValue <= uint256(type(int256).max), \\\"Unsigned too large\\\");\\n    return Signed(int256(a.rawValue));\\n  }\\n\\n  /**\\n   * @notice Constructs a `Signed` from an unscaled int, e.g., `b=5` gets stored internally as `5**18`.\\n   * @param a int to convert into a FixedPoint.Signed.\\n   * @return the converted FixedPoint.Signed.\\n   */\\n  function fromUnscaledInt(int256 a) internal pure returns (Signed memory) {\\n    return Signed(a.mul(SFP_SCALING_FACTOR));\\n  }\\n\\n  /**\\n   * @notice Whether `a` is equal to `b`.\\n   * @param a a FixedPoint.Signed.\\n   * @param b a int256.\\n   * @return True if equal, or False.\\n   */\\n  function isEqual(Signed memory a, int256 b) internal pure returns (bool) {\\n    return a.rawValue == fromUnscaledInt(b).rawValue;\\n  }\\n\\n  /**\\n   * @notice Whether `a` is equal to `b`.\\n   * @param a a FixedPoint.Signed.\\n   * @param b a FixedPoint.Signed.\\n   * @return True if equal, or False.\\n   */\\n  function isEqual(Signed memory a, Signed memory b) internal pure returns (bool) {\\n    return a.rawValue == b.rawValue;\\n  }\\n\\n  /**\\n   * @notice Whether `a` is greater than `b`.\\n   * @param a a FixedPoint.Signed.\\n   * @param b a FixedPoint.Signed.\\n   * @return True if `a > b`, or False.\\n   */\\n  function isGreaterThan(Signed memory a, Signed memory b) internal pure returns (bool) {\\n    return a.rawValue > b.rawValue;\\n  }\\n\\n  /**\\n   * @notice Whether `a` is greater than `b`.\\n   * @param a a FixedPoint.Signed.\\n   * @param b an int256.\\n   * @return True if `a > b`, or False.\\n   */\\n  function isGreaterThan(Signed memory a, int256 b) internal pure returns (bool) {\\n    return a.rawValue > fromUnscaledInt(b).rawValue;\\n  }\\n\\n  /**\\n   * @notice Whether `a` is greater than `b`.\\n   * @param a an int256.\\n   * @param b a FixedPoint.Signed.\\n   * @return True if `a > b`, or False.\\n   */\\n  function isGreaterThan(int256 a, Signed memory b) internal pure returns (bool) {\\n    return fromUnscaledInt(a).rawValue > b.rawValue;\\n  }\\n\\n  /**\\n   * @notice Whether `a` is greater than or equal to `b`.\\n   * @param a a FixedPoint.Signed.\\n   * @param b a FixedPoint.Signed.\\n   * @return True if `a >= b`, or False.\\n   */\\n  function isGreaterThanOrEqual(Signed memory a, Signed memory b) internal pure returns (bool) {\\n    return a.rawValue >= b.rawValue;\\n  }\\n\\n  /**\\n   * @notice Whether `a` is greater than or equal to `b`.\\n   * @param a a FixedPoint.Signed.\\n   * @param b an int256.\\n   * @return True if `a >= b`, or False.\\n   */\\n  function isGreaterThanOrEqual(Signed memory a, int256 b) internal pure returns (bool) {\\n    return a.rawValue >= fromUnscaledInt(b).rawValue;\\n  }\\n\\n  /**\\n   * @notice Whether `a` is greater than or equal to `b`.\\n   * @param a an int256.\\n   * @param b a FixedPoint.Signed.\\n   * @return True if `a >= b`, or False.\\n   */\\n  function isGreaterThanOrEqual(int256 a, Signed memory b) internal pure returns (bool) {\\n    return fromUnscaledInt(a).rawValue >= b.rawValue;\\n  }\\n\\n  /**\\n   * @notice Whether `a` is less than `b`.\\n   * @param a a FixedPoint.Signed.\\n   * @param b a FixedPoint.Signed.\\n   * @return True if `a < b`, or False.\\n   */\\n  function isLessThan(Signed memory a, Signed memory b) internal pure returns (bool) {\\n    return a.rawValue < b.rawValue;\\n  }\\n\\n  /**\\n   * @notice Whether `a` is less than `b`.\\n   * @param a a FixedPoint.Signed.\\n   * @param b an int256.\\n   * @return True if `a < b`, or False.\\n   */\\n  function isLessThan(Signed memory a, int256 b) internal pure returns (bool) {\\n    return a.rawValue < fromUnscaledInt(b).rawValue;\\n  }\\n\\n  /**\\n   * @notice Whether `a` is less than `b`.\\n   * @param a an int256.\\n   * @param b a FixedPoint.Signed.\\n   * @return True if `a < b`, or False.\\n   */\\n  function isLessThan(int256 a, Signed memory b) internal pure returns (bool) {\\n    return fromUnscaledInt(a).rawValue < b.rawValue;\\n  }\\n\\n  /**\\n   * @notice Whether `a` is less than or equal to `b`.\\n   * @param a a FixedPoint.Signed.\\n   * @param b a FixedPoint.Signed.\\n   * @return True if `a <= b`, or False.\\n   */\\n  function isLessThanOrEqual(Signed memory a, Signed memory b) internal pure returns (bool) {\\n    return a.rawValue <= b.rawValue;\\n  }\\n\\n  /**\\n   * @notice Whether `a` is less than or equal to `b`.\\n   * @param a a FixedPoint.Signed.\\n   * @param b an int256.\\n   * @return True if `a <= b`, or False.\\n   */\\n  function isLessThanOrEqual(Signed memory a, int256 b) internal pure returns (bool) {\\n    return a.rawValue <= fromUnscaledInt(b).rawValue;\\n  }\\n\\n  /**\\n   * @notice Whether `a` is less than or equal to `b`.\\n   * @param a an int256.\\n   * @param b a FixedPoint.Signed.\\n   * @return True if `a <= b`, or False.\\n   */\\n  function isLessThanOrEqual(int256 a, Signed memory b) internal pure returns (bool) {\\n    return fromUnscaledInt(a).rawValue <= b.rawValue;\\n  }\\n\\n  /**\\n   * @notice The minimum of `a` and `b`.\\n   * @param a a FixedPoint.Signed.\\n   * @param b a FixedPoint.Signed.\\n   * @return the minimum of `a` and `b`.\\n   */\\n  function min(Signed memory a, Signed memory b) internal pure returns (Signed memory) {\\n    return a.rawValue < b.rawValue ? a : b;\\n  }\\n\\n  /**\\n   * @notice The maximum of `a` and `b`.\\n   * @param a a FixedPoint.Signed.\\n   * @param b a FixedPoint.Signed.\\n   * @return the maximum of `a` and `b`.\\n   */\\n  function max(Signed memory a, Signed memory b) internal pure returns (Signed memory) {\\n    return a.rawValue > b.rawValue ? a : b;\\n  }\\n\\n  /**\\n   * @notice Adds two `Signed`s, reverting on overflow.\\n   * @param a a FixedPoint.Signed.\\n   * @param b a FixedPoint.Signed.\\n   * @return the sum of `a` and `b`.\\n   */\\n  function add(Signed memory a, Signed memory b) internal pure returns (Signed memory) {\\n    return Signed(a.rawValue.add(b.rawValue));\\n  }\\n\\n  /**\\n   * @notice Adds an `Signed` to an unscaled int, reverting on overflow.\\n   * @param a a FixedPoint.Signed.\\n   * @param b an int256.\\n   * @return the sum of `a` and `b`.\\n   */\\n  function add(Signed memory a, int256 b) internal pure returns (Signed memory) {\\n    return add(a, fromUnscaledInt(b));\\n  }\\n\\n  /**\\n   * @notice Subtracts two `Signed`s, reverting on overflow.\\n   * @param a a FixedPoint.Signed.\\n   * @param b a FixedPoint.Signed.\\n   * @return the difference of `a` and `b`.\\n   */\\n  function sub(Signed memory a, Signed memory b) internal pure returns (Signed memory) {\\n    return Signed(a.rawValue.sub(b.rawValue));\\n  }\\n\\n  /**\\n   * @notice Subtracts an unscaled int256 from an `Signed`, reverting on overflow.\\n   * @param a a FixedPoint.Signed.\\n   * @param b an int256.\\n   * @return the difference of `a` and `b`.\\n   */\\n  function sub(Signed memory a, int256 b) internal pure returns (Signed memory) {\\n    return sub(a, fromUnscaledInt(b));\\n  }\\n\\n  /**\\n   * @notice Subtracts an `Signed` from an unscaled int256, reverting on overflow.\\n   * @param a an int256.\\n   * @param b a FixedPoint.Signed.\\n   * @return the difference of `a` and `b`.\\n   */\\n  function sub(int256 a, Signed memory b) internal pure returns (Signed memory) {\\n    return sub(fromUnscaledInt(a), b);\\n  }\\n\\n  /**\\n   * @notice Multiplies two `Signed`s, reverting on overflow.\\n   * @dev This will \\\"floor\\\" the product.\\n   * @param a a FixedPoint.Signed.\\n   * @param b a FixedPoint.Signed.\\n   * @return the product of `a` and `b`.\\n   */\\n  function mul(Signed memory a, Signed memory b) internal pure returns (Signed memory) {\\n    // There are two caveats with this computation:\\n    // 1. Max output for the represented number is ~10^41, otherwise an intermediate value overflows. 10^41 is\\n    // stored internally as an int256 ~10^59.\\n    // 2. Results that can't be represented exactly are truncated not rounded. E.g., 1.4 * 2e-18 = 2.8e-18, which\\n    // would round to 3, but this computation produces the result 2.\\n    // No need to use SafeMath because SFP_SCALING_FACTOR != 0.\\n    return Signed(a.rawValue.mul(b.rawValue) / SFP_SCALING_FACTOR);\\n  }\\n\\n  /**\\n   * @notice Multiplies an `Signed` and an unscaled int256, reverting on overflow.\\n   * @dev This will \\\"floor\\\" the product.\\n   * @param a a FixedPoint.Signed.\\n   * @param b an int256.\\n   * @return the product of `a` and `b`.\\n   */\\n  function mul(Signed memory a, int256 b) internal pure returns (Signed memory) {\\n    return Signed(a.rawValue.mul(b));\\n  }\\n\\n  /**\\n   * @notice Multiplies two `Signed`s and \\\"ceil's\\\" the product, reverting on overflow.\\n   * @param a a FixedPoint.Signed.\\n   * @param b a FixedPoint.Signed.\\n   * @return the product of `a` and `b`.\\n   */\\n  function mulAwayFromZero(Signed memory a, Signed memory b) internal pure returns (Signed memory) {\\n    int256 mulRaw = a.rawValue.mul(b.rawValue);\\n    int256 mulTowardsZero = mulRaw / SFP_SCALING_FACTOR;\\n    // Manual mod because SignedSafeMath doesn't support it.\\n    int256 mod = mulRaw % SFP_SCALING_FACTOR;\\n    if (mod != 0) {\\n      bool isResultPositive = isLessThan(a, 0) == isLessThan(b, 0);\\n      int256 valueToAdd = isResultPositive ? int256(1) : int256(-1);\\n      return Signed(mulTowardsZero.add(valueToAdd));\\n    } else {\\n      return Signed(mulTowardsZero);\\n    }\\n  }\\n\\n  /**\\n   * @notice Multiplies an `Signed` and an unscaled int256 and \\\"ceil's\\\" the product, reverting on overflow.\\n   * @param a a FixedPoint.Signed.\\n   * @param b a FixedPoint.Signed.\\n   * @return the product of `a` and `b`.\\n   */\\n  function mulAwayFromZero(Signed memory a, int256 b) internal pure returns (Signed memory) {\\n    // Since b is an int, there is no risk of truncation and we can just mul it normally\\n    return Signed(a.rawValue.mul(b));\\n  }\\n\\n  /**\\n   * @notice Divides one `Signed` by an `Signed`, reverting on overflow or division by 0.\\n   * @dev This will \\\"floor\\\" the quotient.\\n   * @param a a FixedPoint numerator.\\n   * @param b a FixedPoint denominator.\\n   * @return the quotient of `a` divided by `b`.\\n   */\\n  function div(Signed memory a, Signed memory b) internal pure returns (Signed memory) {\\n    // There are two caveats with this computation:\\n    // 1. Max value for the number dividend `a` represents is ~10^41, otherwise an intermediate value overflows.\\n    // 10^41 is stored internally as an int256 10^59.\\n    // 2. Results that can't be represented exactly are truncated not rounded. E.g., 2 / 3 = 0.6 repeating, which\\n    // would round to 0.666666666666666667, but this computation produces the result 0.666666666666666666.\\n    return Signed(a.rawValue.mul(SFP_SCALING_FACTOR).div(b.rawValue));\\n  }\\n\\n  /**\\n   * @notice Divides one `Signed` by an unscaled int256, reverting on overflow or division by 0.\\n   * @dev This will \\\"floor\\\" the quotient.\\n   * @param a a FixedPoint numerator.\\n   * @param b an int256 denominator.\\n   * @return the quotient of `a` divided by `b`.\\n   */\\n  function div(Signed memory a, int256 b) internal pure returns (Signed memory) {\\n    return Signed(a.rawValue.div(b));\\n  }\\n\\n  /**\\n   * @notice Divides one unscaled int256 by an `Signed`, reverting on overflow or division by 0.\\n   * @dev This will \\\"floor\\\" the quotient.\\n   * @param a an int256 numerator.\\n   * @param b a FixedPoint denominator.\\n   * @return the quotient of `a` divided by `b`.\\n   */\\n  function div(int256 a, Signed memory b) internal pure returns (Signed memory) {\\n    return div(fromUnscaledInt(a), b);\\n  }\\n\\n  /**\\n   * @notice Divides one `Signed` by an `Signed` and \\\"ceil's\\\" the quotient, reverting on overflow or division by 0.\\n   * @param a a FixedPoint numerator.\\n   * @param b a FixedPoint denominator.\\n   * @return the quotient of `a` divided by `b`.\\n   */\\n  function divAwayFromZero(Signed memory a, Signed memory b) internal pure returns (Signed memory) {\\n    int256 aScaled = a.rawValue.mul(SFP_SCALING_FACTOR);\\n    int256 divTowardsZero = aScaled.div(b.rawValue);\\n    // Manual mod because SignedSafeMath doesn't support it.\\n    int256 mod = aScaled % b.rawValue;\\n    if (mod != 0) {\\n      bool isResultPositive = isLessThan(a, 0) == isLessThan(b, 0);\\n      int256 valueToAdd = isResultPositive ? int256(1) : int256(-1);\\n      return Signed(divTowardsZero.add(valueToAdd));\\n    } else {\\n      return Signed(divTowardsZero);\\n    }\\n  }\\n\\n  /**\\n   * @notice Divides one `Signed` by an unscaled int256 and \\\"ceil's\\\" the quotient, reverting on overflow or division by 0.\\n   * @param a a FixedPoint numerator.\\n   * @param b an int256 denominator.\\n   * @return the quotient of `a` divided by `b`.\\n   */\\n  function divAwayFromZero(Signed memory a, int256 b) internal pure returns (Signed memory) {\\n    // Because it is possible that a quotient gets truncated, we can't just call \\\"Signed(a.rawValue.div(b))\\\"\\n    // similarly to mulCeil with an int256 as the second parameter. Therefore we need to convert b into an Signed.\\n    // This creates the possibility of overflow if b is very large.\\n    return divAwayFromZero(a, fromUnscaledInt(b));\\n  }\\n\\n  /**\\n   * @notice Raises an `Signed` to the power of an unscaled uint256, reverting on overflow. E.g., `b=2` squares `a`.\\n   * @dev This will \\\"floor\\\" the result.\\n   * @param a a FixedPoint.Signed.\\n   * @param b a uint256 (negative exponents are not allowed).\\n   * @return output is `a` to the power of `b`.\\n   */\\n  function pow(Signed memory a, uint256 b) internal pure returns (Signed memory output) {\\n    output = fromUnscaledInt(1);\\n    for (uint256 i = 0; i < b; i = i.add(1)) {\\n      output = mul(output, a);\\n    }\\n  }\\n}\\n\",\"keccak256\":\"0x36f2dc0c18a1ad4363388d19a70c852d84914af7a83fc88cdb3e759bafcb921c\",\"license\":\"AGPL-3.0-only\"},\"contracts/interfaces/IBackerRewards.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.6.12;\\npragma experimental ABIEncoderV2;\\n\\ninterface IBackerRewards {\\n  function allocateRewards(uint256 _interestPaymentAmount) external;\\n\\n  function onTranchedPoolDrawdown(uint256 sliceIndex) external;\\n\\n  function setPoolTokenAccRewardsPerPrincipalDollarAtMint(address poolAddress, uint256 tokenId) external;\\n}\\n\",\"keccak256\":\"0x6d315e4b40e24250078fd1ef037a50bb248dbaf955be2270246ccfb3c886964f\",\"license\":\"MIT\"},\"contracts/interfaces/ICUSDCContract.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// Taken from https://github.com/compound-finance/compound-protocol/blob/master/contracts/CTokenInterfaces.sol\\npragma solidity 0.6.12;\\npragma experimental ABIEncoderV2;\\n\\nimport \\\"./IERC20withDec.sol\\\";\\n\\ninterface ICUSDCContract is IERC20withDec {\\n  /*** User Interface ***/\\n\\n  function mint(uint256 mintAmount) external returns (uint256);\\n\\n  function redeem(uint256 redeemTokens) external returns (uint256);\\n\\n  function redeemUnderlying(uint256 redeemAmount) external returns (uint256);\\n\\n  function borrow(uint256 borrowAmount) external returns (uint256);\\n\\n  function repayBorrow(uint256 repayAmount) external returns (uint256);\\n\\n  function repayBorrowBehalf(address borrower, uint256 repayAmount) external returns (uint256);\\n\\n  function liquidateBorrow(\\n    address borrower,\\n    uint256 repayAmount,\\n    address cTokenCollateral\\n  ) external returns (uint256);\\n\\n  function getAccountSnapshot(address account)\\n    external\\n    view\\n    returns (\\n      uint256,\\n      uint256,\\n      uint256,\\n      uint256\\n    );\\n\\n  function balanceOfUnderlying(address owner) external returns (uint256);\\n\\n  function exchangeRateCurrent() external returns (uint256);\\n\\n  /*** Admin Functions ***/\\n\\n  function _addReserves(uint256 addAmount) external returns (uint256);\\n}\\n\",\"keccak256\":\"0x6d2cc9d84c55c0aa2f766aa3cc6371cdc7cf040e88e4f6a34ba1f6d40e2e0b5a\",\"license\":\"MIT\"},\"contracts/interfaces/ICreditLine.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.6.12;\\npragma experimental ABIEncoderV2;\\n\\ninterface ICreditLine {\\n  function borrower() external view returns (address);\\n\\n  function limit() external view returns (uint256);\\n\\n  function maxLimit() external view returns (uint256);\\n\\n  function interestApr() external view returns (uint256);\\n\\n  function paymentPeriodInDays() external view returns (uint256);\\n\\n  function principalGracePeriodInDays() external view returns (uint256);\\n\\n  function termInDays() external view returns (uint256);\\n\\n  function lateFeeApr() external view returns (uint256);\\n\\n  function isLate() external view returns (bool);\\n\\n  function withinPrincipalGracePeriod() external view returns (bool);\\n\\n  // Accounting variables\\n  function balance() external view returns (uint256);\\n\\n  function interestOwed() external view returns (uint256);\\n\\n  function principalOwed() external view returns (uint256);\\n\\n  function termEndTime() external view returns (uint256);\\n\\n  function nextDueTime() external view returns (uint256);\\n\\n  function interestAccruedAsOf() external view returns (uint256);\\n\\n  function lastFullPaymentTime() external view returns (uint256);\\n}\\n\",\"keccak256\":\"0x09e43bbbca3f80c1c1dfc588dfe365792b89e9267026b01408b7ddf6b035c21a\",\"license\":\"MIT\"},\"contracts/interfaces/ICurveLP.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// Taken from https://github.com/compound-finance/compound-protocol/blob/master/contracts/CTokenInterfaces.sol\\npragma solidity 0.6.12;\\npragma experimental ABIEncoderV2;\\n\\ninterface ICurveLP {\\n  function coins(uint256) external view returns (address);\\n\\n  function token() external view returns (address);\\n\\n  function calc_token_amount(uint256[2] calldata amounts) external view returns (uint256);\\n\\n  function lp_price() external view returns (uint256);\\n\\n  function add_liquidity(\\n    uint256[2] calldata amounts,\\n    uint256 min_mint_amount,\\n    bool use_eth,\\n    address receiver\\n  ) external returns (uint256);\\n\\n  function remove_liquidity(uint256 _amount, uint256[2] calldata min_amounts) external returns (uint256);\\n\\n  function remove_liquidity_one_coin(\\n    uint256 token_amount,\\n    uint256 i,\\n    uint256 min_amount\\n  ) external returns (uint256);\\n\\n  function get_dy(\\n    uint256 i,\\n    uint256 j,\\n    uint256 dx\\n  ) external view returns (uint256);\\n\\n  function exchange(\\n    uint256 i,\\n    uint256 j,\\n    uint256 dx,\\n    uint256 min_dy\\n  ) external returns (uint256);\\n\\n  function balances(uint256 arg0) external view returns (uint256);\\n}\\n\",\"keccak256\":\"0x51b2ae8c51be7c4f552ec212464515ff40cc13c8e13b58f4cc24ed8c53070d13\",\"license\":\"MIT\"},\"contracts/interfaces/IERC20withDec.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.6.12;\\npragma experimental ABIEncoderV2;\\n\\nimport {IERC20} from \\\"@openzeppelin/contracts-ethereum-package/contracts/token/ERC20/IERC20.sol\\\";\\n\\n/*\\nOnly addition is the `decimals` function, which we need, and which both our Fidu and USDC use, along with most ERC20's.\\n*/\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20withDec is IERC20 {\\n  /**\\n   * @dev Returns the number of decimals used for the token\\n   */\\n  function decimals() external view returns (uint8);\\n}\\n\",\"keccak256\":\"0xaf734eccc1c230f942714a1a550d28aebc268aac0fa2e88018e21a6a8c34ddd2\",\"license\":\"MIT\"},\"contracts/interfaces/IFidu.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.6.12;\\npragma experimental ABIEncoderV2;\\n\\nimport \\\"./IERC20withDec.sol\\\";\\n\\ninterface IFidu is IERC20withDec {\\n  function mintTo(address to, uint256 amount) external;\\n\\n  function burnFrom(address to, uint256 amount) external;\\n\\n  function renounceRole(bytes32 role, address account) external;\\n}\\n\",\"keccak256\":\"0x130a7bd2ddca4f9da2f9090cbcc1d63c1e21e152baca4779f18939977a5f6c04\",\"license\":\"MIT\"},\"contracts/interfaces/IGo.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.6.12;\\npragma experimental ABIEncoderV2;\\n\\nabstract contract IGo {\\n  uint256 public constant ID_TYPE_0 = 0;\\n  uint256 public constant ID_TYPE_1 = 1;\\n  uint256 public constant ID_TYPE_2 = 2;\\n  uint256 public constant ID_TYPE_3 = 3;\\n  uint256 public constant ID_TYPE_4 = 4;\\n  uint256 public constant ID_TYPE_5 = 5;\\n  uint256 public constant ID_TYPE_6 = 6;\\n  uint256 public constant ID_TYPE_7 = 7;\\n  uint256 public constant ID_TYPE_8 = 8;\\n  uint256 public constant ID_TYPE_9 = 9;\\n  uint256 public constant ID_TYPE_10 = 10;\\n\\n  /// @notice Returns the address of the UniqueIdentity contract.\\n  function uniqueIdentity() external virtual returns (address);\\n\\n  function go(address account) public view virtual returns (bool);\\n\\n  function goOnlyIdTypes(address account, uint256[] calldata onlyIdTypes) public view virtual returns (bool);\\n\\n  function goSeniorPool(address account) public view virtual returns (bool);\\n}\\n\",\"keccak256\":\"0x74776a808df49bd56fd25ea8d6983865e6d17519b542f4d58e44e1a71a720b6d\",\"license\":\"MIT\"},\"contracts/interfaces/IGoldfinchConfig.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.6.12;\\npragma experimental ABIEncoderV2;\\n\\ninterface IGoldfinchConfig {\\n  function getNumber(uint256 index) external returns (uint256);\\n\\n  function getAddress(uint256 index) external returns (address);\\n\\n  function setAddress(uint256 index, address newAddress) external returns (address);\\n\\n  function setNumber(uint256 index, uint256 newNumber) external returns (uint256);\\n}\\n\",\"keccak256\":\"0xb4df9680fa1db27f4204d24cd15af68a73c81b62f83c2ca6d3ee6b0a98bc7da9\",\"license\":\"MIT\"},\"contracts/interfaces/IGoldfinchFactory.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.6.12;\\npragma experimental ABIEncoderV2;\\n\\ninterface IGoldfinchFactory {\\n  function createCreditLine() external returns (address);\\n\\n  function createBorrower(address owner) external returns (address);\\n\\n  function createPool(\\n    address _borrower,\\n    uint256 _juniorFeePercent,\\n    uint256 _limit,\\n    uint256 _interestApr,\\n    uint256 _paymentPeriodInDays,\\n    uint256 _termInDays,\\n    uint256 _lateFeeApr,\\n    uint256[] calldata _allowedUIDTypes\\n  ) external returns (address);\\n\\n  function createMigratedPool(\\n    address _borrower,\\n    uint256 _juniorFeePercent,\\n    uint256 _limit,\\n    uint256 _interestApr,\\n    uint256 _paymentPeriodInDays,\\n    uint256 _termInDays,\\n    uint256 _lateFeeApr,\\n    uint256[] calldata _allowedUIDTypes\\n  ) external returns (address);\\n}\\n\",\"keccak256\":\"0x162686cd6edb6fbfd9f50549cc6d12dcfce0dfc97c4c6a9d134d742d3de193d9\",\"license\":\"MIT\"},\"contracts/interfaces/IPoolTokens.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.6.12;\\npragma experimental ABIEncoderV2;\\n\\nimport \\\"@openzeppelin/contracts-ethereum-package/contracts/token/ERC721/IERC721.sol\\\";\\n\\ninterface IPoolTokens is IERC721 {\\n  event TokenMinted(\\n    address indexed owner,\\n    address indexed pool,\\n    uint256 indexed tokenId,\\n    uint256 amount,\\n    uint256 tranche\\n  );\\n\\n  event TokenRedeemed(\\n    address indexed owner,\\n    address indexed pool,\\n    uint256 indexed tokenId,\\n    uint256 principalRedeemed,\\n    uint256 interestRedeemed,\\n    uint256 tranche\\n  );\\n  event TokenBurned(address indexed owner, address indexed pool, uint256 indexed tokenId);\\n\\n  struct TokenInfo {\\n    address pool;\\n    uint256 tranche;\\n    uint256 principalAmount;\\n    uint256 principalRedeemed;\\n    uint256 interestRedeemed;\\n  }\\n\\n  struct MintParams {\\n    uint256 principalAmount;\\n    uint256 tranche;\\n  }\\n\\n  function mint(MintParams calldata params, address to) external returns (uint256);\\n\\n  function redeem(\\n    uint256 tokenId,\\n    uint256 principalRedeemed,\\n    uint256 interestRedeemed\\n  ) external;\\n\\n  function withdrawPrincipal(uint256 tokenId, uint256 principalAmount) external;\\n\\n  function burn(uint256 tokenId) external;\\n\\n  function onPoolCreated(address newPool) external;\\n\\n  function getTokenInfo(uint256 tokenId) external view returns (TokenInfo memory);\\n\\n  function validPool(address sender) external view returns (bool);\\n\\n  function isApprovedOrOwner(address spender, uint256 tokenId) external view returns (bool);\\n}\\n\",\"keccak256\":\"0xde447b1c8018dae988b90f93aeba62fe203a6aa822bf524c916233ce81d4ed04\",\"license\":\"MIT\"},\"contracts/interfaces/IRequiresUID.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.6.12;\\npragma experimental ABIEncoderV2;\\n\\ninterface IRequiresUID {\\n  function hasAllowedUID(address sender) external view returns (bool);\\n}\\n\",\"keccak256\":\"0x8c901503d2930474aa490f97e3947fbb079a61211cdf5480ae2d5cda5854bfed\",\"license\":\"MIT\"},\"contracts/interfaces/ISeniorPool.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.6.12;\\npragma experimental ABIEncoderV2;\\n\\nimport \\\"./ITranchedPool.sol\\\";\\n\\nabstract contract ISeniorPool {\\n  uint256 public sharePrice;\\n  uint256 public totalLoansOutstanding;\\n  uint256 public totalWritedowns;\\n\\n  function deposit(uint256 amount) external virtual returns (uint256 depositShares);\\n\\n  function depositWithPermit(\\n    uint256 amount,\\n    uint256 deadline,\\n    uint8 v,\\n    bytes32 r,\\n    bytes32 s\\n  ) external virtual returns (uint256 depositShares);\\n\\n  function withdraw(uint256 usdcAmount) external virtual returns (uint256 amount);\\n\\n  function withdrawInFidu(uint256 fiduAmount) external virtual returns (uint256 amount);\\n\\n  function sweepToCompound() public virtual;\\n\\n  function sweepFromCompound() public virtual;\\n\\n  function invest(ITranchedPool pool) public virtual;\\n\\n  function estimateInvestment(ITranchedPool pool) public view virtual returns (uint256);\\n\\n  function redeem(uint256 tokenId) public virtual;\\n\\n  function writedown(uint256 tokenId) public virtual;\\n\\n  function calculateWritedown(uint256 tokenId) public view virtual returns (uint256 writedownAmount);\\n\\n  function assets() public view virtual returns (uint256);\\n\\n  function getNumShares(uint256 amount) public view virtual returns (uint256);\\n}\\n\",\"keccak256\":\"0xe514d470a9cb73449976c92844c4a587eea90980153af70e223bc9d6854c2497\",\"license\":\"MIT\"},\"contracts/interfaces/ISeniorPoolStrategy.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.6.12;\\npragma experimental ABIEncoderV2;\\n\\nimport \\\"./ISeniorPool.sol\\\";\\nimport \\\"./ITranchedPool.sol\\\";\\n\\nabstract contract ISeniorPoolStrategy {\\n  function getLeverageRatio(ITranchedPool pool) public view virtual returns (uint256);\\n\\n  function invest(ISeniorPool seniorPool, ITranchedPool pool) public view virtual returns (uint256 amount);\\n\\n  function estimateInvestment(ISeniorPool seniorPool, ITranchedPool pool) public view virtual returns (uint256);\\n}\\n\",\"keccak256\":\"0x96897152c52e299397a50aeb6aefe5af19fb1152d7dd15a1b29fb21faecb45d7\",\"license\":\"MIT\"},\"contracts/interfaces/IStakingRewards.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.6.12;\\npragma experimental ABIEncoderV2;\\n\\nimport \\\"../library/StakingRewardsVesting.sol\\\";\\n\\n/// @notice Indicates which ERC20 is staked\\nenum StakedPositionType {\\n  Fidu,\\n  CurveLP\\n}\\n\\nstruct StakedPosition {\\n  // @notice Staked amount denominated in `stakingToken().decimals()`\\n  uint256 amount;\\n  // @notice Struct describing rewards owed with vesting\\n  StakingRewardsVesting.Rewards rewards;\\n  // @notice Multiplier applied to staked amount when locking up position\\n  uint256 leverageMultiplier;\\n  // @notice Time in seconds after which position can be unstaked\\n  uint256 lockedUntil;\\n  // @notice Type of the staked position\\n  StakedPositionType positionType;\\n  // @notice Multiplier applied to staked amount to denominate in `baseStakingToken().decimals()`\\n  // @dev This field should not be used directly; it may be 0 for staked positions created prior to GIP-1.\\n  //  If you need this field, use `safeEffectiveMultiplier()`, which correctly handles old staked positions.\\n  uint256 unsafeEffectiveMultiplier;\\n  // @notice Exchange rate applied to staked amount to denominate in `baseStakingToken().decimals()`\\n  // @dev This field should not be used directly; it may be 0 for staked positions created prior to GIP-1.\\n  //  If you need this field, use `safeBaseTokenExchangeRate()`, which correctly handles old staked positions.\\n  uint256 unsafeBaseTokenExchangeRate;\\n}\\n\\ninterface IStakingRewards {\\n  function getPosition(uint256 tokenId) external view returns (StakedPosition memory position);\\n\\n  function unstake(uint256 tokenId, uint256 amount) external;\\n\\n  function addToStake(uint256 tokenId, uint256 amount) external;\\n\\n  function stakedBalanceOf(uint256 tokenId) external view returns (uint256);\\n\\n  function depositToCurveAndStakeFrom(\\n    address nftRecipient,\\n    uint256 fiduAmount,\\n    uint256 usdcAmount\\n  ) external;\\n\\n  function kick(uint256 tokenId) external;\\n\\n  function accumulatedRewardsPerToken() external view returns (uint256);\\n\\n  function lastUpdateTime() external view returns (uint256);\\n}\\n\",\"keccak256\":\"0xec4accd7578d303fd7b3be6f56a321efc078ec937a73d8e6ddcd3d18e06d8b6d\",\"license\":\"MIT\"},\"contracts/interfaces/ITranchedPool.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.6.12;\\npragma experimental ABIEncoderV2;\\n\\nimport {IV2CreditLine} from \\\"./IV2CreditLine.sol\\\";\\n\\nabstract contract ITranchedPool {\\n  IV2CreditLine public creditLine;\\n  uint256 public createdAt;\\n  enum Tranches {\\n    Reserved,\\n    Senior,\\n    Junior\\n  }\\n\\n  struct TrancheInfo {\\n    uint256 id;\\n    uint256 principalDeposited;\\n    uint256 principalSharePrice;\\n    uint256 interestSharePrice;\\n    uint256 lockedUntil;\\n  }\\n\\n  struct PoolSlice {\\n    TrancheInfo seniorTranche;\\n    TrancheInfo juniorTranche;\\n    uint256 totalInterestAccrued;\\n    uint256 principalDeployed;\\n  }\\n\\n  function initialize(\\n    address _config,\\n    address _borrower,\\n    uint256 _juniorFeePercent,\\n    uint256 _limit,\\n    uint256 _interestApr,\\n    uint256 _paymentPeriodInDays,\\n    uint256 _termInDays,\\n    uint256 _lateFeeApr,\\n    uint256 _principalGracePeriodInDays,\\n    uint256 _fundableAt,\\n    uint256[] calldata _allowedUIDTypes\\n  ) public virtual;\\n\\n  function getTranche(uint256 tranche) external view virtual returns (TrancheInfo memory);\\n\\n  function pay(uint256 amount) external virtual;\\n\\n  function poolSlices(uint256 index) external view virtual returns (PoolSlice memory);\\n\\n  function lockJuniorCapital() external virtual;\\n\\n  function lockPool() external virtual;\\n\\n  function initializeNextSlice(uint256 _fundableAt) external virtual;\\n\\n  function totalJuniorDeposits() external view virtual returns (uint256);\\n\\n  function drawdown(uint256 amount) external virtual;\\n\\n  function setFundableAt(uint256 timestamp) external virtual;\\n\\n  function deposit(uint256 tranche, uint256 amount) external virtual returns (uint256 tokenId);\\n\\n  function assess() external virtual;\\n\\n  function depositWithPermit(\\n    uint256 tranche,\\n    uint256 amount,\\n    uint256 deadline,\\n    uint8 v,\\n    bytes32 r,\\n    bytes32 s\\n  ) external virtual returns (uint256 tokenId);\\n\\n  function availableToWithdraw(uint256 tokenId)\\n    external\\n    view\\n    virtual\\n    returns (uint256 interestRedeemable, uint256 principalRedeemable);\\n\\n  function withdraw(uint256 tokenId, uint256 amount)\\n    external\\n    virtual\\n    returns (uint256 interestWithdrawn, uint256 principalWithdrawn);\\n\\n  function withdrawMax(uint256 tokenId)\\n    external\\n    virtual\\n    returns (uint256 interestWithdrawn, uint256 principalWithdrawn);\\n\\n  function withdrawMultiple(uint256[] calldata tokenIds, uint256[] calldata amounts) external virtual;\\n\\n  function numSlices() external view virtual returns (uint256);\\n}\\n\",\"keccak256\":\"0xb2c6b1201c929b64c17a0f9910234aaf914c411b6f7a488675bdc736751273c5\",\"license\":\"MIT\"},\"contracts/interfaces/IV2CreditLine.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.6.12;\\npragma experimental ABIEncoderV2;\\n\\nimport \\\"./ICreditLine.sol\\\";\\n\\nabstract contract IV2CreditLine is ICreditLine {\\n  function principal() external view virtual returns (uint256);\\n\\n  function totalInterestAccrued() external view virtual returns (uint256);\\n\\n  function termStartTime() external view virtual returns (uint256);\\n\\n  function setLimit(uint256 newAmount) external virtual;\\n\\n  function setMaxLimit(uint256 newAmount) external virtual;\\n\\n  function setBalance(uint256 newBalance) external virtual;\\n\\n  function setPrincipal(uint256 _principal) external virtual;\\n\\n  function setTotalInterestAccrued(uint256 _interestAccrued) external virtual;\\n\\n  function drawdown(uint256 amount) external virtual;\\n\\n  function assess()\\n    external\\n    virtual\\n    returns (\\n      uint256,\\n      uint256,\\n      uint256\\n    );\\n\\n  function initialize(\\n    address _config,\\n    address owner,\\n    address _borrower,\\n    uint256 _limit,\\n    uint256 _interestApr,\\n    uint256 _paymentPeriodInDays,\\n    uint256 _termInDays,\\n    uint256 _lateFeeApr,\\n    uint256 _principalGracePeriodInDays\\n  ) public virtual;\\n\\n  function setTermEndTime(uint256 newTermEndTime) external virtual;\\n\\n  function setNextDueTime(uint256 newNextDueTime) external virtual;\\n\\n  function setInterestOwed(uint256 newInterestOwed) external virtual;\\n\\n  function setPrincipalOwed(uint256 newPrincipalOwed) external virtual;\\n\\n  function setInterestAccruedAsOf(uint256 newInterestAccruedAsOf) external virtual;\\n\\n  function setWritedownAmount(uint256 newWritedownAmount) external virtual;\\n\\n  function setLastFullPaymentTime(uint256 newLastFullPaymentTime) external virtual;\\n\\n  function setLateFeeApr(uint256 newLateFeeApr) external virtual;\\n}\\n\",\"keccak256\":\"0x494c72e18454bd0fc38793849f904e8c7ebe6ce9e6693c1ebf7691a1dcd0a50a\",\"license\":\"MIT\"},\"contracts/interfaces/IVersioned.sol\":{\"content\":\"\\n// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.12;\\npragma experimental ABIEncoderV2;\\n\\n/// @title interface for implementers that have an arbitrary associated tag\\ninterface IVersioned {\\n  /// @notice Returns the version triplet `[major, minor, patch]`\\n  function getVersion() external pure returns (uint8[3] memory);\\n}\",\"keccak256\":\"0xe50875386e1cffab693128f6217e9d42dad1afbbf24590e5aa4c8cebef20f98b\",\"license\":\"MIT\"},\"contracts/library/SafeERC20Transfer.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.6.12;\\npragma experimental ABIEncoderV2;\\n\\nimport \\\"@openzeppelin/contracts-ethereum-package/contracts/token/ERC20/IERC20.sol\\\";\\n\\n/**\\n * @title Safe ERC20 Transfer\\n * @notice Reverts when transfer is not successful\\n * @author Goldfinch\\n */\\nlibrary SafeERC20Transfer {\\n  function safeERC20Transfer(\\n    IERC20 erc20,\\n    address to,\\n    uint256 amount,\\n    string memory message\\n  ) internal {\\n    /// @dev ZERO address\\n    require(to != address(0), \\\"ZERO\\\");\\n    bool success = erc20.transfer(to, amount);\\n    require(success, message);\\n  }\\n\\n  function safeERC20Transfer(\\n    IERC20 erc20,\\n    address to,\\n    uint256 amount\\n  ) internal {\\n    safeERC20Transfer(erc20, to, amount, \\\"\\\");\\n  }\\n\\n  function safeERC20TransferFrom(\\n    IERC20 erc20,\\n    address from,\\n    address to,\\n    uint256 amount,\\n    string memory message\\n  ) internal {\\n    require(to != address(0), \\\"ZERO\\\");\\n    bool success = erc20.transferFrom(from, to, amount);\\n    require(success, message);\\n  }\\n\\n  function safeERC20TransferFrom(\\n    IERC20 erc20,\\n    address from,\\n    address to,\\n    uint256 amount\\n  ) internal {\\n    safeERC20TransferFrom(erc20, from, to, amount, \\\"\\\");\\n  }\\n\\n  function safeERC20Approve(\\n    IERC20 erc20,\\n    address spender,\\n    uint256 allowance,\\n    string memory message\\n  ) internal {\\n    bool success = erc20.approve(spender, allowance);\\n    require(success, message);\\n  }\\n\\n  function safeERC20Approve(\\n    IERC20 erc20,\\n    address spender,\\n    uint256 allowance\\n  ) internal {\\n    safeERC20Approve(erc20, spender, allowance, \\\"\\\");\\n  }\\n}\\n\",\"keccak256\":\"0x9e59a71e99cd46740e548b03843ee8c896f65533cd1bc7f1d46bd4f199228778\",\"license\":\"MIT\"},\"contracts/library/StakingRewardsVesting.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.6.12;\\npragma experimental ABIEncoderV2;\\n\\nimport \\\"@openzeppelin/contracts-ethereum-package/contracts/math/SafeMath.sol\\\";\\nimport \\\"@openzeppelin/contracts-ethereum-package/contracts/math/Math.sol\\\";\\n\\nlibrary StakingRewardsVesting {\\n  using SafeMath for uint256;\\n  using StakingRewardsVesting for Rewards;\\n\\n  uint256 internal constant PERCENTAGE_DECIMALS = 1e18;\\n\\n  struct Rewards {\\n    uint256 totalUnvested;\\n    uint256 totalVested;\\n    // @dev DEPRECATED (definition kept for storage slot)\\n    //   For legacy vesting positions, this was used in the case of slashing.\\n    //   For non-vesting positions, this is unused.\\n    uint256 totalPreviouslyVested;\\n    uint256 totalClaimed;\\n    uint256 startTime;\\n    // @dev DEPRECATED (definition kept for storage slot)\\n    //   For legacy vesting positions, this is the endTime of the vesting.\\n    //   For non-vesting positions, this is 0.\\n    uint256 endTime;\\n  }\\n\\n  function claim(Rewards storage rewards, uint256 reward) internal {\\n    rewards.totalClaimed = rewards.totalClaimed.add(reward);\\n  }\\n\\n  function claimable(Rewards storage rewards) internal view returns (uint256) {\\n    return rewards.totalVested.add(rewards.totalPreviouslyVested).sub(rewards.totalClaimed);\\n  }\\n\\n  function currentGrant(Rewards storage rewards) internal view returns (uint256) {\\n    return rewards.totalUnvested.add(rewards.totalVested);\\n  }\\n\\n  function checkpoint(Rewards storage rewards) internal {\\n    uint256 newTotalVested = totalVestedAt(rewards.startTime, rewards.endTime, block.timestamp, rewards.currentGrant());\\n\\n    if (newTotalVested > rewards.totalVested) {\\n      uint256 difference = newTotalVested.sub(rewards.totalVested);\\n      rewards.totalUnvested = rewards.totalUnvested.sub(difference);\\n      rewards.totalVested = newTotalVested;\\n    }\\n  }\\n\\n  function totalVestedAt(\\n    uint256 start,\\n    uint256 end,\\n    uint256 time,\\n    uint256 grantedAmount\\n  ) internal pure returns (uint256) {\\n    if (end <= start) {\\n      return grantedAmount;\\n    }\\n\\n    return Math.min(grantedAmount.mul(time.sub(start)).div(end.sub(start)), grantedAmount);\\n  }\\n}\\n\",\"keccak256\":\"0xdf964224079553091483b37cbc4a066259462f65192ab7664672da5e0c7334bc\",\"license\":\"MIT\"},\"contracts/protocol/core/BaseUpgradeablePausable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.6.12;\\npragma experimental ABIEncoderV2;\\n\\nimport \\\"@openzeppelin/contracts-ethereum-package/contracts/access/AccessControl.sol\\\";\\nimport \\\"@openzeppelin/contracts-ethereum-package/contracts/utils/ReentrancyGuard.sol\\\";\\nimport \\\"@openzeppelin/contracts-ethereum-package/contracts/Initializable.sol\\\";\\nimport \\\"@openzeppelin/contracts-ethereum-package/contracts/math/SafeMath.sol\\\";\\nimport \\\"./PauserPausable.sol\\\";\\n\\n/**\\n * @title BaseUpgradeablePausable contract\\n * @notice This is our Base contract that most other contracts inherit from. It includes many standard\\n *  useful abilities like upgradeability, pausability, access control, and re-entrancy guards.\\n * @author Goldfinch\\n */\\n\\ncontract BaseUpgradeablePausable is\\n  Initializable,\\n  AccessControlUpgradeSafe,\\n  PauserPausable,\\n  ReentrancyGuardUpgradeSafe\\n{\\n  bytes32 public constant OWNER_ROLE = keccak256(\\\"OWNER_ROLE\\\");\\n  using SafeMath for uint256;\\n  // Pre-reserving a few slots in the base contract in case we need to add things in the future.\\n  // This does not actually take up gas cost or storage cost, but it does reserve the storage slots.\\n  // See OpenZeppelin's use of this pattern here:\\n  // https://github.com/OpenZeppelin/openzeppelin-contracts-ethereum-package/blob/master/contracts/GSN/Context.sol#L37\\n  uint256[50] private __gap1;\\n  uint256[50] private __gap2;\\n  uint256[50] private __gap3;\\n  uint256[50] private __gap4;\\n\\n  // solhint-disable-next-line func-name-mixedcase\\n  function __BaseUpgradeablePausable__init(address owner) public initializer {\\n    require(owner != address(0), \\\"Owner cannot be the zero address\\\");\\n    __AccessControl_init_unchained();\\n    __Pausable_init_unchained();\\n    __ReentrancyGuard_init_unchained();\\n\\n    _setupRole(OWNER_ROLE, owner);\\n    _setupRole(PAUSER_ROLE, owner);\\n\\n    _setRoleAdmin(PAUSER_ROLE, OWNER_ROLE);\\n    _setRoleAdmin(OWNER_ROLE, OWNER_ROLE);\\n  }\\n\\n  function isAdmin() public view returns (bool) {\\n    return hasRole(OWNER_ROLE, _msgSender());\\n  }\\n\\n  modifier onlyAdmin() {\\n    require(isAdmin(), \\\"Must have admin role to perform this action\\\");\\n    _;\\n  }\\n}\\n\",\"keccak256\":\"0x555f6b770e8c9abbf90aa2d51f7f4c10161aa9f6ab6c3f0f4647cdbee8225c81\",\"license\":\"MIT\"},\"contracts/protocol/core/ConfigHelper.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.6.12;\\npragma experimental ABIEncoderV2;\\n\\nimport {ImplementationRepository} from \\\"./proxy/ImplementationRepository.sol\\\";\\nimport {ConfigOptions} from \\\"./ConfigOptions.sol\\\";\\nimport {GoldfinchConfig} from \\\"./GoldfinchConfig.sol\\\";\\nimport {IFidu} from \\\"../../interfaces/IFidu.sol\\\";\\nimport {ISeniorPool} from \\\"../../interfaces/ISeniorPool.sol\\\";\\nimport {ISeniorPoolStrategy} from \\\"../../interfaces/ISeniorPoolStrategy.sol\\\";\\nimport {IERC20withDec} from \\\"../../interfaces/IERC20withDec.sol\\\";\\nimport {ICUSDCContract} from \\\"../../interfaces/ICUSDCContract.sol\\\";\\nimport {IPoolTokens} from \\\"../../interfaces/IPoolTokens.sol\\\";\\nimport {IBackerRewards} from \\\"../../interfaces/IBackerRewards.sol\\\";\\nimport {IGoldfinchFactory} from \\\"../../interfaces/IGoldfinchFactory.sol\\\";\\nimport {IGo} from \\\"../../interfaces/IGo.sol\\\";\\nimport {IStakingRewards} from \\\"../../interfaces/IStakingRewards.sol\\\";\\nimport {ICurveLP} from \\\"../../interfaces/ICurveLP.sol\\\";\\n\\n/**\\n * @title ConfigHelper\\n * @notice A convenience library for getting easy access to other contracts and constants within the\\n *  protocol, through the use of the GoldfinchConfig contract\\n * @author Goldfinch\\n */\\n\\nlibrary ConfigHelper {\\n  function getSeniorPool(GoldfinchConfig config) internal view returns (ISeniorPool) {\\n    return ISeniorPool(seniorPoolAddress(config));\\n  }\\n\\n  function getSeniorPoolStrategy(GoldfinchConfig config) internal view returns (ISeniorPoolStrategy) {\\n    return ISeniorPoolStrategy(seniorPoolStrategyAddress(config));\\n  }\\n\\n  function getUSDC(GoldfinchConfig config) internal view returns (IERC20withDec) {\\n    return IERC20withDec(usdcAddress(config));\\n  }\\n\\n  function getFidu(GoldfinchConfig config) internal view returns (IFidu) {\\n    return IFidu(fiduAddress(config));\\n  }\\n\\n  function getFiduUSDCCurveLP(GoldfinchConfig config) internal view returns (ICurveLP) {\\n    return ICurveLP(fiduUSDCCurveLPAddress(config));\\n  }\\n\\n  function getCUSDCContract(GoldfinchConfig config) internal view returns (ICUSDCContract) {\\n    return ICUSDCContract(cusdcContractAddress(config));\\n  }\\n\\n  function getPoolTokens(GoldfinchConfig config) internal view returns (IPoolTokens) {\\n    return IPoolTokens(poolTokensAddress(config));\\n  }\\n\\n  function getBackerRewards(GoldfinchConfig config) internal view returns (IBackerRewards) {\\n    return IBackerRewards(backerRewardsAddress(config));\\n  }\\n\\n  function getGoldfinchFactory(GoldfinchConfig config) internal view returns (IGoldfinchFactory) {\\n    return IGoldfinchFactory(goldfinchFactoryAddress(config));\\n  }\\n\\n  function getGFI(GoldfinchConfig config) internal view returns (IERC20withDec) {\\n    return IERC20withDec(gfiAddress(config));\\n  }\\n\\n  function getGo(GoldfinchConfig config) internal view returns (IGo) {\\n    return IGo(goAddress(config));\\n  }\\n\\n  function getStakingRewards(GoldfinchConfig config) internal view returns (IStakingRewards) {\\n    return IStakingRewards(stakingRewardsAddress(config));\\n  }\\n\\n  function getTranchedPoolImplementationRepository(GoldfinchConfig config)\\n    internal\\n    view\\n    returns (ImplementationRepository)\\n  {\\n    return\\n      ImplementationRepository(\\n        config.getAddress(uint256(ConfigOptions.Addresses.TranchedPoolImplementationRepository))\\n      );\\n  }\\n\\n  function oneInchAddress(GoldfinchConfig config) internal view returns (address) {\\n    return config.getAddress(uint256(ConfigOptions.Addresses.OneInch));\\n  }\\n\\n  function creditLineImplementationAddress(GoldfinchConfig config) internal view returns (address) {\\n    return config.getAddress(uint256(ConfigOptions.Addresses.CreditLineImplementation));\\n  }\\n\\n  /// @dev deprecated because we no longer use GSN\\n  function trustedForwarderAddress(GoldfinchConfig config) internal view returns (address) {\\n    return config.getAddress(uint256(ConfigOptions.Addresses.TrustedForwarder));\\n  }\\n\\n  function configAddress(GoldfinchConfig config) internal view returns (address) {\\n    return config.getAddress(uint256(ConfigOptions.Addresses.GoldfinchConfig));\\n  }\\n\\n  function poolTokensAddress(GoldfinchConfig config) internal view returns (address) {\\n    return config.getAddress(uint256(ConfigOptions.Addresses.PoolTokens));\\n  }\\n\\n  function backerRewardsAddress(GoldfinchConfig config) internal view returns (address) {\\n    return config.getAddress(uint256(ConfigOptions.Addresses.BackerRewards));\\n  }\\n\\n  function seniorPoolAddress(GoldfinchConfig config) internal view returns (address) {\\n    return config.getAddress(uint256(ConfigOptions.Addresses.SeniorPool));\\n  }\\n\\n  function seniorPoolStrategyAddress(GoldfinchConfig config) internal view returns (address) {\\n    return config.getAddress(uint256(ConfigOptions.Addresses.SeniorPoolStrategy));\\n  }\\n\\n  function goldfinchFactoryAddress(GoldfinchConfig config) internal view returns (address) {\\n    return config.getAddress(uint256(ConfigOptions.Addresses.GoldfinchFactory));\\n  }\\n\\n  function gfiAddress(GoldfinchConfig config) internal view returns (address) {\\n    return config.getAddress(uint256(ConfigOptions.Addresses.GFI));\\n  }\\n\\n  function fiduAddress(GoldfinchConfig config) internal view returns (address) {\\n    return config.getAddress(uint256(ConfigOptions.Addresses.Fidu));\\n  }\\n\\n  function fiduUSDCCurveLPAddress(GoldfinchConfig config) internal view returns (address) {\\n    return config.getAddress(uint256(ConfigOptions.Addresses.FiduUSDCCurveLP));\\n  }\\n\\n  function cusdcContractAddress(GoldfinchConfig config) internal view returns (address) {\\n    return config.getAddress(uint256(ConfigOptions.Addresses.CUSDCContract));\\n  }\\n\\n  function usdcAddress(GoldfinchConfig config) internal view returns (address) {\\n    return config.getAddress(uint256(ConfigOptions.Addresses.USDC));\\n  }\\n\\n  function tranchedPoolAddress(GoldfinchConfig config) internal view returns (address) {\\n    return config.getAddress(uint256(ConfigOptions.Addresses.TranchedPoolImplementation));\\n  }\\n\\n  function reserveAddress(GoldfinchConfig config) internal view returns (address) {\\n    return config.getAddress(uint256(ConfigOptions.Addresses.TreasuryReserve));\\n  }\\n\\n  function protocolAdminAddress(GoldfinchConfig config) internal view returns (address) {\\n    return config.getAddress(uint256(ConfigOptions.Addresses.ProtocolAdmin));\\n  }\\n\\n  function borrowerImplementationAddress(GoldfinchConfig config) internal view returns (address) {\\n    return config.getAddress(uint256(ConfigOptions.Addresses.BorrowerImplementation));\\n  }\\n\\n  function goAddress(GoldfinchConfig config) internal view returns (address) {\\n    return config.getAddress(uint256(ConfigOptions.Addresses.Go));\\n  }\\n\\n  function stakingRewardsAddress(GoldfinchConfig config) internal view returns (address) {\\n    return config.getAddress(uint256(ConfigOptions.Addresses.StakingRewards));\\n  }\\n\\n  function getReserveDenominator(GoldfinchConfig config) internal view returns (uint256) {\\n    return config.getNumber(uint256(ConfigOptions.Numbers.ReserveDenominator));\\n  }\\n\\n  function getWithdrawFeeDenominator(GoldfinchConfig config) internal view returns (uint256) {\\n    return config.getNumber(uint256(ConfigOptions.Numbers.WithdrawFeeDenominator));\\n  }\\n\\n  function getLatenessGracePeriodInDays(GoldfinchConfig config) internal view returns (uint256) {\\n    return config.getNumber(uint256(ConfigOptions.Numbers.LatenessGracePeriodInDays));\\n  }\\n\\n  function getLatenessMaxDays(GoldfinchConfig config) internal view returns (uint256) {\\n    return config.getNumber(uint256(ConfigOptions.Numbers.LatenessMaxDays));\\n  }\\n\\n  function getDrawdownPeriodInSeconds(GoldfinchConfig config) internal view returns (uint256) {\\n    return config.getNumber(uint256(ConfigOptions.Numbers.DrawdownPeriodInSeconds));\\n  }\\n\\n  function getTransferRestrictionPeriodInDays(GoldfinchConfig config) internal view returns (uint256) {\\n    return config.getNumber(uint256(ConfigOptions.Numbers.TransferRestrictionPeriodInDays));\\n  }\\n\\n  function getLeverageRatio(GoldfinchConfig config) internal view returns (uint256) {\\n    return config.getNumber(uint256(ConfigOptions.Numbers.LeverageRatio));\\n  }\\n}\\n\",\"keccak256\":\"0xa194e0ea5bf3f72c35033e4c33121f00581c40def1bee00f8021e42372402699\",\"license\":\"MIT\"},\"contracts/protocol/core/ConfigOptions.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.6.12;\\npragma experimental ABIEncoderV2;\\n\\n/**\\n * @title ConfigOptions\\n * @notice A central place for enumerating the configurable options of our GoldfinchConfig contract\\n * @author Goldfinch\\n */\\n\\nlibrary ConfigOptions {\\n  // NEVER EVER CHANGE THE ORDER OF THESE!\\n  // You can rename or append. But NEVER change the order.\\n  enum Numbers {\\n    TransactionLimit,\\n    /// @dev: TotalFundsLimit used to represent a total cap on senior pool deposits\\n    /// but is now deprecated\\n    TotalFundsLimit,\\n    MaxUnderwriterLimit,\\n    ReserveDenominator,\\n    WithdrawFeeDenominator,\\n    LatenessGracePeriodInDays,\\n    LatenessMaxDays,\\n    DrawdownPeriodInSeconds,\\n    TransferRestrictionPeriodInDays,\\n    LeverageRatio\\n  }\\n  /// @dev TrustedForwarder is deprecated because we no longer use GSN. CreditDesk\\n  ///   and Pool are deprecated because they are no longer used in the protocol.\\n  enum Addresses {\\n    Pool, // deprecated\\n    CreditLineImplementation,\\n    GoldfinchFactory,\\n    CreditDesk, // deprecated\\n    Fidu,\\n    USDC,\\n    TreasuryReserve,\\n    ProtocolAdmin,\\n    OneInch,\\n    TrustedForwarder, // deprecated\\n    CUSDCContract,\\n    GoldfinchConfig,\\n    PoolTokens,\\n    TranchedPoolImplementation, // deprecated\\n    SeniorPool,\\n    SeniorPoolStrategy,\\n    MigratedTranchedPoolImplementation,\\n    BorrowerImplementation,\\n    GFI,\\n    Go,\\n    BackerRewards,\\n    StakingRewards,\\n    FiduUSDCCurveLP,\\n    TranchedPoolImplementationRepository\\n  }\\n}\\n\",\"keccak256\":\"0x31e74b25d1a0f67bd74e1a5a142687f848df1aa5b39ce8b5fb2b66b413a4691e\",\"license\":\"MIT\"},\"contracts/protocol/core/GoldfinchConfig.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.6.12;\\npragma experimental ABIEncoderV2;\\n\\nimport \\\"./BaseUpgradeablePausable.sol\\\";\\nimport \\\"../../interfaces/IGoldfinchConfig.sol\\\";\\nimport \\\"./ConfigOptions.sol\\\";\\n\\n/**\\n * @title GoldfinchConfig\\n * @notice This contract stores mappings of useful \\\"protocol config state\\\", giving a central place\\n *  for all other contracts to access it. For example, the TransactionLimit, or the PoolAddress. These config vars\\n *  are enumerated in the `ConfigOptions` library, and can only be changed by admins of the protocol.\\n *  Note: While this inherits from BaseUpgradeablePausable, it is not deployed as an upgradeable contract (this\\n *    is mostly to save gas costs of having each call go through a proxy)\\n * @author Goldfinch\\n */\\n\\ncontract GoldfinchConfig is BaseUpgradeablePausable {\\n  bytes32 public constant GO_LISTER_ROLE = keccak256(\\\"GO_LISTER_ROLE\\\");\\n\\n  mapping(uint256 => address) public addresses;\\n  mapping(uint256 => uint256) public numbers;\\n  mapping(address => bool) public goList;\\n\\n  event AddressUpdated(address owner, uint256 index, address oldValue, address newValue);\\n  event NumberUpdated(address owner, uint256 index, uint256 oldValue, uint256 newValue);\\n\\n  event GoListed(address indexed member);\\n  event NoListed(address indexed member);\\n\\n  bool public valuesInitialized;\\n\\n  function initialize(address owner) public initializer {\\n    require(owner != address(0), \\\"Owner address cannot be empty\\\");\\n\\n    __BaseUpgradeablePausable__init(owner);\\n\\n    _setupRole(GO_LISTER_ROLE, owner);\\n\\n    _setRoleAdmin(GO_LISTER_ROLE, OWNER_ROLE);\\n  }\\n\\n  function setAddress(uint256 addressIndex, address newAddress) public onlyAdmin {\\n    require(addresses[addressIndex] == address(0), \\\"Address has already been initialized\\\");\\n\\n    emit AddressUpdated(msg.sender, addressIndex, addresses[addressIndex], newAddress);\\n    addresses[addressIndex] = newAddress;\\n  }\\n\\n  function setNumber(uint256 index, uint256 newNumber) public onlyAdmin {\\n    emit NumberUpdated(msg.sender, index, numbers[index], newNumber);\\n    numbers[index] = newNumber;\\n  }\\n\\n  function setTreasuryReserve(address newTreasuryReserve) public onlyAdmin {\\n    uint256 key = uint256(ConfigOptions.Addresses.TreasuryReserve);\\n    emit AddressUpdated(msg.sender, key, addresses[key], newTreasuryReserve);\\n    addresses[key] = newTreasuryReserve;\\n  }\\n\\n  function setSeniorPoolStrategy(address newStrategy) public onlyAdmin {\\n    uint256 key = uint256(ConfigOptions.Addresses.SeniorPoolStrategy);\\n    emit AddressUpdated(msg.sender, key, addresses[key], newStrategy);\\n    addresses[key] = newStrategy;\\n  }\\n\\n  function setCreditLineImplementation(address newAddress) public onlyAdmin {\\n    uint256 key = uint256(ConfigOptions.Addresses.CreditLineImplementation);\\n    emit AddressUpdated(msg.sender, key, addresses[key], newAddress);\\n    addresses[key] = newAddress;\\n  }\\n\\n  function setTranchedPoolImplementation(address newAddress) public onlyAdmin {\\n    uint256 key = uint256(ConfigOptions.Addresses.TranchedPoolImplementation);\\n    emit AddressUpdated(msg.sender, key, addresses[key], newAddress);\\n    addresses[key] = newAddress;\\n  }\\n\\n  function setBorrowerImplementation(address newAddress) public onlyAdmin {\\n    uint256 key = uint256(ConfigOptions.Addresses.BorrowerImplementation);\\n    emit AddressUpdated(msg.sender, key, addresses[key], newAddress);\\n    addresses[key] = newAddress;\\n  }\\n\\n  function setGoldfinchConfig(address newAddress) public onlyAdmin {\\n    uint256 key = uint256(ConfigOptions.Addresses.GoldfinchConfig);\\n    emit AddressUpdated(msg.sender, key, addresses[key], newAddress);\\n    addresses[key] = newAddress;\\n  }\\n\\n  function initializeFromOtherConfig(\\n    address _initialConfig,\\n    uint256 numbersLength,\\n    uint256 addressesLength\\n  ) public onlyAdmin {\\n    require(!valuesInitialized, \\\"Already initialized values\\\");\\n    IGoldfinchConfig initialConfig = IGoldfinchConfig(_initialConfig);\\n    for (uint256 i = 0; i < numbersLength; i++) {\\n      setNumber(i, initialConfig.getNumber(i));\\n    }\\n\\n    for (uint256 i = 0; i < addressesLength; i++) {\\n      if (getAddress(i) == address(0)) {\\n        setAddress(i, initialConfig.getAddress(i));\\n      }\\n    }\\n    valuesInitialized = true;\\n  }\\n\\n  /**\\n   * @dev Adds a user to go-list\\n   * @param _member address to add to go-list\\n   */\\n  function addToGoList(address _member) public onlyGoListerRole {\\n    goList[_member] = true;\\n    emit GoListed(_member);\\n  }\\n\\n  /**\\n   * @dev removes a user from go-list\\n   * @param _member address to remove from go-list\\n   */\\n  function removeFromGoList(address _member) public onlyGoListerRole {\\n    goList[_member] = false;\\n    emit NoListed(_member);\\n  }\\n\\n  /**\\n   * @dev adds many users to go-list at once\\n   * @param _members addresses to ad to go-list\\n   */\\n  function bulkAddToGoList(address[] calldata _members) external onlyGoListerRole {\\n    for (uint256 i = 0; i < _members.length; i++) {\\n      addToGoList(_members[i]);\\n    }\\n  }\\n\\n  /**\\n   * @dev removes many users from go-list at once\\n   * @param _members addresses to remove from go-list\\n   */\\n  function bulkRemoveFromGoList(address[] calldata _members) external onlyGoListerRole {\\n    for (uint256 i = 0; i < _members.length; i++) {\\n      removeFromGoList(_members[i]);\\n    }\\n  }\\n\\n  /*\\n    Using custom getters in case we want to change underlying implementation later,\\n    or add checks or validations later on.\\n  */\\n  function getAddress(uint256 index) public view returns (address) {\\n    return addresses[index];\\n  }\\n\\n  function getNumber(uint256 index) public view returns (uint256) {\\n    return numbers[index];\\n  }\\n\\n  modifier onlyGoListerRole() {\\n    require(hasRole(GO_LISTER_ROLE, _msgSender()), \\\"Must have go-lister role to perform this action\\\");\\n    _;\\n  }\\n}\\n\",\"keccak256\":\"0x20a1c0f6183595dc4529b65f21beb92c76c959bffaba947b9648f6c422f99767\",\"license\":\"MIT\"},\"contracts/protocol/core/PauserPausable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.6.12;\\npragma experimental ABIEncoderV2;\\n\\nimport \\\"@openzeppelin/contracts-ethereum-package/contracts/utils/Pausable.sol\\\";\\nimport \\\"@openzeppelin/contracts-ethereum-package/contracts/access/AccessControl.sol\\\";\\n\\n/**\\n * @title PauserPausable\\n * @notice Inheriting from OpenZeppelin's Pausable contract, this does small\\n *  augmentations to make it work with a PAUSER_ROLE, leveraging the AccessControl contract.\\n *  It is meant to be inherited.\\n * @author Goldfinch\\n */\\n\\ncontract PauserPausable is AccessControlUpgradeSafe, PausableUpgradeSafe {\\n  bytes32 public constant PAUSER_ROLE = keccak256(\\\"PAUSER_ROLE\\\");\\n\\n  // solhint-disable-next-line func-name-mixedcase\\n  function __PauserPausable__init() public initializer {\\n    __Pausable_init_unchained();\\n  }\\n\\n  /**\\n   * @dev Pauses all functions guarded by Pause\\n   *\\n   * See {Pausable-_pause}.\\n   *\\n   * Requirements:\\n   *\\n   * - the caller must have the PAUSER_ROLE.\\n   */\\n\\n  function pause() public onlyPauserRole {\\n    _pause();\\n  }\\n\\n  /**\\n   * @dev Unpauses the contract\\n   *\\n   * See {Pausable-_unpause}.\\n   *\\n   * Requirements:\\n   *\\n   * - the caller must have the Pauser role\\n   */\\n  function unpause() public onlyPauserRole {\\n    _unpause();\\n  }\\n\\n  modifier onlyPauserRole() {\\n    /// @dev NA: not authorized\\n    require(hasRole(PAUSER_ROLE, _msgSender()), \\\"NA\\\");\\n    _;\\n  }\\n}\\n\",\"keccak256\":\"0x218eb32fc1649d98c0ac6f80689fc3e5fdcfbca36cf94431b9901788fbf3d266\",\"license\":\"MIT\"},\"contracts/protocol/core/TranchedPool.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.6.12;\\npragma experimental ABIEncoderV2;\\n\\nimport {IERC20Permit} from \\\"@openzeppelin/contracts/drafts/IERC20Permit.sol\\\";\\nimport {Math} from \\\"@openzeppelin/contracts-ethereum-package/contracts/math/Math.sol\\\";\\nimport {SafeMath} from \\\"@openzeppelin/contracts-ethereum-package/contracts/math/SafeMath.sol\\\";\\n\\nimport {ITranchedPool} from \\\"../../interfaces/ITranchedPool.sol\\\";\\nimport {IRequiresUID} from \\\"../../interfaces/IRequiresUID.sol\\\";\\nimport {IERC20withDec} from \\\"../../interfaces/IERC20withDec.sol\\\";\\nimport {IV2CreditLine} from \\\"../../interfaces/IV2CreditLine.sol\\\";\\nimport {IBackerRewards} from \\\"../../interfaces/IBackerRewards.sol\\\";\\nimport {IPoolTokens} from \\\"../../interfaces/IPoolTokens.sol\\\";\\nimport {IVersioned} from \\\"../../interfaces/IVersioned.sol\\\";\\nimport {GoldfinchConfig} from \\\"./GoldfinchConfig.sol\\\";\\nimport {BaseUpgradeablePausable} from \\\"./BaseUpgradeablePausable.sol\\\";\\nimport {ConfigHelper} from \\\"./ConfigHelper.sol\\\";\\nimport {SafeERC20Transfer} from \\\"../../library/SafeERC20Transfer.sol\\\";\\nimport {TranchingLogic} from \\\"./TranchingLogic.sol\\\";\\n\\ncontract TranchedPool is BaseUpgradeablePausable, ITranchedPool, IRequiresUID, IVersioned {\\n  GoldfinchConfig public config;\\n  using ConfigHelper for GoldfinchConfig;\\n  using TranchingLogic for PoolSlice;\\n  using TranchingLogic for TrancheInfo;\\n  using SafeERC20Transfer for IERC20withDec;\\n\\n  bytes32 public constant LOCKER_ROLE = keccak256(\\\"LOCKER_ROLE\\\");\\n  bytes32 public constant SENIOR_ROLE = keccak256(\\\"SENIOR_ROLE\\\");\\n  uint8 internal constant MAJOR_VERSION = 0;\\n  uint8 internal constant MINOR_VERSION = 1;\\n  uint8 internal constant PATCH_VERSION = 0;\\n  uint256 public juniorFeePercent;\\n  bool public drawdownsPaused;\\n  uint256[] public allowedUIDTypes;\\n  uint256 public totalDeployed;\\n  uint256 public fundableAt;\\n\\n  mapping(uint256 => PoolSlice) internal _poolSlices;\\n  uint256 public override numSlices;\\n\\n  function initialize(\\n    address _config,\\n    address _borrower,\\n    uint256 _juniorFeePercent,\\n    uint256 _limit,\\n    uint256 _interestApr,\\n    uint256 _paymentPeriodInDays,\\n    uint256 _termInDays,\\n    uint256 _lateFeeApr,\\n    uint256 _principalGracePeriodInDays,\\n    uint256 _fundableAt,\\n    uint256[] calldata _allowedUIDTypes\\n  ) public override initializer {\\n    require(address(_config) != address(0) && address(_borrower) != address(0), \\\"ZERO\\\");\\n\\n    config = GoldfinchConfig(_config);\\n    address owner = config.protocolAdminAddress();\\n    __BaseUpgradeablePausable__init(owner);\\n    _initializeNextSlice(_fundableAt);\\n    _createAndSetCreditLine(\\n      _borrower,\\n      _limit,\\n      _interestApr,\\n      _paymentPeriodInDays,\\n      _termInDays,\\n      _lateFeeApr,\\n      _principalGracePeriodInDays\\n    );\\n\\n    createdAt = block.timestamp;\\n    juniorFeePercent = _juniorFeePercent;\\n    if (_allowedUIDTypes.length == 0) {\\n      uint256[1] memory defaultAllowedUIDTypes = [config.getGo().ID_TYPE_0()];\\n      allowedUIDTypes = defaultAllowedUIDTypes;\\n    } else {\\n      allowedUIDTypes = _allowedUIDTypes;\\n    }\\n\\n    _setupRole(LOCKER_ROLE, _borrower);\\n    _setupRole(LOCKER_ROLE, owner);\\n    _setRoleAdmin(LOCKER_ROLE, OWNER_ROLE);\\n    _setRoleAdmin(SENIOR_ROLE, OWNER_ROLE);\\n\\n    // Give the senior pool the ability to deposit into the senior pool\\n    _setupRole(SENIOR_ROLE, address(config.getSeniorPool()));\\n\\n    // Unlock self for infinite amount\\n    require(config.getUSDC().approve(address(this), uint256(-1)));\\n  }\\n\\n  function setAllowedUIDTypes(uint256[] calldata ids) external onlyLocker {\\n    require(\\n      _poolSlices[0].juniorTranche.principalDeposited == 0 && _poolSlices[0].seniorTranche.principalDeposited == 0,\\n      \\\"has balance\\\"\\n    );\\n    allowedUIDTypes = ids;\\n  }\\n\\n  function getAllowedUIDTypes() external view returns (uint256[] memory) {\\n    return allowedUIDTypes;\\n  }\\n\\n  /**\\n   * @notice Deposit a USDC amount into the pool for a tranche. Mints an NFT to the caller representing the position\\n   * @param tranche The number representing the tranche to deposit into\\n   * @param amount The USDC amount to tranfer from the caller to the pool\\n   * @return tokenId The tokenId of the NFT\\n   */\\n  function deposit(uint256 tranche, uint256 amount) public override nonReentrant whenNotPaused returns (uint256) {\\n    TrancheInfo storage trancheInfo = _getTrancheInfo(tranche);\\n    /// @dev TL: tranche locked\\n    require(trancheInfo.lockedUntil == 0, \\\"TL\\\");\\n    /// @dev IA: invalid amount\\n    require(amount > 0, \\\"IA\\\");\\n    /// @dev NA: not authorized. Must have correct UID or be go listed\\n    require(hasAllowedUID(msg.sender), \\\"NA\\\");\\n    require(block.timestamp > fundableAt, \\\"Not open\\\");\\n    // senior tranche ids are always odd numbered\\n    if (TranchingLogic.isSeniorTrancheId(trancheInfo.id)) {\\n      require(hasRole(SENIOR_ROLE, _msgSender()), \\\"NA\\\");\\n    }\\n\\n    trancheInfo.principalDeposited = trancheInfo.principalDeposited.add(amount);\\n    uint256 tokenId = config.getPoolTokens().mint(\\n      IPoolTokens.MintParams({tranche: tranche, principalAmount: amount}),\\n      msg.sender\\n    );\\n\\n    config.getUSDC().safeERC20TransferFrom(msg.sender, address(this), amount);\\n    emit DepositMade(msg.sender, tranche, tokenId, amount);\\n    return tokenId;\\n  }\\n\\n  function depositWithPermit(\\n    uint256 tranche,\\n    uint256 amount,\\n    uint256 deadline,\\n    uint8 v,\\n    bytes32 r,\\n    bytes32 s\\n  ) public override returns (uint256 tokenId) {\\n    IERC20Permit(config.usdcAddress()).permit(msg.sender, address(this), amount, deadline, v, r, s);\\n    return deposit(tranche, amount);\\n  }\\n\\n  /**\\n   * @notice Withdraw an already deposited amount if the funds are available\\n   * @param tokenId The NFT representing the position\\n   * @param amount The amount to withdraw (must be <= interest+principal currently available to withdraw)\\n   * @return interestWithdrawn The interest amount that was withdrawn\\n   * @return principalWithdrawn The principal amount that was withdrawn\\n   */\\n  function withdraw(uint256 tokenId, uint256 amount)\\n    public\\n    override\\n    nonReentrant\\n    whenNotPaused\\n    returns (uint256, uint256)\\n  {\\n    IPoolTokens.TokenInfo memory tokenInfo = config.getPoolTokens().getTokenInfo(tokenId);\\n    TrancheInfo storage trancheInfo = _getTrancheInfo(tokenInfo.tranche);\\n\\n    return _withdraw(trancheInfo, tokenInfo, tokenId, amount);\\n  }\\n\\n  /**\\n   * @notice Withdraw from many tokens (that the sender owns) in a single transaction\\n   * @param tokenIds An array of tokens ids representing the position\\n   * @param amounts An array of amounts to withdraw from the corresponding tokenIds\\n   */\\n  function withdrawMultiple(uint256[] calldata tokenIds, uint256[] calldata amounts) public override {\\n    require(tokenIds.length == amounts.length, \\\"LEN\\\");\\n\\n    for (uint256 i = 0; i < amounts.length; i++) {\\n      withdraw(tokenIds[i], amounts[i]);\\n    }\\n  }\\n\\n  /**\\n   * @notice Similar to withdraw but will withdraw all available funds\\n   * @param tokenId The NFT representing the position\\n   * @return interestWithdrawn The interest amount that was withdrawn\\n   * @return principalWithdrawn The principal amount that was withdrawn\\n   */\\n  function withdrawMax(uint256 tokenId)\\n    external\\n    override\\n    nonReentrant\\n    whenNotPaused\\n    returns (uint256 interestWithdrawn, uint256 principalWithdrawn)\\n  {\\n    IPoolTokens.TokenInfo memory tokenInfo = config.getPoolTokens().getTokenInfo(tokenId);\\n    TrancheInfo storage trancheInfo = _getTrancheInfo(tokenInfo.tranche);\\n\\n    (uint256 interestRedeemable, uint256 principalRedeemable) = TranchingLogic.redeemableInterestAndPrincipal(\\n      trancheInfo,\\n      tokenInfo\\n    );\\n\\n    uint256 amount = interestRedeemable.add(principalRedeemable);\\n\\n    return _withdraw(trancheInfo, tokenInfo, tokenId, amount);\\n  }\\n\\n  /**\\n   * @notice Draws down the funds (and locks the pool) to the borrower address. Can only be called by the borrower\\n   * @param amount The amount to drawdown from the creditline (must be < limit)\\n   */\\n  function drawdown(uint256 amount) external override onlyLocker whenNotPaused {\\n    /// @dev DP: drawdowns paused\\n    require(!drawdownsPaused, \\\"DP\\\");\\n    if (!_locked()) {\\n      // Assumes the senior pool has invested already (saves the borrower a separate transaction to lock the pool)\\n      _lockPool();\\n    }\\n    // Drawdown only draws down from the current slice for simplicity. It's harder to account for how much\\n    // money is available from previous slices since depositors can redeem after unlock.\\n    PoolSlice storage currentSlice = _poolSlices[numSlices - 1];\\n    uint256 amountAvailable = TranchingLogic.sharePriceToUsdc(\\n      currentSlice.juniorTranche.principalSharePrice,\\n      currentSlice.juniorTranche.principalDeposited\\n    );\\n    amountAvailable = amountAvailable.add(\\n      TranchingLogic.sharePriceToUsdc(\\n        currentSlice.seniorTranche.principalSharePrice,\\n        currentSlice.seniorTranche.principalDeposited\\n      )\\n    );\\n\\n    /// @dev IF: insufficient funds\\n    require(amount <= amountAvailable, \\\"IF\\\");\\n\\n    creditLine.drawdown(amount);\\n\\n    // Update the share price to reflect the amount remaining in the pool\\n    uint256 amountRemaining = amountAvailable.sub(amount);\\n    uint256 oldJuniorPrincipalSharePrice = currentSlice.juniorTranche.principalSharePrice;\\n    uint256 oldSeniorPrincipalSharePrice = currentSlice.seniorTranche.principalSharePrice;\\n    currentSlice.juniorTranche.principalSharePrice = currentSlice.juniorTranche.calculateExpectedSharePrice(\\n      amountRemaining,\\n      currentSlice\\n    );\\n    currentSlice.seniorTranche.principalSharePrice = currentSlice.seniorTranche.calculateExpectedSharePrice(\\n      amountRemaining,\\n      currentSlice\\n    );\\n    currentSlice.principalDeployed = currentSlice.principalDeployed.add(amount);\\n    totalDeployed = totalDeployed.add(amount);\\n\\n    address borrower = creditLine.borrower();\\n    IBackerRewards backerRewards = IBackerRewards(config.backerRewardsAddress());\\n    backerRewards.onTranchedPoolDrawdown(numSlices - 1);\\n    config.getUSDC().safeERC20TransferFrom(address(this), borrower, amount);\\n    emit DrawdownMade(borrower, amount);\\n    emit SharePriceUpdated(\\n      address(this),\\n      currentSlice.juniorTranche.id,\\n      currentSlice.juniorTranche.principalSharePrice,\\n      int256(oldJuniorPrincipalSharePrice.sub(currentSlice.juniorTranche.principalSharePrice)) * -1,\\n      currentSlice.juniorTranche.interestSharePrice,\\n      0\\n    );\\n    emit SharePriceUpdated(\\n      address(this),\\n      currentSlice.seniorTranche.id,\\n      currentSlice.seniorTranche.principalSharePrice,\\n      int256(oldSeniorPrincipalSharePrice.sub(currentSlice.seniorTranche.principalSharePrice)) * -1,\\n      currentSlice.seniorTranche.interestSharePrice,\\n      0\\n    );\\n  }\\n\\n  function NUM_TRANCHES_PER_SLICE() external pure returns (uint256) {\\n    return TranchingLogic.NUM_TRANCHES_PER_SLICE;\\n  }\\n\\n  /**\\n   * @notice Locks the junior tranche, preventing more junior deposits. Gives time for the senior to determine how\\n   * much to invest (ensure leverage ratio cannot change for the period)\\n   */\\n  function lockJuniorCapital() external override onlyLocker whenNotPaused {\\n    _lockJuniorCapital(numSlices.sub(1));\\n  }\\n\\n  /**\\n   * @notice Locks the pool (locks both senior and junior tranches and starts the drawdown period). Beyond the drawdown\\n   * period, any unused capital is available to withdraw by all depositors\\n   */\\n  function lockPool() external override onlyLocker whenNotPaused {\\n    _lockPool();\\n  }\\n\\n  function setFundableAt(uint256 newFundableAt) external override onlyLocker {\\n    fundableAt = newFundableAt;\\n  }\\n\\n  function initializeNextSlice(uint256 _fundableAt) external override onlyLocker whenNotPaused {\\n    /// @dev NL: not locked\\n    require(_locked(), \\\"NL\\\");\\n    /// @dev LP: late payment\\n    require(!creditLine.isLate(), \\\"LP\\\");\\n    /// @dev GP: beyond principal grace period\\n    require(creditLine.withinPrincipalGracePeriod(), \\\"GP\\\");\\n    _initializeNextSlice(_fundableAt);\\n    emit SliceCreated(address(this), numSlices.sub(1));\\n  }\\n\\n  /**\\n   * @notice Triggers an assessment of the creditline and the applies the payments according the tranche waterfall\\n   */\\n  function assess() external override whenNotPaused {\\n    _assess();\\n  }\\n\\n  /**\\n   * @notice Allows repaying the creditline. Collects the USDC amount from the sender and triggers an assess\\n   * @param amount The amount to repay\\n   */\\n  function pay(uint256 amount) external override whenNotPaused {\\n    /// @dev  IA: cannot pay 0\\n    require(amount > 0, \\\"IA\\\");\\n    config.getUSDC().safeERC20TransferFrom(msg.sender, address(creditLine), amount);\\n    _assess();\\n  }\\n\\n  /**\\n   * @notice Pauses the pool and sweeps any remaining funds to the treasury reserve.\\n   */\\n  function emergencyShutdown() public onlyAdmin {\\n    if (!paused()) {\\n      pause();\\n    }\\n\\n    IERC20withDec usdc = config.getUSDC();\\n    address reserveAddress = config.reserveAddress();\\n    // Sweep any funds to community reserve\\n    uint256 poolBalance = usdc.balanceOf(address(this));\\n    if (poolBalance > 0) {\\n      config.getUSDC().safeERC20Transfer(reserveAddress, poolBalance);\\n    }\\n\\n    uint256 clBalance = usdc.balanceOf(address(creditLine));\\n    if (clBalance > 0) {\\n      usdc.safeERC20TransferFrom(address(creditLine), reserveAddress, clBalance);\\n    }\\n    emit EmergencyShutdown(address(this));\\n  }\\n\\n  /**\\n   * @notice Pauses all drawdowns (but not deposits/withdraws)\\n   */\\n  function pauseDrawdowns() public onlyAdmin {\\n    drawdownsPaused = true;\\n    emit DrawdownsPaused(address(this));\\n  }\\n\\n  /**\\n   * @notice Unpause drawdowns\\n   */\\n  function unpauseDrawdowns() public onlyAdmin {\\n    drawdownsPaused = false;\\n    emit DrawdownsUnpaused(address(this));\\n  }\\n\\n  /**\\n   * @notice Migrates the accounting variables from the current creditline to a brand new one\\n   * @param _borrower The borrower address\\n   * @param _maxLimit The new max limit\\n   * @param _interestApr The new interest APR\\n   * @param _paymentPeriodInDays The new payment period in days\\n   * @param _termInDays The new term in days\\n   * @param _lateFeeApr The new late fee APR\\n   */\\n  function migrateCreditLine(\\n    address _borrower,\\n    uint256 _maxLimit,\\n    uint256 _interestApr,\\n    uint256 _paymentPeriodInDays,\\n    uint256 _termInDays,\\n    uint256 _lateFeeApr,\\n    uint256 _principalGracePeriodInDays\\n  ) public onlyAdmin {\\n    require(_borrower != address(0) && _paymentPeriodInDays != 0 && _termInDays != 0, \\\"ZERO\\\");\\n\\n    IV2CreditLine originalCl = creditLine;\\n\\n    _createAndSetCreditLine(\\n      _borrower,\\n      _maxLimit,\\n      _interestApr,\\n      _paymentPeriodInDays,\\n      _termInDays,\\n      _lateFeeApr,\\n      _principalGracePeriodInDays\\n    );\\n\\n    TranchingLogic.migrateAccountingVariables(originalCl, creditLine);\\n    TranchingLogic.closeCreditLine(originalCl);\\n    address originalBorrower = originalCl.borrower();\\n    address newBorrower = creditLine.borrower();\\n\\n    // Ensure Roles\\n    if (originalBorrower != newBorrower) {\\n      revokeRole(LOCKER_ROLE, originalBorrower);\\n      grantRole(LOCKER_ROLE, newBorrower);\\n    }\\n    // Transfer any funds to new CL\\n    uint256 clBalance = config.getUSDC().balanceOf(address(originalCl));\\n    if (clBalance > 0) {\\n      config.getUSDC().safeERC20TransferFrom(address(originalCl), address(creditLine), clBalance);\\n    }\\n    emit CreditLineMigrated(originalCl, creditLine);\\n  }\\n\\n  // CreditLine proxy method\\n  function setLimit(uint256 newAmount) external onlyAdmin {\\n    return creditLine.setLimit(newAmount);\\n  }\\n\\n  function setMaxLimit(uint256 newAmount) external onlyAdmin {\\n    return creditLine.setMaxLimit(newAmount);\\n  }\\n\\n  function getTranche(uint256 tranche) public view override returns (TrancheInfo memory) {\\n    return _getTrancheInfo(tranche);\\n  }\\n\\n  function poolSlices(uint256 index) external view override returns (PoolSlice memory) {\\n    return _poolSlices[index];\\n  }\\n\\n  /**\\n   * @notice Returns the total junior capital deposited\\n   * @return The total USDC amount deposited into all junior tranches\\n   */\\n  function totalJuniorDeposits() external view override returns (uint256) {\\n    uint256 total;\\n    for (uint256 i = 0; i < numSlices; i++) {\\n      total = total.add(_poolSlices[i].juniorTranche.principalDeposited);\\n    }\\n    return total;\\n  }\\n\\n  /**\\n   * @notice Determines the amount of interest and principal redeemable by a particular tokenId\\n   * @param tokenId The token representing the position\\n   * @return interestRedeemable The interest available to redeem\\n   * @return principalRedeemable The principal available to redeem\\n   */\\n  function availableToWithdraw(uint256 tokenId) public view override returns (uint256, uint256) {\\n    IPoolTokens.TokenInfo memory tokenInfo = config.getPoolTokens().getTokenInfo(tokenId);\\n    TrancheInfo storage trancheInfo = _getTrancheInfo(tokenInfo.tranche);\\n\\n    if (block.timestamp > trancheInfo.lockedUntil) {\\n      return TranchingLogic.redeemableInterestAndPrincipal(trancheInfo, tokenInfo);\\n    } else {\\n      return (0, 0);\\n    }\\n  }\\n\\n  function hasAllowedUID(address sender) public view override returns (bool) {\\n    return config.getGo().goOnlyIdTypes(sender, allowedUIDTypes);\\n  }\\n\\n  /* Internal functions  */\\n\\n  function _collectInterestAndPrincipal(\\n    address from,\\n    uint256 interest,\\n    uint256 principal\\n  ) internal returns (uint256) {\\n    uint256 totalReserveAmount = TranchingLogic.applyToAllSlices(\\n      _poolSlices,\\n      numSlices,\\n      interest,\\n      principal,\\n      uint256(100).div(config.getReserveDenominator()), // Convert the denonminator to percent\\n      totalDeployed,\\n      creditLine,\\n      juniorFeePercent\\n    );\\n\\n    config.getUSDC().safeERC20TransferFrom(from, address(this), principal.add(interest));\\n    config.getUSDC().safeERC20TransferFrom(address(this), config.reserveAddress(), totalReserveAmount);\\n\\n    emit ReserveFundsCollected(address(this), totalReserveAmount);\\n\\n    return totalReserveAmount;\\n  }\\n\\n  function _createAndSetCreditLine(\\n    address _borrower,\\n    uint256 _maxLimit,\\n    uint256 _interestApr,\\n    uint256 _paymentPeriodInDays,\\n    uint256 _termInDays,\\n    uint256 _lateFeeApr,\\n    uint256 _principalGracePeriodInDays\\n  ) internal {\\n    creditLine = IV2CreditLine(config.getGoldfinchFactory().createCreditLine());\\n    creditLine.initialize(\\n      address(config),\\n      address(this), // Set self as the owner\\n      _borrower,\\n      _maxLimit,\\n      _interestApr,\\n      _paymentPeriodInDays,\\n      _termInDays,\\n      _lateFeeApr,\\n      _principalGracePeriodInDays\\n    );\\n  }\\n\\n  // // Internal //////////////////////////////////////////////////////////////////\\n\\n  function _withdraw(\\n    TrancheInfo storage trancheInfo,\\n    IPoolTokens.TokenInfo memory tokenInfo,\\n    uint256 tokenId,\\n    uint256 amount\\n  ) internal returns (uint256, uint256) {\\n    /// @dev NA: not authorized\\n    require(config.getPoolTokens().isApprovedOrOwner(msg.sender, tokenId) && hasAllowedUID(msg.sender), \\\"NA\\\");\\n    /// @dev IA: invalid amount. Cannot withdraw 0\\n    require(amount > 0, \\\"IA\\\");\\n    (uint256 interestRedeemable, uint256 principalRedeemable) = TranchingLogic.redeemableInterestAndPrincipal(\\n      trancheInfo,\\n      tokenInfo\\n    );\\n    uint256 netRedeemable = interestRedeemable.add(principalRedeemable);\\n\\n    /// @dev IA: invalid amount. User does not have enough available to redeem\\n    require(amount <= netRedeemable, \\\"IA\\\");\\n    /// @dev TL: Tranched Locked\\n    require(block.timestamp > trancheInfo.lockedUntil, \\\"TL\\\");\\n\\n    uint256 interestToRedeem = 0;\\n    uint256 principalToRedeem = 0;\\n\\n    // If the tranche has not been locked, ensure the deposited amount is correct\\n    if (trancheInfo.lockedUntil == 0) {\\n      trancheInfo.principalDeposited = trancheInfo.principalDeposited.sub(amount);\\n\\n      principalToRedeem = amount;\\n\\n      config.getPoolTokens().withdrawPrincipal(tokenId, principalToRedeem);\\n    } else {\\n      interestToRedeem = Math.min(interestRedeemable, amount);\\n      principalToRedeem = Math.min(principalRedeemable, amount.sub(interestToRedeem));\\n\\n      config.getPoolTokens().redeem(tokenId, principalToRedeem, interestToRedeem);\\n    }\\n\\n    config.getUSDC().safeERC20TransferFrom(address(this), msg.sender, principalToRedeem.add(interestToRedeem));\\n\\n    emit WithdrawalMade(msg.sender, tokenInfo.tranche, tokenId, interestToRedeem, principalToRedeem);\\n\\n    return (interestToRedeem, principalToRedeem);\\n  }\\n\\n  function _lockJuniorCapital(uint256 sliceId) internal {\\n    /// @dev TL: tranch locked\\n    require(!_locked() && _poolSlices[sliceId].juniorTranche.lockedUntil == 0, \\\"TL\\\");\\n\\n    TranchingLogic.lockTranche(_poolSlices[sliceId].juniorTranche, config);\\n  }\\n\\n  function _lockPool() internal {\\n    PoolSlice storage slice = _poolSlices[numSlices.sub(1)];\\n    /// @dev NL: Not locked\\n    require(slice.juniorTranche.lockedUntil > 0, \\\"NL\\\");\\n    // Allow locking the pool only once; do not allow extending the lock of an\\n    // already-locked pool. Otherwise the locker could keep the pool locked\\n    // indefinitely, preventing withdrawals.\\n    /// @dev TL: tranche locked. The senior pool has already been locked.\\n    require(slice.seniorTranche.lockedUntil == 0, \\\"TL\\\");\\n\\n    uint256 currentTotal = slice.juniorTranche.principalDeposited.add(slice.seniorTranche.principalDeposited);\\n    creditLine.setLimit(Math.min(creditLine.limit().add(currentTotal), creditLine.maxLimit()));\\n\\n    // We start the drawdown period, so backers can withdraw unused capital after borrower draws down\\n    TranchingLogic.lockTranche(slice.juniorTranche, config);\\n    TranchingLogic.lockTranche(slice.seniorTranche, config);\\n  }\\n\\n  function _initializeNextSlice(uint256 newFundableAt) internal {\\n    /// @dev SL: slice limit\\n    require(numSlices < 5, \\\"SL\\\");\\n    TranchingLogic.initializeNextSlice(_poolSlices, numSlices);\\n    numSlices = numSlices.add(1);\\n    fundableAt = newFundableAt;\\n  }\\n\\n  // If the senior tranche of the current slice is locked, then the pool is not open to any more deposits\\n  // (could throw off leverage ratio)\\n  function _locked() internal view returns (bool) {\\n    return numSlices == 0 || _poolSlices[numSlices - 1].seniorTranche.lockedUntil > 0;\\n  }\\n\\n  function _getTrancheInfo(uint256 trancheId) internal view returns (TrancheInfo storage) {\\n    require(trancheId > 0 && trancheId <= numSlices.mul(TranchingLogic.NUM_TRANCHES_PER_SLICE), \\\"invalid tranche\\\");\\n    uint256 sliceId = TranchingLogic.trancheIdToSliceIndex(trancheId);\\n    PoolSlice storage slice = _poolSlices[sliceId];\\n    TrancheInfo storage trancheInfo = TranchingLogic.isSeniorTrancheId(trancheId)\\n      ? slice.seniorTranche\\n      : slice.juniorTranche;\\n    return trancheInfo;\\n  }\\n\\n  function _assess() internal {\\n    // We need to make sure the pool is locked before we allocate rewards to ensure it's not\\n    // possible to game rewards by sandwiching an interest payment to an unlocked pool\\n    // It also causes issues trying to allocate payments to an empty slice (divide by zero)\\n    /// @dev NL: not locked\\n    require(_locked(), \\\"NL\\\");\\n\\n    uint256 interestAccrued = creditLine.totalInterestAccrued();\\n    (uint256 paymentRemaining, uint256 interestPayment, uint256 principalPayment) = creditLine.assess();\\n    interestAccrued = creditLine.totalInterestAccrued().sub(interestAccrued);\\n\\n    // Split the interest accrued proportionally across slices so we know how much interest goes to each slice\\n    // We need this because the slice start at different times, so we cannot retroactively allocate the interest\\n    // linearly\\n    uint256[] memory principalPaymentsPerSlice = new uint256[](numSlices);\\n    for (uint256 i = 0; i < numSlices; i++) {\\n      uint256 interestForSlice = TranchingLogic.scaleByFraction(\\n        interestAccrued,\\n        _poolSlices[i].principalDeployed,\\n        totalDeployed\\n      );\\n      principalPaymentsPerSlice[i] = TranchingLogic.scaleByFraction(\\n        principalPayment,\\n        _poolSlices[i].principalDeployed,\\n        totalDeployed\\n      );\\n      _poolSlices[i].totalInterestAccrued = _poolSlices[i].totalInterestAccrued.add(interestForSlice);\\n    }\\n\\n    if (interestPayment > 0 || principalPayment > 0) {\\n      uint256 reserveAmount = _collectInterestAndPrincipal(\\n        address(creditLine),\\n        interestPayment,\\n        principalPayment.add(paymentRemaining)\\n      );\\n\\n      for (uint256 i = 0; i < numSlices; i++) {\\n        _poolSlices[i].principalDeployed = _poolSlices[i].principalDeployed.sub(principalPaymentsPerSlice[i]);\\n        totalDeployed = totalDeployed.sub(principalPaymentsPerSlice[i]);\\n      }\\n\\n      config.getBackerRewards().allocateRewards(interestPayment);\\n\\n      emit PaymentApplied(\\n        creditLine.borrower(),\\n        address(this),\\n        interestPayment,\\n        principalPayment,\\n        paymentRemaining,\\n        reserveAmount\\n      );\\n    }\\n    emit TranchedPoolAssessed(address(this));\\n  }\\n\\n  // // Events ////////////////////////////////////////////////////////////////////\\n\\n  event DepositMade(address indexed owner, uint256 indexed tranche, uint256 indexed tokenId, uint256 amount);\\n  event WithdrawalMade(\\n    address indexed owner,\\n    uint256 indexed tranche,\\n    uint256 indexed tokenId,\\n    uint256 interestWithdrawn,\\n    uint256 principalWithdrawn\\n  );\\n\\n  event TranchedPoolAssessed(address indexed pool);\\n  event PaymentApplied(\\n    address indexed payer,\\n    address indexed pool,\\n    uint256 interestAmount,\\n    uint256 principalAmount,\\n    uint256 remainingAmount,\\n    uint256 reserveAmount\\n  );\\n  // Note: This has to exactly match the even in the TranchingLogic library for events to be emitted\\n  // correctly\\n  event SharePriceUpdated(\\n    address indexed pool,\\n    uint256 indexed tranche,\\n    uint256 principalSharePrice,\\n    int256 principalDelta,\\n    uint256 interestSharePrice,\\n    int256 interestDelta\\n  );\\n  event ReserveFundsCollected(address indexed from, uint256 amount);\\n  event CreditLineMigrated(IV2CreditLine indexed oldCreditLine, IV2CreditLine indexed newCreditLine);\\n  event DrawdownMade(address indexed borrower, uint256 amount);\\n  event DrawdownsPaused(address indexed pool);\\n  event DrawdownsUnpaused(address indexed pool);\\n  event EmergencyShutdown(address indexed pool);\\n  event TrancheLocked(address indexed pool, uint256 trancheId, uint256 lockedUntil);\\n  event SliceCreated(address indexed pool, uint256 sliceId);\\n\\n  // // Modifiers /////////////////////////////////////////////////////////////////\\n\\n  /// @inheritdoc IVersioned\\n  function getVersion() external pure override returns (uint8[3] memory version) {\\n    (version[0], version[1], version[2]) = (MAJOR_VERSION, MINOR_VERSION, PATCH_VERSION);\\n  }\\n\\n  modifier onlyLocker() {\\n    /// @dev NA: not authorized. not locker\\n    require(hasRole(LOCKER_ROLE, msg.sender), \\\"NA\\\");\\n    _;\\n  }\\n}\\n\",\"keccak256\":\"0xcab938750673c1feae45703ada12f3d582f95b3acb01d23070385293d62f5cc0\",\"license\":\"MIT\"},\"contracts/protocol/core/TranchingLogic.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.6.12;\\npragma experimental ABIEncoderV2;\\n\\nimport {IV2CreditLine} from \\\"../../interfaces/IV2CreditLine.sol\\\";\\nimport {ITranchedPool} from \\\"../../interfaces/ITranchedPool.sol\\\";\\nimport {IPoolTokens} from \\\"../../interfaces/IPoolTokens.sol\\\";\\nimport {GoldfinchConfig} from \\\"./GoldfinchConfig.sol\\\";\\nimport {ConfigHelper} from \\\"./ConfigHelper.sol\\\";\\nimport {FixedPoint} from \\\"../../external/FixedPoint.sol\\\";\\nimport {Math} from \\\"@openzeppelin/contracts-ethereum-package/contracts/math/Math.sol\\\";\\nimport {SafeMath} from \\\"@openzeppelin/contracts-ethereum-package/contracts/math/SafeMath.sol\\\";\\n\\n/**\\n * @title TranchingLogic\\n * @notice Library for handling the payments waterfall\\n * @author Goldfinch\\n */\\n\\nlibrary TranchingLogic {\\n  using SafeMath for uint256;\\n  using FixedPoint for FixedPoint.Unsigned;\\n  using FixedPoint for uint256;\\n  using ConfigHelper for GoldfinchConfig;\\n\\n  struct SliceInfo {\\n    uint256 reserveFeePercent;\\n    uint256 interestAccrued;\\n    uint256 principalAccrued;\\n  }\\n\\n  struct ApplyResult {\\n    uint256 interestRemaining;\\n    uint256 principalRemaining;\\n    uint256 reserveDeduction;\\n    uint256 oldInterestSharePrice;\\n    uint256 oldPrincipalSharePrice;\\n  }\\n\\n  uint256 internal constant FP_SCALING_FACTOR = 1e18;\\n  uint256 public constant NUM_TRANCHES_PER_SLICE = 2;\\n\\n  function usdcToSharePrice(uint256 amount, uint256 totalShares) public pure returns (uint256) {\\n    return totalShares == 0 ? 0 : amount.mul(FP_SCALING_FACTOR).div(totalShares);\\n  }\\n\\n  function sharePriceToUsdc(uint256 sharePrice, uint256 totalShares) public pure returns (uint256) {\\n    return sharePrice.mul(totalShares).div(FP_SCALING_FACTOR);\\n  }\\n\\n  function lockTranche(ITranchedPool.TrancheInfo storage tranche, GoldfinchConfig config) external {\\n    tranche.lockedUntil = block.timestamp.add(config.getDrawdownPeriodInSeconds());\\n    emit TrancheLocked(address(this), tranche.id, tranche.lockedUntil);\\n  }\\n\\n  function redeemableInterestAndPrincipal(\\n    ITranchedPool.TrancheInfo storage trancheInfo,\\n    IPoolTokens.TokenInfo memory tokenInfo\\n  ) public view returns (uint256, uint256) {\\n    // This supports withdrawing before or after locking because principal share price starts at 1\\n    // and is set to 0 on lock. Interest share price is always 0 until interest payments come back, when it increases\\n    uint256 maxPrincipalRedeemable = sharePriceToUsdc(trancheInfo.principalSharePrice, tokenInfo.principalAmount);\\n    // The principalAmount is used as the totalShares because we want the interestSharePrice to be expressed as a\\n    // percent of total loan value e.g. if the interest is 10% APR, the interestSharePrice should approach a max of 0.1.\\n    uint256 maxInterestRedeemable = sharePriceToUsdc(trancheInfo.interestSharePrice, tokenInfo.principalAmount);\\n\\n    uint256 interestRedeemable = maxInterestRedeemable.sub(tokenInfo.interestRedeemed);\\n    uint256 principalRedeemable = maxPrincipalRedeemable.sub(tokenInfo.principalRedeemed);\\n\\n    return (interestRedeemable, principalRedeemable);\\n  }\\n\\n  function calculateExpectedSharePrice(\\n    ITranchedPool.TrancheInfo memory tranche,\\n    uint256 amount,\\n    ITranchedPool.PoolSlice memory slice\\n  ) public pure returns (uint256) {\\n    uint256 sharePrice = usdcToSharePrice(amount, tranche.principalDeposited);\\n    return _scaleByPercentOwnership(tranche, sharePrice, slice);\\n  }\\n\\n  function scaleForSlice(\\n    ITranchedPool.PoolSlice memory slice,\\n    uint256 amount,\\n    uint256 totalDeployed\\n  ) public pure returns (uint256) {\\n    return scaleByFraction(amount, slice.principalDeployed, totalDeployed);\\n  }\\n\\n  // We need to create this struct so we don't run into a stack too deep error due to too many variables\\n  function getSliceInfo(\\n    ITranchedPool.PoolSlice memory slice,\\n    IV2CreditLine creditLine,\\n    uint256 totalDeployed,\\n    uint256 reserveFeePercent\\n  ) public view returns (SliceInfo memory) {\\n    (uint256 interestAccrued, uint256 principalAccrued) = getTotalInterestAndPrincipal(\\n      slice,\\n      creditLine,\\n      totalDeployed\\n    );\\n    return\\n      SliceInfo({\\n        reserveFeePercent: reserveFeePercent,\\n        interestAccrued: interestAccrued,\\n        principalAccrued: principalAccrued\\n      });\\n  }\\n\\n  function getTotalInterestAndPrincipal(\\n    ITranchedPool.PoolSlice memory slice,\\n    IV2CreditLine creditLine,\\n    uint256 totalDeployed\\n  ) public view returns (uint256, uint256) {\\n    uint256 principalAccrued = creditLine.principalOwed();\\n    // In addition to principal actually owed, we need to account for early principal payments\\n    // If the borrower pays back 5K early on a 10K loan, the actual principal accrued should be\\n    // 5K (balance- deployed) + 0 (principal owed)\\n    principalAccrued = totalDeployed.sub(creditLine.balance()).add(principalAccrued);\\n    // Now we need to scale that correctly for the slice we're interested in\\n    principalAccrued = scaleForSlice(slice, principalAccrued, totalDeployed);\\n    // Finally, we need to account for partial drawdowns. e.g. If 20K was deposited, and only 10K was drawn down,\\n    // Then principal accrued should start at 10K (total deposited - principal deployed), not 0. This is because\\n    // share price starts at 1, and is decremented by what was drawn down.\\n    uint256 totalDeposited = slice.seniorTranche.principalDeposited.add(slice.juniorTranche.principalDeposited);\\n    principalAccrued = totalDeposited.sub(slice.principalDeployed).add(principalAccrued);\\n    return (slice.totalInterestAccrued, principalAccrued);\\n  }\\n\\n  function scaleByFraction(\\n    uint256 amount,\\n    uint256 fraction,\\n    uint256 total\\n  ) public pure returns (uint256) {\\n    FixedPoint.Unsigned memory totalAsFixedPoint = FixedPoint.fromUnscaledUint(total);\\n    FixedPoint.Unsigned memory fractionAsFixedPoint = FixedPoint.fromUnscaledUint(fraction);\\n    return fractionAsFixedPoint.div(totalAsFixedPoint).mul(amount).div(FP_SCALING_FACTOR).rawValue;\\n  }\\n\\n  /// @notice apply a payment to all slices\\n  /// @param poolSlices slices to apply to\\n  /// @param numSlices number of slices\\n  /// @param interest amount of interest to apply\\n  /// @param principal amount of principal to apply\\n  /// @param reserveFeePercent percentage that protocol will take for reserves\\n  /// @param totalDeployed total amount of principal deployed\\n  /// @param creditLine creditline to account for\\n  /// @param juniorFeePercent percentage the junior tranche will take\\n  /// @return total amount that will be sent to reserves\\n  function applyToAllSlices(\\n    mapping(uint256 => ITranchedPool.PoolSlice) storage poolSlices,\\n    uint256 numSlices,\\n    uint256 interest,\\n    uint256 principal,\\n    uint256 reserveFeePercent,\\n    uint256 totalDeployed,\\n    IV2CreditLine creditLine,\\n    uint256 juniorFeePercent\\n  ) external returns (uint256) {\\n    ApplyResult memory result = TranchingLogic.applyToAllSeniorTranches(\\n      poolSlices,\\n      numSlices,\\n      interest,\\n      principal,\\n      reserveFeePercent,\\n      totalDeployed,\\n      creditLine,\\n      juniorFeePercent\\n    );\\n\\n    return\\n      result.reserveDeduction.add(\\n        TranchingLogic.applyToAllJuniorTranches(\\n          poolSlices,\\n          numSlices,\\n          result.interestRemaining,\\n          result.principalRemaining,\\n          reserveFeePercent,\\n          totalDeployed,\\n          creditLine\\n        )\\n      );\\n  }\\n\\n  function applyToAllSeniorTranches(\\n    mapping(uint256 => ITranchedPool.PoolSlice) storage poolSlices,\\n    uint256 numSlices,\\n    uint256 interest,\\n    uint256 principal,\\n    uint256 reserveFeePercent,\\n    uint256 totalDeployed,\\n    IV2CreditLine creditLine,\\n    uint256 juniorFeePercent\\n  ) internal returns (ApplyResult memory) {\\n    ApplyResult memory seniorApplyResult;\\n    for (uint256 i = 0; i < numSlices; i++) {\\n      ITranchedPool.PoolSlice storage slice = poolSlices[i];\\n\\n      SliceInfo memory sliceInfo = getSliceInfo(slice, creditLine, totalDeployed, reserveFeePercent);\\n\\n      // Since slices cannot be created when the loan is late, all interest collected can be assumed to split\\n      // pro-rata across the slices. So we scale the interest and principal to the slice\\n      ApplyResult memory applyResult = applyToSeniorTranche(\\n        slice,\\n        scaleForSlice(slice, interest, totalDeployed),\\n        scaleForSlice(slice, principal, totalDeployed),\\n        juniorFeePercent,\\n        sliceInfo\\n      );\\n      emitSharePriceUpdatedEvent(slice.seniorTranche, applyResult);\\n      seniorApplyResult.interestRemaining = seniorApplyResult.interestRemaining.add(applyResult.interestRemaining);\\n      seniorApplyResult.principalRemaining = seniorApplyResult.principalRemaining.add(applyResult.principalRemaining);\\n      seniorApplyResult.reserveDeduction = seniorApplyResult.reserveDeduction.add(applyResult.reserveDeduction);\\n    }\\n    return seniorApplyResult;\\n  }\\n\\n  function applyToAllJuniorTranches(\\n    mapping(uint256 => ITranchedPool.PoolSlice) storage poolSlices,\\n    uint256 numSlices,\\n    uint256 interest,\\n    uint256 principal,\\n    uint256 reserveFeePercent,\\n    uint256 totalDeployed,\\n    IV2CreditLine creditLine\\n  ) internal returns (uint256 totalReserveAmount) {\\n    for (uint256 i = 0; i < numSlices; i++) {\\n      SliceInfo memory sliceInfo = getSliceInfo(poolSlices[i], creditLine, totalDeployed, reserveFeePercent);\\n      // Any remaining interest and principal is then shared pro-rata with the junior slices\\n      ApplyResult memory applyResult = applyToJuniorTranche(\\n        poolSlices[i],\\n        scaleForSlice(poolSlices[i], interest, totalDeployed),\\n        scaleForSlice(poolSlices[i], principal, totalDeployed),\\n        sliceInfo\\n      );\\n      emitSharePriceUpdatedEvent(poolSlices[i].juniorTranche, applyResult);\\n      totalReserveAmount = totalReserveAmount.add(applyResult.reserveDeduction);\\n    }\\n    return totalReserveAmount;\\n  }\\n\\n  function emitSharePriceUpdatedEvent(ITranchedPool.TrancheInfo memory tranche, ApplyResult memory applyResult)\\n    internal\\n  {\\n    emit SharePriceUpdated(\\n      address(this),\\n      tranche.id,\\n      tranche.principalSharePrice,\\n      int256(tranche.principalSharePrice.sub(applyResult.oldPrincipalSharePrice)),\\n      tranche.interestSharePrice,\\n      int256(tranche.interestSharePrice.sub(applyResult.oldInterestSharePrice))\\n    );\\n  }\\n\\n  function applyToSeniorTranche(\\n    ITranchedPool.PoolSlice storage slice,\\n    uint256 interestRemaining,\\n    uint256 principalRemaining,\\n    uint256 juniorFeePercent,\\n    SliceInfo memory sliceInfo\\n  ) internal returns (ApplyResult memory) {\\n    // First determine the expected share price for the senior tranche. This is the gross amount the senior\\n    // tranche should receive.\\n    uint256 expectedInterestSharePrice = calculateExpectedSharePrice(\\n      slice.seniorTranche,\\n      sliceInfo.interestAccrued,\\n      slice\\n    );\\n    uint256 expectedPrincipalSharePrice = calculateExpectedSharePrice(\\n      slice.seniorTranche,\\n      sliceInfo.principalAccrued,\\n      slice\\n    );\\n\\n    // Deduct the junior fee and the protocol reserve\\n    uint256 desiredNetInterestSharePrice = scaleByFraction(\\n      expectedInterestSharePrice,\\n      uint256(100).sub(juniorFeePercent.add(sliceInfo.reserveFeePercent)),\\n      uint256(100)\\n    );\\n    // Collect protocol fee interest received (we've subtracted this from the senior portion above)\\n    uint256 reserveDeduction = scaleByFraction(interestRemaining, sliceInfo.reserveFeePercent, uint256(100));\\n    interestRemaining = interestRemaining.sub(reserveDeduction);\\n    uint256 oldInterestSharePrice = slice.seniorTranche.interestSharePrice;\\n    uint256 oldPrincipalSharePrice = slice.seniorTranche.principalSharePrice;\\n    // Apply the interest remaining so we get up to the netInterestSharePrice\\n    (interestRemaining, principalRemaining) = _applyBySharePrice(\\n      slice.seniorTranche,\\n      interestRemaining,\\n      principalRemaining,\\n      desiredNetInterestSharePrice,\\n      expectedPrincipalSharePrice\\n    );\\n    return\\n      ApplyResult({\\n        interestRemaining: interestRemaining,\\n        principalRemaining: principalRemaining,\\n        reserveDeduction: reserveDeduction,\\n        oldInterestSharePrice: oldInterestSharePrice,\\n        oldPrincipalSharePrice: oldPrincipalSharePrice\\n      });\\n  }\\n\\n  function applyToJuniorTranche(\\n    ITranchedPool.PoolSlice storage slice,\\n    uint256 interestRemaining,\\n    uint256 principalRemaining,\\n    SliceInfo memory sliceInfo\\n  ) public returns (ApplyResult memory) {\\n    // Then fill up the junior tranche with all the interest remaining, upto the principal share price\\n    uint256 expectedInterestSharePrice = slice.juniorTranche.interestSharePrice.add(\\n      usdcToSharePrice(interestRemaining, slice.juniorTranche.principalDeposited)\\n    );\\n    uint256 expectedPrincipalSharePrice = calculateExpectedSharePrice(\\n      slice.juniorTranche,\\n      sliceInfo.principalAccrued,\\n      slice\\n    );\\n    uint256 oldInterestSharePrice = slice.juniorTranche.interestSharePrice;\\n    uint256 oldPrincipalSharePrice = slice.juniorTranche.principalSharePrice;\\n    (interestRemaining, principalRemaining) = _applyBySharePrice(\\n      slice.juniorTranche,\\n      interestRemaining,\\n      principalRemaining,\\n      expectedInterestSharePrice,\\n      expectedPrincipalSharePrice\\n    );\\n\\n    // All remaining interest and principal is applied towards the junior tranche as interest\\n    interestRemaining = interestRemaining.add(principalRemaining);\\n    // Since any principal remaining is treated as interest (there is \\\"extra\\\" interest to be distributed)\\n    // we need to make sure to collect the protocol fee on the additional interest (we only deducted the\\n    // fee on the original interest portion)\\n    uint256 reserveDeduction = scaleByFraction(principalRemaining, sliceInfo.reserveFeePercent, uint256(100));\\n    interestRemaining = interestRemaining.sub(reserveDeduction);\\n    principalRemaining = 0;\\n\\n    (interestRemaining, principalRemaining) = _applyByAmount(\\n      slice.juniorTranche,\\n      interestRemaining.add(principalRemaining),\\n      0,\\n      interestRemaining.add(principalRemaining),\\n      0\\n    );\\n    return\\n      ApplyResult({\\n        interestRemaining: interestRemaining,\\n        principalRemaining: principalRemaining,\\n        reserveDeduction: reserveDeduction,\\n        oldInterestSharePrice: oldInterestSharePrice,\\n        oldPrincipalSharePrice: oldPrincipalSharePrice\\n      });\\n  }\\n\\n  function migrateAccountingVariables(IV2CreditLine originalCl, IV2CreditLine newCl) external {\\n    // Copy over all accounting variables\\n    newCl.setBalance(originalCl.balance());\\n    newCl.setLimit(originalCl.limit());\\n    newCl.setInterestOwed(originalCl.interestOwed());\\n    newCl.setPrincipalOwed(originalCl.principalOwed());\\n    newCl.setTermEndTime(originalCl.termEndTime());\\n    newCl.setNextDueTime(originalCl.nextDueTime());\\n    newCl.setInterestAccruedAsOf(originalCl.interestAccruedAsOf());\\n    newCl.setLastFullPaymentTime(originalCl.lastFullPaymentTime());\\n    newCl.setTotalInterestAccrued(originalCl.totalInterestAccrued());\\n  }\\n\\n  function closeCreditLine(IV2CreditLine cl) external {\\n    // Close out old CL\\n    cl.setBalance(0);\\n    cl.setLimit(0);\\n    cl.setMaxLimit(0);\\n  }\\n\\n  function trancheIdToSliceIndex(uint256 trancheId) external pure returns (uint256) {\\n    return trancheId.sub(1).div(NUM_TRANCHES_PER_SLICE);\\n  }\\n\\n  function initializeNextSlice(mapping(uint256 => ITranchedPool.PoolSlice) storage poolSlices, uint256 sliceIndex)\\n    external\\n  {\\n    poolSlices[sliceIndex] = ITranchedPool.PoolSlice({\\n      seniorTranche: ITranchedPool.TrancheInfo({\\n        id: sliceIndexToSeniorTrancheId(sliceIndex),\\n        principalSharePrice: usdcToSharePrice(1, 1),\\n        interestSharePrice: 0,\\n        principalDeposited: 0,\\n        lockedUntil: 0\\n      }),\\n      juniorTranche: ITranchedPool.TrancheInfo({\\n        id: sliceIndexToJuniorTrancheId(sliceIndex),\\n        principalSharePrice: usdcToSharePrice(1, 1),\\n        interestSharePrice: 0,\\n        principalDeposited: 0,\\n        lockedUntil: 0\\n      }),\\n      totalInterestAccrued: 0,\\n      principalDeployed: 0\\n    });\\n  }\\n\\n  function sliceIndexToJuniorTrancheId(uint256 sliceIndex) public pure returns (uint256) {\\n    // 0 -> 2\\n    // 1 -> 4\\n    return sliceIndex.mul(NUM_TRANCHES_PER_SLICE).add(2);\\n  }\\n\\n  function sliceIndexToSeniorTrancheId(uint256 sliceIndex) public pure returns (uint256) {\\n    // 0 -> 1\\n    // 1 -> 3\\n    return sliceIndex.mul(NUM_TRANCHES_PER_SLICE).add(1);\\n  }\\n\\n  function isSeniorTrancheId(uint256 trancheId) external pure returns (bool) {\\n    return trancheId.mod(TranchingLogic.NUM_TRANCHES_PER_SLICE) == 1;\\n  }\\n\\n  function isJuniorTrancheId(uint256 trancheId) external pure returns (bool) {\\n    return trancheId != 0 && trancheId.mod(TranchingLogic.NUM_TRANCHES_PER_SLICE) == 0;\\n  }\\n\\n  // // INTERNAL //////////////////////////////////////////////////////////////////\\n\\n  function _applyToSharePrice(\\n    uint256 amountRemaining,\\n    uint256 currentSharePrice,\\n    uint256 desiredAmount,\\n    uint256 totalShares\\n  ) internal pure returns (uint256, uint256) {\\n    // If no money left to apply, or don't need any changes, return the original amounts\\n    if (amountRemaining == 0 || desiredAmount == 0) {\\n      return (amountRemaining, currentSharePrice);\\n    }\\n    if (amountRemaining < desiredAmount) {\\n      // We don't have enough money to adjust share price to the desired level. So just use whatever amount is left\\n      desiredAmount = amountRemaining;\\n    }\\n    uint256 sharePriceDifference = usdcToSharePrice(desiredAmount, totalShares);\\n    return (amountRemaining.sub(desiredAmount), currentSharePrice.add(sharePriceDifference));\\n  }\\n\\n  function _scaleByPercentOwnership(\\n    ITranchedPool.TrancheInfo memory tranche,\\n    uint256 amount,\\n    ITranchedPool.PoolSlice memory slice\\n  ) internal pure returns (uint256) {\\n    uint256 totalDeposited = slice.juniorTranche.principalDeposited.add(slice.seniorTranche.principalDeposited);\\n    return scaleByFraction(amount, tranche.principalDeposited, totalDeposited);\\n  }\\n\\n  function _desiredAmountFromSharePrice(\\n    uint256 desiredSharePrice,\\n    uint256 actualSharePrice,\\n    uint256 totalShares\\n  ) internal pure returns (uint256) {\\n    // If the desired share price is lower, then ignore it, and leave it unchanged\\n    if (desiredSharePrice < actualSharePrice) {\\n      desiredSharePrice = actualSharePrice;\\n    }\\n    uint256 sharePriceDifference = desiredSharePrice.sub(actualSharePrice);\\n    return sharePriceToUsdc(sharePriceDifference, totalShares);\\n  }\\n\\n  function _applyByAmount(\\n    ITranchedPool.TrancheInfo storage tranche,\\n    uint256 interestRemaining,\\n    uint256 principalRemaining,\\n    uint256 desiredInterestAmount,\\n    uint256 desiredPrincipalAmount\\n  ) internal returns (uint256, uint256) {\\n    uint256 totalShares = tranche.principalDeposited;\\n    uint256 newSharePrice;\\n\\n    (interestRemaining, newSharePrice) = _applyToSharePrice(\\n      interestRemaining,\\n      tranche.interestSharePrice,\\n      desiredInterestAmount,\\n      totalShares\\n    );\\n    tranche.interestSharePrice = newSharePrice;\\n\\n    (principalRemaining, newSharePrice) = _applyToSharePrice(\\n      principalRemaining,\\n      tranche.principalSharePrice,\\n      desiredPrincipalAmount,\\n      totalShares\\n    );\\n    tranche.principalSharePrice = newSharePrice;\\n    return (interestRemaining, principalRemaining);\\n  }\\n\\n  function _applyBySharePrice(\\n    ITranchedPool.TrancheInfo storage tranche,\\n    uint256 interestRemaining,\\n    uint256 principalRemaining,\\n    uint256 desiredInterestSharePrice,\\n    uint256 desiredPrincipalSharePrice\\n  ) internal returns (uint256, uint256) {\\n    uint256 desiredInterestAmount = _desiredAmountFromSharePrice(\\n      desiredInterestSharePrice,\\n      tranche.interestSharePrice,\\n      tranche.principalDeposited\\n    );\\n    uint256 desiredPrincipalAmount = _desiredAmountFromSharePrice(\\n      desiredPrincipalSharePrice,\\n      tranche.principalSharePrice,\\n      tranche.principalDeposited\\n    );\\n    return\\n      _applyByAmount(tranche, interestRemaining, principalRemaining, desiredInterestAmount, desiredPrincipalAmount);\\n  }\\n\\n  // // Events /////////////////////////////////////////////////////////////////////\\n\\n  // NOTE: this needs to match the event in TranchedPool\\n  event TrancheLocked(address indexed pool, uint256 trancheId, uint256 lockedUntil);\\n\\n  event SharePriceUpdated(\\n    address indexed pool,\\n    uint256 indexed tranche,\\n    uint256 principalSharePrice,\\n    int256 principalDelta,\\n    uint256 interestSharePrice,\\n    int256 interestDelta\\n  );\\n}\\n\",\"keccak256\":\"0x46bac57d06942ea0ad9893e66970f29c51b96be2d4de38234b4e41799caacf81\",\"license\":\"MIT\"},\"contracts/protocol/core/proxy/ImplementationRepository.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.12;\\npragma experimental ABIEncoderV2;\\n\\nimport {BaseUpgradeablePausable} from \\\"../BaseUpgradeablePausable.sol\\\";\\nimport {Address} from \\\"@openzeppelin/contracts/utils/Address.sol\\\";\\n\\n/// @title User Controlled Upgrades (UCU) Proxy Repository\\n/// A repository maintaing a collection of \\\"lineages\\\" of implementation contracts\\n///\\n/// Lineages are a sequence of implementations each lineage can be thought of as\\n/// a \\\"major\\\" revision of implementations. Implementations between lineages are\\n/// considered incompatible.\\ncontract ImplementationRepository is BaseUpgradeablePausable {\\n  address internal constant INVALID_IMPL = address(0);\\n  uint256 internal constant INVALID_LINEAGE_ID = 0;\\n\\n  /// @notice returns data that will be delegatedCalled when the given implementation\\n  ///           is upgraded to\\n  mapping(address => bytes) public upgradeDataFor;\\n\\n  /// @dev mapping from one implementation to the succeeding implementation\\n  mapping(address => address) internal _nextImplementationOf;\\n\\n  /// @notice Returns the id of the lineage a given implementation belongs to\\n  mapping(address => uint256) public lineageIdOf;\\n\\n  /// @dev internal because we expose this through the `currentImplementation(uint256)` api\\n  mapping(uint256 => address) internal _currentOfLineage;\\n\\n  /// @notice Returns the id of the most recently created lineage\\n  uint256 public currentLineageId;\\n\\n  // //////// External ////////////////////////////////////////////////////////////\\n\\n  /// @notice initialize the repository's state\\n  /// @dev reverts if `_owner` is the null address\\n  /// @dev reverts if `implementation` is not a contract\\n  /// @param _owner owner of the repository\\n  /// @param implementation initial implementation in the repository\\n  function initialize(address _owner, address implementation) external initializer {\\n    __BaseUpgradeablePausable__init(_owner);\\n    _createLineage(implementation);\\n    require(currentLineageId != INVALID_LINEAGE_ID);\\n  }\\n\\n  /// @notice set data that will be delegate called when a proxy upgrades to the given `implementation`\\n  /// @dev reverts when caller is not an admin\\n  /// @dev reverts when the contract is paused\\n  /// @dev reverts if the given implementation isn't registered\\n  function setUpgradeDataFor(address implementation, bytes calldata data) external onlyAdmin whenNotPaused {\\n    _setUpgradeDataFor(implementation, data);\\n  }\\n\\n  /// @notice Create a new lineage of implementations.\\n  ///\\n  /// This creates a new \\\"root\\\" of a new lineage\\n  /// @dev reverts if `implementation` is not a contract\\n  /// @param implementation implementation that will be the first implementation in the lineage\\n  /// @return newly created lineage's id\\n  function createLineage(address implementation) external onlyAdmin whenNotPaused returns (uint256) {\\n    return _createLineage(implementation);\\n  }\\n\\n  /// @notice add a new implementation and set it as the current implementation\\n  /// @dev reverts if the sender is not an owner\\n  /// @dev reverts if the contract is paused\\n  /// @dev reverts if `implementation` is not a contract\\n  /// @param implementation implementation to append\\n  function append(address implementation) external onlyAdmin whenNotPaused {\\n    _append(implementation, currentLineageId);\\n  }\\n\\n  /// @notice Append an implementation to a specified lineage\\n  /// @dev reverts if the contract is paused\\n  /// @dev reverts if the sender is not an owner\\n  /// @dev reverts if `implementation` is not a contract\\n  /// @param implementation implementation to append\\n  /// @param lineageId id of lineage to append to\\n  function append(address implementation, uint256 lineageId) external onlyAdmin whenNotPaused {\\n    _append(implementation, lineageId);\\n  }\\n\\n  /// @notice Remove an implementation from the chain and \\\"stitch\\\" together its neighbors\\n  /// @dev If you have a chain of `A -> B -> C` and I call `remove(B, C)` it will result in `A -> C`\\n  /// @dev reverts if `previos` is not the ancestor of `toRemove`\\n  /// @dev we need to provide the previous implementation here to be able to successfully \\\"stitch\\\"\\n  ///       the chain back together. Because this is an admin action, we can source what the previous\\n  ///       version is from events.\\n  /// @param toRemove Implementation to remove\\n  /// @param previous Implementation that currently has `toRemove` as its successor\\n  function remove(address toRemove, address previous) external onlyAdmin whenNotPaused {\\n    _remove(toRemove, previous);\\n  }\\n\\n  // //////// External view ////////////////////////////////////////////////////////////\\n\\n  /// @notice Returns `true` if an implementation has a next implementation set\\n  /// @param implementation implementation to check\\n  /// @return The implementation following the given implementation\\n  function hasNext(address implementation) external view returns (bool) {\\n    return _nextImplementationOf[implementation] != INVALID_IMPL;\\n  }\\n\\n  /// @notice Returns `true` if an implementation has already been added\\n  /// @param implementation Implementation to check existence of\\n  /// @return `true` if the implementation has already been added\\n  function has(address implementation) external view returns (bool) {\\n    return _has(implementation);\\n  }\\n\\n  /// @notice Get the next implementation for a given implementation or\\n  ///           `address(0)` if it doesn't exist\\n  /// @dev reverts when contract is paused\\n  /// @param implementation implementation to get the upgraded implementation for\\n  /// @return Next Implementation\\n  function nextImplementationOf(address implementation) external view whenNotPaused returns (address) {\\n    return _nextImplementationOf[implementation];\\n  }\\n\\n  /// @notice Returns `true` if a given lineageId exists\\n  function lineageExists(uint256 lineageId) external view returns (bool) {\\n    return _lineageExists(lineageId);\\n  }\\n\\n  /// @notice Return the current implementation of a lineage with the given `lineageId`\\n  function currentImplementation(uint256 lineageId) external view whenNotPaused returns (address) {\\n    return _currentImplementation(lineageId);\\n  }\\n\\n  /// @notice return current implementaton of the current lineage\\n  function currentImplementation() external view whenNotPaused returns (address) {\\n    return _currentImplementation(currentLineageId);\\n  }\\n\\n  // //////// Internal ////////////////////////////////////////////////////////////\\n\\n  function _setUpgradeDataFor(address implementation, bytes memory data) internal {\\n    require(_has(implementation), \\\"unknown impl\\\");\\n    upgradeDataFor[implementation] = data;\\n    emit UpgradeDataSet(implementation, data);\\n  }\\n\\n  function _createLineage(address implementation) internal virtual returns (uint256) {\\n    require(Address.isContract(implementation), \\\"not a contract\\\");\\n    // NOTE: impractical to overflow\\n    currentLineageId += 1;\\n\\n    _currentOfLineage[currentLineageId] = implementation;\\n    lineageIdOf[implementation] = currentLineageId;\\n\\n    emit Added(currentLineageId, implementation, address(0));\\n    return currentLineageId;\\n  }\\n\\n  function _currentImplementation(uint256 lineageId) internal view returns (address) {\\n    return _currentOfLineage[lineageId];\\n  }\\n\\n  /// @notice Returns `true` if an implementation has already been added\\n  /// @param implementation implementation to check for\\n  /// @return `true` if the implementation has already been added\\n  function _has(address implementation) internal view virtual returns (bool) {\\n    return lineageIdOf[implementation] != INVALID_LINEAGE_ID;\\n  }\\n\\n  /// @notice Set an implementation to the current implementation\\n  /// @param implementation implementation to set as current implementation\\n  /// @param lineageId id of lineage to append to\\n  function _append(address implementation, uint256 lineageId) internal virtual {\\n    require(Address.isContract(implementation), \\\"not a contract\\\");\\n    require(!_has(implementation), \\\"exists\\\");\\n    require(_lineageExists(lineageId), \\\"invalid lineageId\\\");\\n    require(_currentOfLineage[lineageId] != INVALID_IMPL, \\\"empty lineage\\\");\\n\\n    address oldImplementation = _currentOfLineage[lineageId];\\n    _currentOfLineage[lineageId] = implementation;\\n    lineageIdOf[implementation] = lineageId;\\n    _nextImplementationOf[oldImplementation] = implementation;\\n\\n    emit Added(lineageId, implementation, oldImplementation);\\n  }\\n\\n  function _remove(address toRemove, address previous) internal virtual {\\n    require(toRemove != INVALID_IMPL && previous != INVALID_IMPL, \\\"ZERO\\\");\\n    require(_nextImplementationOf[previous] == toRemove, \\\"Not prev\\\");\\n\\n    uint256 lineageId = lineageIdOf[toRemove];\\n\\n    // need to reset the head pointer to the previous version if we remove the head\\n    if (toRemove == _currentOfLineage[lineageId]) {\\n      _currentOfLineage[lineageId] = previous;\\n    }\\n\\n    _setUpgradeDataFor(toRemove, \\\"\\\"); // reset upgrade data\\n    _nextImplementationOf[previous] = _nextImplementationOf[toRemove];\\n    _nextImplementationOf[toRemove] = INVALID_IMPL;\\n    lineageIdOf[toRemove] = INVALID_LINEAGE_ID;\\n    emit Removed(lineageId, toRemove);\\n  }\\n\\n  function _lineageExists(uint256 lineageId) internal view returns (bool) {\\n    return lineageId != INVALID_LINEAGE_ID && lineageId <= currentLineageId;\\n  }\\n\\n  // //////// Events //////////////////////////////////////////////////////////////\\n  event Added(uint256 indexed lineageId, address indexed newImplementation, address indexed oldImplementation);\\n  event Removed(uint256 indexed lineageId, address indexed implementation);\\n  event UpgradeDataSet(address indexed implementation, bytes data);\\n}\\n\",\"keccak256\":\"0xa52d50641c081def0b1f66a1150fa3b6079a2959704911476e4287f462cf1297\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "",
  "deployedBytecode": "0x608060405234801561001057600080fd5b50600436106102ed5760003560e01c80639010d07c11610193578063c290d691116100e4578063dd0ec24111610092578063dd0ec241146105ee578063e2a657f9146105f6578063e2bbb15814610609578063e58378bb1461061c578063e63ab1e914610624578063f36213671461062c578063f94f5a1214610634576102ed565b8063c290d69114610570578063c77d569814610583578063c78bed861461058b578063ca15c873146105a0578063cf09e0d0146105b3578063d547741f146105bb578063d972e8ad146105ce576102ed565b8063a8f9c4fe11610141578063a8f9c4fe1461050c578063aa2a7c4c14610514578063ae6c857a14610527578063b6db75a01461053a578063b9317d8614610542578063bf6c87c714610555578063bf8bcee41461055d576102ed565b80639010d07c1461049d57806391d14854146104b05780639d110530146104c3578063a079a4dd146104d6578063a217fddf146104e9578063a6a25e88146104f1578063a8deac0e146104f9576102ed565b80634026478e1161024d5780635c975abb116101fb5780635c975abb146104425780635eb185a21461044a57806378bcd6041461045257806379502c55146104655780637976323d1461046d57806380b65431146104755780638456cb5914610495576102ed565b80634026478e146103ce578063441a3e70146103d657806344c08f23146103f757806347195e13146103ff5780634d02fe6f14610414578063515bc32314610427578063526d81f61461043a576102ed565b8063248a9ca3116102aa578063248a9ca31461036a57806327ea6f2b1461037d5780632ae754be146103905780632f2ff15d146103985780633403c2fc146103ab57806336568abe146103b35780633f4ba83a146103c6576102ed565b80630881806c146102f2578063097616a3146102fc5780630cfb14b01461030f5780630d8e6e2c1461032d57806317f76941146103425780631fe032be14610357575b600080fd5b6102fa610647565b005b6102fa61030a36600461488f565b6106c1565b6103176107f1565b6040516103249190614e5d565b60405180910390f35b6103356107f8565b6040516103249190614e1e565b61034a610815565b6040516103249190614e52565b6102fa610365366004614987565b61081f565b610317610378366004614aa4565b610be0565b6102fa61038b366004614aa4565b610bf5565b610317610c80565b6102fa6103a6366004614abc565b610c92565b6102fa610cd6565b6102fa6103c1366004614abc565b610ed2565b6102fa610f14565b6102fa610f52565b6103e96103e4366004614aeb565b610fb1565b604051610324929190614e80565b6103176110d9565b6104076110de565b6040516103249190614c9d565b6103e9610422366004614aa4565b6110ee565b610317610435366004614be8565b61124b565b6102fa6112e2565b61034a61136c565b610317611375565b6102fa610460366004614aa4565b61137c565b610407611592565b6103176115a2565b610488610483366004614aa4565b6115a9565b60405161032491906153f1565b6102fa61165d565b6104076104ab366004614aeb565b61169b565b61034a6104be366004614abc565b6116bc565b6102fa6104d1366004614a1b565b6116d4565b6102fa6104e4366004614aa4565b611736565b610317611d7d565b6102fa611d82565b6102fa6105073660046148c7565b611dad565b6102fa61210c565b6103e9610522366004614aa4565b61216b565b6102fa610535366004614aa4565b612332565b61034a61236c565b6102fa6105503660046149db565b61238d565b6102fa612451565b6102fa61056b366004614aa4565b6124ad565b6102fa61057e366004614aa4565b612502565b610317612573565b61059361257a565b6040516103249190614dda565b6103176105ae366004614aa4565b6125d3565b6103176125ea565b6102fa6105c9366004614abc565b6125f1565b6105e16105dc366004614aa4565b61262b565b6040516103249190615433565b61031761267b565b610317610604366004614aa4565b6126ba565b610317610617366004614aeb565b6126d9565b6103176129c2565b6103176129d4565b6103176129e6565b61034a61064236600461488f565b6129f8565b61065f600080516020615598833981519152336116bc565b6106845760405162461bcd60e51b815260040161067b906152df565b60405180910390fd5b60975460ff16156106a75760405162461bcd60e51b815260040161067b90615164565b6101cc546106bf906106ba906001612a90565b612ad2565b565b600054610100900460ff16806106da57506106da612b98565b806106e8575060005460ff16155b6107045760405162461bcd60e51b815260040161067b90615258565b600054610100900460ff1615801561072f576000805460ff1961ff0019909116610100171660011790555b6001600160a01b0382166107555760405162461bcd60e51b815260040161067b906151aa565b61075d612b9e565b610765612c1f565b61076d612cab565b61078560008051602061553883398151915283610ccc565b61079d60008051602061555883398151915283610ccc565b6107c3600080516020615558833981519152600080516020615538833981519152612d3a565b6107db60008051602061553883398151915280612d3a565b80156107ed576000805461ff00191690555b5050565b6101c95481565b6108006146d4565b60006040820181905260016020830152815290565b6101c75460ff1681565b61082761236c565b6108435760405162461bcd60e51b815260040161067b90615332565b6001600160a01b0387161580159061085a57508315155b801561086557508215155b6108815760405162461bcd60e51b815260040161067b90615039565b6101c3546001600160a01b031661089d88888888888888612d4f565b6101c3546040516312804a4d60e11b815273__$07e8ed413e81d51a5dfb2d8e1b1fa75af5$__91632500949a916108e49185916001600160a01b0390911690600401614e66565b60006040518083038186803b1580156108fc57600080fd5b505af4158015610910573d6000803e3d6000fd5b50506040516303bafb3960e11b815273__$07e8ed413e81d51a5dfb2d8e1b1fa75af5$__9250630775f672915061094b908490600401614c9d565b60006040518083038186803b15801561096357600080fd5b505af4158015610977573d6000803e3d6000fd5b505050506000816001600160a01b0316637df1f1b96040518163ffffffff1660e01b815260040160206040518083038186803b1580156109b657600080fd5b505afa1580156109ca573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906109ee91906148ab565b905060006101c360009054906101000a90046001600160a01b03166001600160a01b0316637df1f1b96040518163ffffffff1660e01b815260040160206040518083038186803b158015610a4157600080fd5b505afa158015610a55573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610a7991906148ab565b9050806001600160a01b0316826001600160a01b031614610ac457610aac600080516020615598833981519152836125f1565b610ac460008051602061559883398151915282610c92565b6101c554600090610add906001600160a01b0316612e6c565b6001600160a01b03166370a08231856040518263ffffffff1660e01b8152600401610b089190614c9d565b60206040518083038186803b158015610b2057600080fd5b505afa158015610b34573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610b589190614b80565b90508015610b97576101c3546101c554610b979186916001600160a01b03918216918591610b869116612e6c565b6001600160a01b0316929190612e77565b6101c3546040516001600160a01b03918216918616907f987cdba0cba67c68d2c8aba6a4ba6545565eccfb3e2e5ff39579ffd94acaf9bb90600090a35050505050505050505050565b60009081526065602052604090206002015490565b610bfd61236c565b610c195760405162461bcd60e51b815260040161067b90615332565b6101c3546040516327ea6f2b60e01b81526001600160a01b03909116906327ea6f2b90610c4a908490600401614e5d565b600060405180830381600087803b158015610c6457600080fd5b505af1158015610c78573d6000803e3d6000fd5b505050505b50565b60008051602061557883398151915281565b600082815260656020526040902060020154610cb0906104be612e99565b610ccc5760405162461bcd60e51b815260040161067b90614f84565b6107ed8282612e9d565b610cde61236c565b610cfa5760405162461bcd60e51b815260040161067b90615332565b610d0261136c565b610d0e57610d0e61165d565b6101c554600090610d27906001600160a01b0316612e6c565b6101c554909150600090610d43906001600160a01b0316612f06565b90506000826001600160a01b03166370a08231306040518263ffffffff1660e01b8152600401610d739190614c9d565b60206040518083038186803b158015610d8b57600080fd5b505afa158015610d9f573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610dc39190614b80565b90508015610df9576101c554610df99083908390610de9906001600160a01b0316612e6c565b6001600160a01b03169190612f86565b6101c3546040516370a0823160e01b81526000916001600160a01b03808716926370a0823192610e2d921690600401614c9d565b60206040518083038186803b158015610e4557600080fd5b505afa158015610e59573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610e7d9190614b80565b90508015610ea1576101c354610ea1906001600160a01b0386811691168584612e77565b60405130907f1fc1e771236d2e93bb9541cdcb4654ba0fd3fb615b48d829b7b365f03998512690600090a250505050565b610eda612e99565b6001600160a01b0316816001600160a01b031614610f0a5760405162461bcd60e51b815260040161067b9061537d565b6107ed8282612fa1565b610f2e6000805160206155588339815191526104be612e99565b610f4a5760405162461bcd60e51b815260040161067b906152df565b6106bf61300a565b610f6a600080516020615598833981519152336116bc565b610f865760405162461bcd60e51b815260040161067b906152df565b60975460ff1615610fa95760405162461bcd60e51b815260040161067b90615164565b6106bf613076565b60c954600090819060ff16610fd85760405162461bcd60e51b815260040161067b906152fb565b60c9805460ff1916905560975460ff16156110055760405162461bcd60e51b815260040161067b90615164565b61100d6146f2565b6101c554611023906001600160a01b031661336b565b6001600160a01b0316638c7a63ae866040518263ffffffff1660e01b815260040161104e9190614e5d565b60a06040518083038186803b15801561106657600080fd5b505afa15801561107a573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061109e9190614b0c565b905060006110af8260200151613376565b90506110bd818388886134ed565b93509350505060c9805460ff1916600117905590939092509050565b600290565b6101c3546001600160a01b031681565b6000806110f96146f2565b6101c55461110f906001600160a01b031661336b565b6001600160a01b0316638c7a63ae856040518263ffffffff1660e01b815260040161113a9190614e5d565b60a06040518083038186803b15801561115257600080fd5b505afa158015611166573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061118a9190614b0c565b9050600061119b8260200151613376565b9050806004015442111561123c57604051637bfe125960e11b815273__$07e8ed413e81d51a5dfb2d8e1b1fa75af5$__9063f7fc24b2906111e29084908690600401615492565b604080518083038186803b1580156111f957600080fd5b505af415801561120d573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906112319190614b98565b935093505050611246565b6000809350935050505b915091565b6101c554600090611264906001600160a01b0316613866565b6001600160a01b031663d505accf333089898989896040518863ffffffff1660e01b815260040161129b9796959493929190614cb1565b600060405180830381600087803b1580156112b557600080fd5b505af11580156112c9573d6000803e3d6000fd5b505050506112d787876126d9565b979650505050505050565b600054610100900460ff16806112fb57506112fb612b98565b80611309575060005460ff16155b6113255760405162461bcd60e51b815260040161067b90615258565b600054610100900460ff16158015611350576000805460ff1961ff0019909116610100171660011790555b611358612c1f565b8015610c7d576000805461ff001916905550565b60975460ff1690565b6101ca5481565b611394600080516020615598833981519152336116bc565b6113b05760405162461bcd60e51b815260040161067b906152df565b60975460ff16156113d35760405162461bcd60e51b815260040161067b90615164565b6113db61387e565b6113f75760405162461bcd60e51b815260040161067b906152c3565b6101c360009054906101000a90046001600160a01b03166001600160a01b03166381c17a156040518163ffffffff1660e01b815260040160206040518083038186803b15801561144657600080fd5b505afa15801561145a573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061147e9190614a84565b1561149b5760405162461bcd60e51b815260040161067b9061523c565b6101c360009054906101000a90046001600160a01b03166001600160a01b031663457147a76040518163ffffffff1660e01b815260040160206040518083038186803b1580156114ea57600080fd5b505afa1580156114fe573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906115229190614a84565b61153e5760405162461bcd60e51b815260040161067b906150f8565b611547816138ae565b6101cc5430907f3420dd9c54d6a8846edd2fb39a41c30c31e7bc95b43655dae59f47cc913b60d59061157a906001612a90565b6040516115879190614e5d565b60405180910390a250565b6101c5546001600160a01b031681565b6101cc5481565b6115b161472a565b5060009081526101cb602090815260409182902082516101208101845281546080808301918252600184015460a080850191909152600285015460c0850152600385015460e085015260048501546101008501529183528551918201865260058401548252600684015482860152600784015482870152600884015460608084019190915260098501549183019190915293820152600a82015493810193909352600b01549082015290565b6116776000805160206155588339815191526104be612e99565b6116935760405162461bcd60e51b815260040161067b906152df565b6106bf613958565b60008281526065602052604081206116b390836139b1565b90505b92915050565b60008281526065602052604081206116b390836139bd565b8281146116f35760405162461bcd60e51b815260040161067b906152a6565b60005b81811015610c785761172c85858381811061170d57fe5b9050602002013584848481811061172057fe5b90506020020135610fb1565b50506001016116f6565b61174e600080516020615598833981519152336116bc565b61176a5760405162461bcd60e51b815260040161067b906152df565b60975460ff161561178d5760405162461bcd60e51b815260040161067b90615164565b6101c75460ff16156117b15760405162461bcd60e51b815260040161067b9061501d565b6117b961387e565b6117c5576117c5613076565b6101cc546000190160009081526101cb6020526040808220600781015460068201549251630174b44960e01b815291939273__$07e8ed413e81d51a5dfb2d8e1b1fa75af5$__92630174b44992611820929091600401614e80565b60206040518083038186803b15801561183857600080fd5b505af415801561184c573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906118709190614b80565b60028301546001840154604051630174b44960e01b815292935061190d9273__$07e8ed413e81d51a5dfb2d8e1b1fa75af5$__92630174b449926118b692600401614e80565b60206040518083038186803b1580156118ce57600080fd5b505af41580156118e2573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906119069190614b80565b82906139d2565b90508083111561192f5760405162461bcd60e51b815260040161067b9061518e565b6101c35460405163a079a4dd60e01b81526001600160a01b039091169063a079a4dd90611960908690600401614e5d565b600060405180830381600087803b15801561197a57600080fd5b505af115801561198e573d6000803e3d6000fd5b5050505060006119a78483612a9090919063ffffffff16565b600784015460028501546040805160a081018252600588015481526006880154602082015280820184905260088801546060820152600988015460808201529051634ec167e960e11b81529394509192909173__$07e8ed413e81d51a5dfb2d8e1b1fa75af5$__91639d82cfd291611a259187908a90600401615441565b60206040518083038186803b158015611a3d57600080fd5b505af4158015611a51573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611a759190614b80565b60078601556040805160a08101825286548152600187015460208201526002870154818301526003870154606082015260048088015460808301529151634ec167e960e11b815273__$07e8ed413e81d51a5dfb2d8e1b1fa75af5$__92639d82cfd292611ae892909188918b9101615441565b60206040518083038186803b158015611b0057600080fd5b505af4158015611b14573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611b389190614b80565b6002860155600b850154611b4c90876139d2565b600b8601556101c954611b5f90876139d2565b6101c9556101c35460408051637df1f1b960e01b815290516000926001600160a01b031691637df1f1b9916004808301926020929190829003018186803b158015611ba957600080fd5b505afa158015611bbd573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611be191906148ab565b6101c554909150600090611bfd906001600160a01b03166139f7565b9050806001600160a01b031663e149ee8060016101cc54036040518263ffffffff1660e01b8152600401611c319190614e5d565b600060405180830381600087803b158015611c4b57600080fd5b505af1158015611c5f573d6000803e3d6000fd5b50506101c554611c83925030915084908b90610b86906001600160a01b0316612e6c565b816001600160a01b03167f7411b87a3c039bdfd8f3510b21e8bd0736265f53513735e1f4aa7b4f306b728d89604051611cbc9190614e5d565b60405180910390a26005870154600788015430907f42a55d7508b1c40b53524cf7cc2558b0f6bc7c4f262a3e929b65cd48bec2b68790611cfc8882612a90565b60088c0154604051611d159392600090810392916154f1565b60405180910390a38654600288015430907f42a55d7508b1c40b53524cf7cc2558b0f6bc7c4f262a3e929b65cd48bec2b68790611d528782612a90565b60038c0154604051611d6b9392600090810392916154f1565b60405180910390a35050505050505050565b600081565b60975460ff1615611da55760405162461bcd60e51b815260040161067b90615164565b6106bf613a0f565b600054610100900460ff1680611dc65750611dc6612b98565b80611dd4575060005460ff16155b611df05760405162461bcd60e51b815260040161067b90615258565b600054610100900460ff16158015611e1b576000805460ff1961ff0019909116610100171660011790555b6001600160a01b038d1615801590611e3b57506001600160a01b038c1615155b611e575760405162461bcd60e51b815260040161067b90615039565b8c6101c560006101000a8154816001600160a01b0302191690836001600160a01b031602179055506000611ea96101c560009054906101000a90046001600160a01b03166001600160a01b0316614007565b9050611eb4816106c1565b611ebd856138ae565b611ecc8d8c8c8c8c8c8c612d4f565b426101c4556101c68c905582611f9057611ee461475e565b60408051602081019091526101c5548190611f07906001600160a01b031661401f565b6001600160a01b0316639b56d7886040518163ffffffff1660e01b815260040160206040518083038186803b158015611f3f57600080fd5b505afa158015611f53573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611f779190614b80565b90529050611f896101c882600161477c565b5050611f9f565b611f9d6101c885856147c7565b505b611fb76000805160206155988339815191528e610ccc565b611fcf60008051602061559883398151915282610ccc565b611ff5600080516020615598833981519152600080516020615538833981519152612d3a565b61201b600080516020615578833981519152600080516020615538833981519152612d3a565b6101c55461204a9060008051602061557883398151915290612045906001600160a01b031661402a565b610ccc565b6101c554612060906001600160a01b0316612e6c565b6001600160a01b031663095ea7b3306000196040518363ffffffff1660e01b815260040161208f929190614cf2565b602060405180830381600087803b1580156120a957600080fd5b505af11580156120bd573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906120e19190614a84565b6120ea57600080fd5b5080156120fd576000805461ff00191690555b50505050505050505050505050565b61211461236c565b6121305760405162461bcd60e51b815260040161067b90615332565b6101c7805460ff1916600117905560405130907f90d9b09c68a7e1312ce22801552b47265d77db9496383d51374b4058545447d790600090a2565b60c954600090819060ff166121925760405162461bcd60e51b815260040161067b906152fb565b60c9805460ff1916905560975460ff16156121bf5760405162461bcd60e51b815260040161067b90615164565b6121c76146f2565b6101c5546121dd906001600160a01b031661336b565b6001600160a01b0316638c7a63ae856040518263ffffffff1660e01b81526004016122089190614e5d565b60a06040518083038186803b15801561222057600080fd5b505afa158015612234573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906122589190614b0c565b905060006122698260200151613376565b905060008073__$07e8ed413e81d51a5dfb2d8e1b1fa75af5$__63f7fc24b284866040518363ffffffff1660e01b81526004016122a7929190615492565b604080518083038186803b1580156122be57600080fd5b505af41580156122d2573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906122f69190614b98565b9092509050600061230783836139d2565b905061231584868a846134ed565b96509650505050505060c9805460ff191660011790559092909150565b61234a600080516020615598833981519152336116bc565b6123665760405162461bcd60e51b815260040161067b906152df565b6101ca55565b60006123886000805160206155388339815191526104be612e99565b905090565b6123a5600080516020615598833981519152336116bc565b6123c15760405162461bcd60e51b815260040161067b906152df565b600080526101cb6020527f7815f96d61162a6533de7fc4199513d6e939c8cbee1627dfd11ec1fe503f0bb9541580156124235750600080526101cb6020527f7815f96d61162a6533de7fc4199513d6e939c8cbee1627dfd11ec1fe503f0bb454155b61243f5760405162461bcd60e51b815260040161067b906150d3565b61244c6101c883836147c7565b505050565b61245961236c565b6124755760405162461bcd60e51b815260040161067b90615332565b6101c7805460ff1916905560405130907f7184039938737267597232635b117c924371ac877d4329f2dfa5ca674c5cc4a590600090a2565b6124b561236c565b6124d15760405162461bcd60e51b815260040161067b90615332565b6101c354604051632fe2f3b960e21b81526001600160a01b039091169063bf8bcee490610c4a908490600401614e5d565b60975460ff16156125255760405162461bcd60e51b815260040161067b90615164565b600081116125455760405162461bcd60e51b815260040161067b90615220565b6101c3546101c55461256b9133916001600160a01b03918216918591610b869116612e6c565b610c7d613a0f565b6101c65481565b60606101c88054806020026020016040519081016040528092919081815260200182805480156125c957602002820191906000526020600020905b8154815260200190600101908083116125b5575b5050505050905090565b60008181526065602052604081206116b690614035565b6101c45481565b60008281526065602052604090206002015461260f906104be612e99565b610f0a5760405162461bcd60e51b815260040161067b90615114565b612633614802565b61263c82613376565b6040805160a081018252825481526001830154602082015260028301549181019190915260038201546060820152600490910154608082015292915050565b60008060005b6101cc548110156126b45760008181526101cb60205260409020600601546126aa9083906139d2565b9150600101612681565b50905090565b6101c881815481106126c857fe5b600091825260209091200154905081565b60c95460009060ff166126fe5760405162461bcd60e51b815260040161067b906152fb565b60c9805460ff1916905560975460ff161561272b5760405162461bcd60e51b815260040161067b90615164565b600061273684613376565b9050806004015460001461275c5760405162461bcd60e51b815260040161067b9061508e565b6000831161277c5760405162461bcd60e51b815260040161067b90615220565b612785336129f8565b6127a15760405162461bcd60e51b815260040161067b906152df565b6101ca5442116127c35760405162461bcd60e51b815260040161067b90614f62565b80546040516337b1b00560e21b815273__$07e8ed413e81d51a5dfb2d8e1b1fa75af5$__9163dec6c014916127fb9190600401614e5d565b60206040518083038186803b15801561281357600080fd5b505af4158015612827573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061284b9190614a84565b156128865761286a6000805160206155788339815191526104be612e99565b6128865760405162461bcd60e51b815260040161067b906152df565b600181015461289590846139d2565b60018201556101c5546000906128b3906001600160a01b031661336b565b6001600160a01b0316635be57b6a604051806040016040528087815260200188815250336040518363ffffffff1660e01b81526004016128f49291906153cc565b602060405180830381600087803b15801561290e57600080fd5b505af1158015612922573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906129469190614b80565b6101c55490915061296990339030908790610b86906001600160a01b0316612e6c565b8085336001600160a01b03167fcb3ef4109dcd006671348924f00aac8398190a5ff283d6e470d74581513e1036876040516129a49190614e5d565b60405180910390a491505060c9805460ff1916600117905592915050565b60008051602061553883398151915281565b60008051602061555883398151915281565b60008051602061559883398151915281565b6101c554600090612a11906001600160a01b031661401f565b6001600160a01b0316631852f200836101c86040518363ffffffff1660e01b8152600401612a40929190614d7f565b60206040518083038186803b158015612a5857600080fd5b505afa158015612a6c573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906116b69190614a84565b60006116b383836040518060400160405280601e81526020017f536166654d6174683a207375627472616374696f6e206f766572666c6f770000815250614040565b612ada61387e565b158015612af7575060008181526101cb6020526040902060090154155b612b135760405162461bcd60e51b815260040161067b9061508e565b60008181526101cb6020526040908190206101c5549151636e10dbd760e01b815273__$07e8ed413e81d51a5dfb2d8e1b1fa75af5$__92636e10dbd792612b6c926005909101916001600160a01b0316906004016154da565b60006040518083038186803b158015612b8457600080fd5b505af4158015610c78573d6000803e3d6000fd5b303b1590565b600054610100900460ff1680612bb75750612bb7612b98565b80612bc5575060005460ff16155b612be15760405162461bcd60e51b815260040161067b90615258565b600054610100900460ff16158015611358576000805460ff1961ff0019909116610100171660011790558015610c7d576000805461ff001916905550565b600054610100900460ff1680612c385750612c38612b98565b80612c46575060005460ff16155b612c625760405162461bcd60e51b815260040161067b90615258565b600054610100900460ff16158015612c8d576000805460ff1961ff0019909116610100171660011790555b6097805460ff191690558015610c7d576000805461ff001916905550565b600054610100900460ff1680612cc45750612cc4612b98565b80612cd2575060005460ff16155b612cee5760405162461bcd60e51b815260040161067b90615258565b600054610100900460ff16158015612d19576000805460ff1961ff0019909116610100171660011790555b60c9805460ff191660011790558015610c7d576000805461ff001916905550565b60009182526065602052604090912060020155565b6101c554612d65906001600160a01b031661406c565b6001600160a01b03166301b215516040518163ffffffff1660e01b8152600401602060405180830381600087803b158015612d9f57600080fd5b505af1158015612db3573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612dd791906148ab565b6101c380546001600160a01b0319166001600160a01b0392831617908190556101c55460405163bb4a250960e01b81529183169263bb4a250992612e31929091169030908c908c908c908c908c908c908c90600401614d0b565b600060405180830381600087803b158015612e4b57600080fd5b505af1158015612e5f573d6000803e3d6000fd5b5050505050505050505050565b60006116b682613866565b612e938484848460405180602001604052806000815250614077565b50505050565b3390565b6000828152606560205260409020612eb5908261414c565b156107ed57612ec2612e99565b6001600160a01b0316816001600160a01b0316837f2f8788117e7eff1d82e926ec794901d17c78024a50270940304540a733656f0d60405160405180910390a45050565b60006001600160a01b03821663b93f9b0a60065b6040518263ffffffff1660e01b8152600401612f369190614e5d565b60206040518083038186803b158015612f4e57600080fd5b505afa158015612f62573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906116b691906148ab565b61244c83838360405180602001604052806000815250614161565b6000828152606560205260409020612fb9908261422b565b156107ed57612fc6612e99565b6001600160a01b0316816001600160a01b0316837ff6391f5c32d9c69d2a47ea670b442974b53935d1edc7fd64eb21e047a839171b60405160405180910390a45050565b60975460ff1661302c5760405162461bcd60e51b815260040161067b90614fd3565b6097805460ff191690557f5db9ee0a495bf2e6ff9c91a7834c1ba4fdd244a5e8aa4e537bd38aeae4b073aa61305f612e99565b60405161306c9190614c9d565b60405180910390a1565b60006101cb600061309460016101cc54612a9090919063ffffffff16565b8152602001908152602001600020905060008160050160040154116130cb5760405162461bcd60e51b815260040161067b906152c3565b6004810154156130ed5760405162461bcd60e51b815260040161067b9061508e565b6001810154600682015460009161310491906139d2565b6101c3546040805163a4d66daf60e01b815290519293506001600160a01b03909116916327ea6f2b916132289161319c918691869163a4d66daf916004808301926020929190829003018186803b15801561315e57600080fd5b505afa158015613172573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906131969190614b80565b906139d2565b6101c360009054906101000a90046001600160a01b03166001600160a01b0316631a861d266040518163ffffffff1660e01b815260040160206040518083038186803b1580156131eb57600080fd5b505afa1580156131ff573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906132239190614b80565b614240565b6040518263ffffffff1660e01b81526004016132449190614e5d565b600060405180830381600087803b15801561325e57600080fd5b505af1158015613272573d6000803e3d6000fd5b50506101c554604051636e10dbd760e01b815273__$07e8ed413e81d51a5dfb2d8e1b1fa75af5$__9350636e10dbd792506132c09160058701916001600160a01b03909116906004016154da565b60006040518083038186803b1580156132d857600080fd5b505af41580156132ec573d6000803e3d6000fd5b50506101c554604051636e10dbd760e01b815273__$07e8ed413e81d51a5dfb2d8e1b1fa75af5$__9350636e10dbd792506133379186916001600160a01b03909116906004016154da565b60006040518083038186803b15801561334f57600080fd5b505af4158015613363573d6000803e3d6000fd5b505050505050565b60006116b682614256565b6000808211801561339557506101cc5461339190600261426e565b8211155b6133b15760405162461bcd60e51b815260040161067b906150aa565b604051630257abad60e01b815260009073__$07e8ed413e81d51a5dfb2d8e1b1fa75af5$__90630257abad906133eb908690600401614e5d565b60206040518083038186803b15801561340357600080fd5b505af4158015613417573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061343b9190614b80565b60008181526101cb602052604080822090516337b1b00560e21b81529293509173__$07e8ed413e81d51a5dfb2d8e1b1fa75af5$__9063dec6c01490613485908890600401614e5d565b60206040518083038186803b15801561349d57600080fd5b505af41580156134b1573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906134d59190614a84565b6134e257816005016134e4565b815b95945050505050565b6101c5546000908190613508906001600160a01b031661336b565b6001600160a01b031663430c208133866040518363ffffffff1660e01b8152600401613535929190614cf2565b60206040518083038186803b15801561354d57600080fd5b505afa158015613561573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906135859190614a84565b80156135955750613595336129f8565b6135b15760405162461bcd60e51b815260040161067b906152df565b600083116135d15760405162461bcd60e51b815260040161067b90615220565b60008073__$07e8ed413e81d51a5dfb2d8e1b1fa75af5$__63f7fc24b289896040518363ffffffff1660e01b815260040161360d929190615492565b604080518083038186803b15801561362457600080fd5b505af4158015613638573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061365c9190614b98565b9092509050600061366d83836139d2565b90508086111561368f5760405162461bcd60e51b815260040161067b90615220565b886004015442116136b25760405162461bcd60e51b815260040161067b9061508e565b6000808a60040154600014156137535760018b01546136d19089612a90565b60018c0155506101c55487906136ef906001600160a01b031661336b565b6001600160a01b03166366cbb0378a836040518363ffffffff1660e01b815260040161371c929190614e80565b600060405180830381600087803b15801561373657600080fd5b505af115801561374a573d6000803e3d6000fd5b505050506137e8565b61375d8589614240565b915061376d846132238a85612a90565b6101c554909150613786906001600160a01b031661336b565b6001600160a01b031663b81922058a83856040518463ffffffff1660e01b81526004016137b59392919061550c565b600060405180830381600087803b1580156137cf57600080fd5b505af11580156137e3573d6000803e3d6000fd5b505050505b61380d30336137f784866139d2565b6101c554610b86906001600160a01b0316612e6c565b888a60200151336001600160a01b03167f92f2787b755dae547f1701582fe74c7abf277ec14db316dd01abc69cacf7a259858560405161384e929190614e80565b60405180910390a4909a909950975050505050505050565b60006001600160a01b03821663b93f9b0a6005612f1a565b60006101cc54600014806123885750506101cc546000190160009081526101cb6020526040902060040154151590565b60056101cc54106138d15760405162461bcd60e51b815260040161067b90615001565b6101cc54604051632788c17160e21b815273__$07e8ed413e81d51a5dfb2d8e1b1fa75af5$__91639e2305c49161390e916101cb91600401614e80565b60006040518083038186803b15801561392657600080fd5b505af415801561393a573d6000803e3d6000fd5b50506101cc5461394e9250905060016139d2565b6101cc556101ca55565b60975460ff161561397b5760405162461bcd60e51b815260040161067b90615164565b6097805460ff191660011790557f62e78cea01bee320cd4e420270b5ea74000d11b0c9f74754ebdbfc544b05a25861305f612e99565b60006116b383836142a8565b60006116b3836001600160a01b0384166142ed565b6000828201838110156116b35760405162461bcd60e51b815260040161067b90615057565b60006001600160a01b03821663b93f9b0a6014612f1a565b613a1761387e565b613a335760405162461bcd60e51b815260040161067b906152c3565b6101c35460408051630735c92b60e21b815290516000926001600160a01b031691631cd724ac916004808301926020929190829003018186803b158015613a7957600080fd5b505afa158015613a8d573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190613ab19190614b80565b905060008060006101c360009054906101000a90046001600160a01b03166001600160a01b031663a6a25e886040518163ffffffff1660e01b8152600401606060405180830381600087803b158015613b0957600080fd5b505af1158015613b1d573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190613b419190614bbb565b925092509250613bd8846101c360009054906101000a90046001600160a01b03166001600160a01b0316631cd724ac6040518163ffffffff1660e01b815260040160206040518083038186803b158015613b9a57600080fd5b505afa158015613bae573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190613bd29190614b80565b90612a90565b935060606101cc5467ffffffffffffffff81118015613bf657600080fd5b50604051908082528060200260200182016040528015613c20578160200160208202803683370190505b50905060005b6101cc54811015613dc95760008181526101cb6020526040808220600b01546101c95491516333b8e3b960e21b815273__$07e8ed413e81d51a5dfb2d8e1b1fa75af5$__9263cee38ee492613c80928c929060040161550c565b60206040518083038186803b158015613c9857600080fd5b505af4158015613cac573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190613cd09190614b80565b60008381526101cb602052604090819020600b01546101c95491516333b8e3b960e21b815292935073__$07e8ed413e81d51a5dfb2d8e1b1fa75af5$__9263cee38ee492613d2592899290919060040161550c565b60206040518083038186803b158015613d3d57600080fd5b505af4158015613d51573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190613d759190614b80565b838381518110613d8157fe5b60209081029190910181019190915260008381526101cb90915260409020600a0154613dad90826139d2565b60008381526101cb60205260409020600a015550600101613c26565b506000831180613dd95750600082115b15613fd5576101c354600090613e02906001600160a01b031685613dfd86896139d2565b614305565b905060005b6101cc54811015613e9a57613e4f838281518110613e2157fe5b60200260200101516101cb6000848152602001908152602001600020600b0154612a9090919063ffffffff16565b60008281526101cb60205260409020600b01558251613e8e90849083908110613e7457fe5b60200260200101516101c954612a9090919063ffffffff16565b6101c955600101613e07565b506101c554613eb1906001600160a01b0316614479565b6001600160a01b03166328fc33c7856040518263ffffffff1660e01b8152600401613edc9190614e5d565b600060405180830381600087803b158015613ef657600080fd5b505af1158015613f0a573d6000803e3d6000fd5b50506101c35460408051637df1f1b960e01b815290513094506001600160a01b039092169250637df1f1b9916004808301926020929190829003018186803b158015613f5557600080fd5b505afa158015613f69573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190613f8d91906148ab565b6001600160a01b03167fd1055dc2c2a003a83dfacb1c38db776eab5ef89d77a8f05a3512e8cf57f953ce86868986604051613fcb94939291906154f1565b60405180910390a3505b60405130907fa2380b088ee4df06f20f2bbd1971331d0a68504a9f120cc3b029aeb934f87b3c90600090a25050505050565b60006001600160a01b03821663b93f9b0a6007612f1a565b60006116b682614484565b60006116b68261449c565b60006116b6826144b4565b600081848411156140645760405162461bcd60e51b815260040161067b9190614ecd565b505050900390565b60006116b6826144b8565b6001600160a01b03831661409d5760405162461bcd60e51b815260040161067b90615039565b6040516323b872dd60e01b81526000906001600160a01b038716906323b872dd906140d090889088908890600401614d5b565b602060405180830381600087803b1580156140ea57600080fd5b505af11580156140fe573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906141229190614a84565b905081816141435760405162461bcd60e51b815260040161067b9190614ecd565b50505050505050565b60006116b3836001600160a01b0384166144d0565b6001600160a01b0383166141875760405162461bcd60e51b815260040161067b90615039565b60405163a9059cbb60e01b81526000906001600160a01b0386169063a9059cbb906141b89087908790600401614cf2565b602060405180830381600087803b1580156141d257600080fd5b505af11580156141e6573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061420a9190614a84565b905081816133635760405162461bcd60e51b815260040161067b9190614ecd565b60006116b3836001600160a01b03841661451a565b600081831061424f57816116b3565b5090919050565b60006001600160a01b03821663b93f9b0a600c612f1a565b60008261427d575060006116b6565b8282028284828161428a57fe5b04146116b35760405162461bcd60e51b815260040161067b906151df565b815460009082106142cb5760405162461bcd60e51b815260040161067b90614f20565b8260000182815481106142da57fe5b9060005260206000200154905092915050565b60009081526001919091016020526040902054151590565b60008073__$07e8ed413e81d51a5dfb2d8e1b1fa75af5$__6373665c3c6101cb6101cc54878761435e6143566101c560009054906101000a90046001600160a01b03166001600160a01b03166145e0565b606490614660565b6101c9546101c3546101c6546040516001600160e01b031960e08b901b16815261439b989796959493926001600160a01b03169190600401614e8e565b60206040518083038186803b1580156143b357600080fd5b505af41580156143c7573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906143eb9190614b80565b90506143fc85306137f786886139d2565b6101c554614430903090614418906001600160a01b0316612f06565b6101c5548490610b86906001600160a01b0316612e6c565b306001600160a01b03167ff3583f178a8d4f8888c3683f8e948faf9b6eb701c4f1fab265a6ecad1a1ddebb826040516144699190614e5d565b60405180910390a2949350505050565b60006116b6826139f7565b60006001600160a01b03821663b93f9b0a6013612f1a565b60006001600160a01b03821663b93f9b0a600e612f1a565b5490565b60006001600160a01b03821663b93f9b0a6002612f1a565b60006144dc83836142ed565b614512575081546001818101845560008481526020808220909301849055845484825282860190935260409020919091556116b6565b5060006116b6565b600081815260018301602052604081205480156145d6578354600019808301919081019060009087908390811061454d57fe5b906000526020600020015490508087600001848154811061456a57fe5b60009182526020808320909101929092558281526001898101909252604090209084019055865487908061459a57fe5b600190038181906000526020600020016000905590558660010160008781526020019081526020016000206000905560019450505050506116b6565b60009150506116b6565b604051631f8ac6cb60e31b81526000906001600160a01b0383169063fc5636589061461090600390600401614e5d565b60206040518083038186803b15801561462857600080fd5b505afa15801561463c573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906116b69190614b80565b60006116b383836040518060400160405280601a81526020017f536166654d6174683a206469766973696f6e206279207a65726f000000000000815250600081836146be5760405162461bcd60e51b815260040161067b9190614ecd565b5060008385816146ca57fe5b0495945050505050565b60405180606001604052806003906020820280368337509192915050565b6040518060a0016040528060006001600160a01b03168152602001600081526020016000815260200160008152602001600081525090565b604051806080016040528061473d614802565b815260200161474a614802565b815260200160008152602001600081525090565b60405180602001604052806001906020820280368337509192915050565b8280548282559060005260206000209081019282156147b7579160200282015b828111156147b757825182559160200191906001019061479c565b506147c3929150614831565b5090565b8280548282559060005260206000209081019282156147b7579160200282015b828111156147b75782358255916020019190600101906147e7565b6040518060a0016040528060008152602001600081526020016000815260200160008152602001600081525090565b5b808211156147c35760008155600101614832565b60008083601f840112614857578182fd5b50813567ffffffffffffffff81111561486e578182fd5b602083019150836020808302850101111561488857600080fd5b9250929050565b6000602082840312156148a0578081fd5b81356116b381615522565b6000602082840312156148bc578081fd5b81516116b381615522565b6000806000806000806000806000806000806101608d8f0312156148e9578788fd5b6148f38d35615522565b8c359b5061490460208e0135615522565b60208d01359a5060408d0135995060608d0135985060808d0135975060a08d0135965060c08d0135955060e08d013594506101008d013593506101208d0135925067ffffffffffffffff6101408e0135111561495e578081fd5b61496f8e6101408f01358f01614846565b81935080925050509295989b509295989b509295989b565b600080600080600080600060e0888a0312156149a1578283fd5b87356149ac81615522565b9960208901359950604089013598606081013598506080810135975060a0810135965060c00135945092505050565b600080602083850312156149ed578182fd5b823567ffffffffffffffff811115614a03578283fd5b614a0f85828601614846565b90969095509350505050565b60008060008060408587031215614a30578384fd5b843567ffffffffffffffff80821115614a47578586fd5b614a5388838901614846565b90965094506020870135915080821115614a6b578384fd5b50614a7887828801614846565b95989497509550505050565b600060208284031215614a95578081fd5b815180151581146116b3578182fd5b600060208284031215614ab5578081fd5b5035919050565b60008060408385031215614ace578182fd5b823591506020830135614ae081615522565b809150509250929050565b60008060408385031215614afd578182fd5b50508035926020909101359150565b600060a08284031215614b1d578081fd5b60405160a0810181811067ffffffffffffffff82111715614b3c578283fd5b6040528251614b4a81615522565b80825250602083015160208201526040830151604082015260608301516060820152608083015160808201528091505092915050565b600060208284031215614b91578081fd5b5051919050565b60008060408385031215614baa578182fd5b505080516020909101519092909150565b600080600060608486031215614bcf578081fd5b8351925060208401519150604084015190509250925092565b60008060008060008060c08789031215614c00578384fd5b863595506020870135945060408701359350606087013560ff81168114614c25578283fd5b9598949750929560808101359460a0909101359350915050565b80518252602081015160208301526040810151604083015260608101516060830152608081015160808301525050565b8054825260018101546020830152600281015460408301526003810154606083015260040154608090910152565b6001600160a01b0391909116815260200190565b6001600160a01b0397881681529590961660208601526040850193909352606084019190915260ff16608083015260a082015260c081019190915260e00190565b6001600160a01b03929092168252602082015260400190565b6001600160a01b03998a16815297891660208901529590971660408701526060860193909352608085019190915260a084015260c083015260e08201929092526101008101919091526101200190565b6001600160a01b039384168152919092166020820152604081019190915260600190565b6001600160a01b0383168152604060208083018290528354918301829052600084815281812090929091906060850190845b81811015614dcd57845483526001948501949284019201614db1565b5090979650505050505050565b6020808252825182820181905260009190848201906040850190845b81811015614e1257835183529284019291840191600101614df6565b50909695505050505050565b60608101818360005b6003811015614e4957815160ff16835260209283019290910190600101614e27565b50505092915050565b901515815260200190565b90815260200190565b6001600160a01b0392831681529116602082015260400190565b918252602082015260400190565b978852602088019690965260408701949094526060860192909252608085015260a08401526001600160a01b031660c083015260e08201526101000190565b6000602080835283518082850152825b81811015614ef957858101830151858201604001528201614edd565b81811115614f0a5783604083870101525b50601f01601f1916929092016040019392505050565b60208082526022908201527f456e756d657261626c655365743a20696e646578206f7574206f6620626f756e604082015261647360f01b606082015260800190565b6020808252600890820152672737ba1037b832b760c11b604082015260600190565b6020808252602f908201527f416363657373436f6e74726f6c3a2073656e646572206d75737420626520616e60408201526e0818591b5a5b881d1bc819dc985b9d608a1b606082015260800190565b60208082526014908201527314185d5cd8589b194e881b9bdd081c185d5cd95960621b604082015260600190565b60208082526002908201526114d360f21b604082015260600190565b602080825260029082015261044560f41b604082015260600190565b6020808252600490820152635a45524f60e01b604082015260600190565b6020808252601b908201527f536166654d6174683a206164646974696f6e206f766572666c6f770000000000604082015260600190565b602080825260029082015261151360f21b604082015260600190565b6020808252600f908201526e696e76616c6964207472616e63686560881b604082015260600190565b6020808252600b908201526a6861732062616c616e636560a81b604082015260600190565b602080825260029082015261047560f41b604082015260600190565b60208082526030908201527f416363657373436f6e74726f6c3a2073656e646572206d75737420626520616e60408201526f2061646d696e20746f207265766f6b6560801b606082015260800190565b60208082526010908201526f14185d5cd8589b194e881c185d5cd95960821b604082015260600190565b60208082526002908201526124a360f11b604082015260600190565b6020808252818101527f4f776e65722063616e6e6f7420626520746865207a65726f2061646472657373604082015260600190565b60208082526021908201527f536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f6040820152607760f81b606082015260800190565b602080825260029082015261494160f01b604082015260600190565b60208082526002908201526104c560f41b604082015260600190565b6020808252602e908201527f436f6e747261637420696e7374616e63652068617320616c726561647920626560408201526d195b881a5b9a5d1a585b1a5e995960921b606082015260800190565b6020808252600390820152622622a760e91b604082015260600190565b602080825260029082015261139360f21b604082015260600190565b6020808252600290820152614e4160f01b604082015260600190565b6020808252601f908201527f5265656e7472616e637947756172643a207265656e7472616e742063616c6c00604082015260600190565b6020808252602b908201527f4d75737420686176652061646d696e20726f6c6520746f20706572666f726d2060408201526a3a3434b99030b1ba34b7b760a91b606082015260800190565b6020808252602f908201527f416363657373436f6e74726f6c3a2063616e206f6e6c792072656e6f756e636560408201526e103937b632b9903337b91039b2b63360891b606082015260800190565b82518152602092830151928101929092526001600160a01b0316604082015260600190565b600061018082019050615405828451614c3f565b602083015161541760a0840182614c3f565b5060408301516101408301526060909201516101609091015290565b60a081016116b68284614c3f565b61024081016154508286614c3f565b8360a083015261546360c0830184614c6f565b615474610160830160058501614c6f565b600a830154610200830152600b830154610220830152949350505050565b91825280516001600160a01b0316602080840191909152810151604080840191909152810151606080840191909152810151608080840191909152015160a082015260c00190565b9182526001600160a01b0316602082015260400190565b93845260208401929092526040830152606082015260800190565b9283526020830191909152604082015260600190565b6001600160a01b0381168114610c7d57600080fdfeb19546dff01e856fb3f010c267a7b1c60363cf8a4664e21cc89c26224620214e65d7a28e3265b37a6474929f336521b332c1681b933f6cb9f3376673440d862a956624bfbe09c0e98e645d61eba0de4ce88e8cceabdb00fead208d19a8e1209baf9a8bb3cbd6b84fbccefa71ff73e26e798553c6914585a84886212a46a90279a26469706673582212206b21b841db2211ea873dc4d54cd191c75ba8ea44984c7366e2d6603a9a9ae89964736f6c634300060c0033",
  "libraries": {
    "TranchingLogic": "0xA8CaC9022164B3b7a6ab764227dBC38B8D47eef1"
  },
  "devdoc": {
    "kind": "dev",
    "methods": {
      "availableToWithdraw(uint256)": {
        "params": {
          "tokenId": "The token representing the position"
        },
        "returns": {
          "_0": "interestRedeemable The interest available to redeem",
          "_1": "principalRedeemable The principal available to redeem"
        }
      },
      "deposit(uint256,uint256)": {
        "params": {
          "amount": "The USDC amount to tranfer from the caller to the pool",
          "tranche": "The number representing the tranche to deposit into"
        },
        "returns": {
          "_0": "tokenId The tokenId of the NFT"
        }
      },
      "drawdown(uint256)": {
        "params": {
          "amount": "The amount to drawdown from the creditline (must be < limit)"
        }
      },
      "getRoleAdmin(bytes32)": {
        "details": "Returns the admin role that controls `role`. See {grantRole} and {revokeRole}. To change a role's admin, use {_setRoleAdmin}."
      },
      "getRoleMember(bytes32,uint256)": {
        "details": "Returns one of the accounts that have `role`. `index` must be a value between 0 and {getRoleMemberCount}, non-inclusive. Role bearers are not sorted in any particular way, and their ordering may change at any point. WARNING: When using {getRoleMember} and {getRoleMemberCount}, make sure you perform all queries on the same block. See the following https://forum.openzeppelin.com/t/iterating-over-elements-on-enumerableset-in-openzeppelin-contracts/2296[forum post] for more information."
      },
      "getRoleMemberCount(bytes32)": {
        "details": "Returns the number of accounts that have `role`. Can be used together with {getRoleMember} to enumerate all bearers of a role."
      },
      "grantRole(bytes32,address)": {
        "details": "Grants `role` to `account`. If `account` had not been already granted `role`, emits a {RoleGranted} event. Requirements: - the caller must have ``role``'s admin role."
      },
      "hasRole(bytes32,address)": {
        "details": "Returns `true` if `account` has been granted `role`."
      },
      "migrateCreditLine(address,uint256,uint256,uint256,uint256,uint256,uint256)": {
        "params": {
          "_borrower": "The borrower address",
          "_interestApr": "The new interest APR",
          "_lateFeeApr": "The new late fee APR",
          "_maxLimit": "The new max limit",
          "_paymentPeriodInDays": "The new payment period in days",
          "_termInDays": "The new term in days"
        }
      },
      "pause()": {
        "details": "Pauses all functions guarded by Pause See {Pausable-_pause}. Requirements: - the caller must have the PAUSER_ROLE."
      },
      "paused()": {
        "details": "Returns true if the contract is paused, and false otherwise."
      },
      "pay(uint256)": {
        "params": {
          "amount": "The amount to repay"
        }
      },
      "renounceRole(bytes32,address)": {
        "details": "Revokes `role` from the calling account. Roles are often managed via {grantRole} and {revokeRole}: this function's purpose is to provide a mechanism for accounts to lose their privileges if they are compromised (such as when a trusted device is misplaced). If the calling account had been granted `role`, emits a {RoleRevoked} event. Requirements: - the caller must be `account`."
      },
      "revokeRole(bytes32,address)": {
        "details": "Revokes `role` from `account`. If `account` had been granted `role`, emits a {RoleRevoked} event. Requirements: - the caller must have ``role``'s admin role."
      },
      "totalJuniorDeposits()": {
        "returns": {
          "_0": "The total USDC amount deposited into all junior tranches"
        }
      },
      "unpause()": {
        "details": "Unpauses the contract See {Pausable-_unpause}. Requirements: - the caller must have the Pauser role"
      },
      "withdraw(uint256,uint256)": {
        "params": {
          "amount": "The amount to withdraw (must be <= interest+principal currently available to withdraw)",
          "tokenId": "The NFT representing the position"
        },
        "returns": {
          "_0": "interestWithdrawn The interest amount that was withdrawn",
          "_1": "principalWithdrawn The principal amount that was withdrawn"
        }
      },
      "withdrawMax(uint256)": {
        "params": {
          "tokenId": "The NFT representing the position"
        },
        "returns": {
          "interestWithdrawn": "The interest amount that was withdrawn",
          "principalWithdrawn": "The principal amount that was withdrawn"
        }
      },
      "withdrawMultiple(uint256[],uint256[])": {
        "params": {
          "amounts": "An array of amounts to withdraw from the corresponding tokenIds",
          "tokenIds": "An array of tokens ids representing the position"
        }
      }
    },
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {
      "assess()": {
        "notice": "Triggers an assessment of the creditline and the applies the payments according the tranche waterfall"
      },
      "availableToWithdraw(uint256)": {
        "notice": "Determines the amount of interest and principal redeemable by a particular tokenId"
      },
      "deposit(uint256,uint256)": {
        "notice": "Deposit a USDC amount into the pool for a tranche. Mints an NFT to the caller representing the position"
      },
      "drawdown(uint256)": {
        "notice": "Draws down the funds (and locks the pool) to the borrower address. Can only be called by the borrower"
      },
      "emergencyShutdown()": {
        "notice": "Pauses the pool and sweeps any remaining funds to the treasury reserve."
      },
      "getVersion()": {
        "notice": "Returns the version triplet `[major, minor, patch]`"
      },
      "lockJuniorCapital()": {
        "notice": "Locks the junior tranche, preventing more junior deposits. Gives time for the senior to determine how much to invest (ensure leverage ratio cannot change for the period)"
      },
      "lockPool()": {
        "notice": "Locks the pool (locks both senior and junior tranches and starts the drawdown period). Beyond the drawdown period, any unused capital is available to withdraw by all depositors"
      },
      "migrateCreditLine(address,uint256,uint256,uint256,uint256,uint256,uint256)": {
        "notice": "Migrates the accounting variables from the current creditline to a brand new one"
      },
      "pauseDrawdowns()": {
        "notice": "Pauses all drawdowns (but not deposits/withdraws)"
      },
      "pay(uint256)": {
        "notice": "Allows repaying the creditline. Collects the USDC amount from the sender and triggers an assess"
      },
      "totalJuniorDeposits()": {
        "notice": "Returns the total junior capital deposited"
      },
      "unpauseDrawdowns()": {
        "notice": "Unpause drawdowns"
      },
      "withdraw(uint256,uint256)": {
        "notice": "Withdraw an already deposited amount if the funds are available"
      },
      "withdrawMax(uint256)": {
        "notice": "Similar to withdraw but will withdraw all available funds"
      },
      "withdrawMultiple(uint256[],uint256[])": {
        "notice": "Withdraw from many tokens (that the sender owns) in a single transaction"
      }
    },
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 50,
        "contract": "contracts/protocol/core/TranchedPool.sol:TranchedPool",
        "label": "initialized",
        "offset": 0,
        "slot": "0",
        "type": "t_bool"
      },
      {
        "astId": 53,
        "contract": "contracts/protocol/core/TranchedPool.sol:TranchedPool",
        "label": "initializing",
        "offset": 1,
        "slot": "0",
        "type": "t_bool"
      },
      {
        "astId": 118,
        "contract": "contracts/protocol/core/TranchedPool.sol:TranchedPool",
        "label": "______gap",
        "offset": 0,
        "slot": "1",
        "type": "t_array(t_uint256)50_storage"
      },
      {
        "astId": 43,
        "contract": "contracts/protocol/core/TranchedPool.sol:TranchedPool",
        "label": "__gap",
        "offset": 0,
        "slot": "51",
        "type": "t_array(t_uint256)50_storage"
      },
      {
        "astId": 163,
        "contract": "contracts/protocol/core/TranchedPool.sol:TranchedPool",
        "label": "_roles",
        "offset": 0,
        "slot": "101",
        "type": "t_mapping(t_bytes32,t_struct(RoleData)159_storage)"
      },
      {
        "astId": 408,
        "contract": "contracts/protocol/core/TranchedPool.sol:TranchedPool",
        "label": "__gap",
        "offset": 0,
        "slot": "102",
        "type": "t_array(t_uint256)49_storage"
      },
      {
        "astId": 3207,
        "contract": "contracts/protocol/core/TranchedPool.sol:TranchedPool",
        "label": "_paused",
        "offset": 0,
        "slot": "151",
        "type": "t_bool"
      },
      {
        "astId": 3296,
        "contract": "contracts/protocol/core/TranchedPool.sol:TranchedPool",
        "label": "__gap",
        "offset": 0,
        "slot": "152",
        "type": "t_array(t_uint256)49_storage"
      },
      {
        "astId": 3305,
        "contract": "contracts/protocol/core/TranchedPool.sol:TranchedPool",
        "label": "_notEntered",
        "offset": 0,
        "slot": "201",
        "type": "t_bool"
      },
      {
        "astId": 3346,
        "contract": "contracts/protocol/core/TranchedPool.sol:TranchedPool",
        "label": "__gap",
        "offset": 0,
        "slot": "202",
        "type": "t_array(t_uint256)49_storage"
      },
      {
        "astId": 12077,
        "contract": "contracts/protocol/core/TranchedPool.sol:TranchedPool",
        "label": "__gap1",
        "offset": 0,
        "slot": "251",
        "type": "t_array(t_uint256)50_storage"
      },
      {
        "astId": 12081,
        "contract": "contracts/protocol/core/TranchedPool.sol:TranchedPool",
        "label": "__gap2",
        "offset": 0,
        "slot": "301",
        "type": "t_array(t_uint256)50_storage"
      },
      {
        "astId": 12085,
        "contract": "contracts/protocol/core/TranchedPool.sol:TranchedPool",
        "label": "__gap3",
        "offset": 0,
        "slot": "351",
        "type": "t_array(t_uint256)50_storage"
      },
      {
        "astId": 12089,
        "contract": "contracts/protocol/core/TranchedPool.sol:TranchedPool",
        "label": "__gap4",
        "offset": 0,
        "slot": "401",
        "type": "t_array(t_uint256)50_storage"
      },
      {
        "astId": 10396,
        "contract": "contracts/protocol/core/TranchedPool.sol:TranchedPool",
        "label": "creditLine",
        "offset": 0,
        "slot": "451",
        "type": "t_contract(IV2CreditLine)10701"
      },
      {
        "astId": 10398,
        "contract": "contracts/protocol/core/TranchedPool.sol:TranchedPool",
        "label": "createdAt",
        "offset": 0,
        "slot": "452",
        "type": "t_uint256"
      },
      {
        "astId": 19120,
        "contract": "contracts/protocol/core/TranchedPool.sol:TranchedPool",
        "label": "config",
        "offset": 0,
        "slot": "453",
        "type": "t_contract(GoldfinchConfig)15934"
      },
      {
        "astId": 19153,
        "contract": "contracts/protocol/core/TranchedPool.sol:TranchedPool",
        "label": "juniorFeePercent",
        "offset": 0,
        "slot": "454",
        "type": "t_uint256"
      },
      {
        "astId": 19155,
        "contract": "contracts/protocol/core/TranchedPool.sol:TranchedPool",
        "label": "drawdownsPaused",
        "offset": 0,
        "slot": "455",
        "type": "t_bool"
      },
      {
        "astId": 19158,
        "contract": "contracts/protocol/core/TranchedPool.sol:TranchedPool",
        "label": "allowedUIDTypes",
        "offset": 0,
        "slot": "456",
        "type": "t_array(t_uint256)dyn_storage"
      },
      {
        "astId": 19160,
        "contract": "contracts/protocol/core/TranchedPool.sol:TranchedPool",
        "label": "totalDeployed",
        "offset": 0,
        "slot": "457",
        "type": "t_uint256"
      },
      {
        "astId": 19162,
        "contract": "contracts/protocol/core/TranchedPool.sol:TranchedPool",
        "label": "fundableAt",
        "offset": 0,
        "slot": "458",
        "type": "t_uint256"
      },
      {
        "astId": 19166,
        "contract": "contracts/protocol/core/TranchedPool.sol:TranchedPool",
        "label": "_poolSlices",
        "offset": 0,
        "slot": "459",
        "type": "t_mapping(t_uint256,t_struct(PoolSlice)10422_storage)"
      },
      {
        "astId": 19169,
        "contract": "contracts/protocol/core/TranchedPool.sol:TranchedPool",
        "label": "numSlices",
        "offset": 0,
        "slot": "460",
        "type": "t_uint256"
      }
    ],
    "types": {
      "t_array(t_bytes32)dyn_storage": {
        "base": "t_bytes32",
        "encoding": "dynamic_array",
        "label": "bytes32[]",
        "numberOfBytes": "32"
      },
      "t_array(t_uint256)49_storage": {
        "base": "t_uint256",
        "encoding": "inplace",
        "label": "uint256[49]",
        "numberOfBytes": "1568"
      },
      "t_array(t_uint256)50_storage": {
        "base": "t_uint256",
        "encoding": "inplace",
        "label": "uint256[50]",
        "numberOfBytes": "1600"
      },
      "t_array(t_uint256)dyn_storage": {
        "base": "t_uint256",
        "encoding": "dynamic_array",
        "label": "uint256[]",
        "numberOfBytes": "32"
      },
      "t_bool": {
        "encoding": "inplace",
        "label": "bool",
        "numberOfBytes": "1"
      },
      "t_bytes32": {
        "encoding": "inplace",
        "label": "bytes32",
        "numberOfBytes": "32"
      },
      "t_contract(GoldfinchConfig)15934": {
        "encoding": "inplace",
        "label": "contract GoldfinchConfig",
        "numberOfBytes": "20"
      },
      "t_contract(IV2CreditLine)10701": {
        "encoding": "inplace",
        "label": "contract IV2CreditLine",
        "numberOfBytes": "20"
      },
      "t_mapping(t_bytes32,t_struct(RoleData)159_storage)": {
        "encoding": "mapping",
        "key": "t_bytes32",
        "label": "mapping(bytes32 => struct AccessControlUpgradeSafe.RoleData)",
        "numberOfBytes": "32",
        "value": "t_struct(RoleData)159_storage"
      },
      "t_mapping(t_bytes32,t_uint256)": {
        "encoding": "mapping",
        "key": "t_bytes32",
        "label": "mapping(bytes32 => uint256)",
        "numberOfBytes": "32",
        "value": "t_uint256"
      },
      "t_mapping(t_uint256,t_struct(PoolSlice)10422_storage)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => struct ITranchedPool.PoolSlice)",
        "numberOfBytes": "32",
        "value": "t_struct(PoolSlice)10422_storage"
      },
      "t_struct(AddressSet)2982_storage": {
        "encoding": "inplace",
        "label": "struct EnumerableSet.AddressSet",
        "members": [
          {
            "astId": 2981,
            "contract": "contracts/protocol/core/TranchedPool.sol:TranchedPool",
            "label": "_inner",
            "offset": 0,
            "slot": "0",
            "type": "t_struct(Set)2802_storage"
          }
        ],
        "numberOfBytes": "64"
      },
      "t_struct(PoolSlice)10422_storage": {
        "encoding": "inplace",
        "label": "struct ITranchedPool.PoolSlice",
        "members": [
          {
            "astId": 10415,
            "contract": "contracts/protocol/core/TranchedPool.sol:TranchedPool",
            "label": "seniorTranche",
            "offset": 0,
            "slot": "0",
            "type": "t_struct(TrancheInfo)10413_storage"
          },
          {
            "astId": 10417,
            "contract": "contracts/protocol/core/TranchedPool.sol:TranchedPool",
            "label": "juniorTranche",
            "offset": 0,
            "slot": "5",
            "type": "t_struct(TrancheInfo)10413_storage"
          },
          {
            "astId": 10419,
            "contract": "contracts/protocol/core/TranchedPool.sol:TranchedPool",
            "label": "totalInterestAccrued",
            "offset": 0,
            "slot": "10",
            "type": "t_uint256"
          },
          {
            "astId": 10421,
            "contract": "contracts/protocol/core/TranchedPool.sol:TranchedPool",
            "label": "principalDeployed",
            "offset": 0,
            "slot": "11",
            "type": "t_uint256"
          }
        ],
        "numberOfBytes": "384"
      },
      "t_struct(RoleData)159_storage": {
        "encoding": "inplace",
        "label": "struct AccessControlUpgradeSafe.RoleData",
        "members": [
          {
            "astId": 156,
            "contract": "contracts/protocol/core/TranchedPool.sol:TranchedPool",
            "label": "members",
            "offset": 0,
            "slot": "0",
            "type": "t_struct(AddressSet)2982_storage"
          },
          {
            "astId": 158,
            "contract": "contracts/protocol/core/TranchedPool.sol:TranchedPool",
            "label": "adminRole",
            "offset": 0,
            "slot": "2",
            "type": "t_bytes32"
          }
        ],
        "numberOfBytes": "96"
      },
      "t_struct(Set)2802_storage": {
        "encoding": "inplace",
        "label": "struct EnumerableSet.Set",
        "members": [
          {
            "astId": 2797,
            "contract": "contracts/protocol/core/TranchedPool.sol:TranchedPool",
            "label": "_values",
            "offset": 0,
            "slot": "0",
            "type": "t_array(t_bytes32)dyn_storage"
          },
          {
            "astId": 2801,
            "contract": "contracts/protocol/core/TranchedPool.sol:TranchedPool",
            "label": "_indexes",
            "offset": 0,
            "slot": "1",
            "type": "t_mapping(t_bytes32,t_uint256)"
          }
        ],
        "numberOfBytes": "64"
      },
      "t_struct(TrancheInfo)10413_storage": {
        "encoding": "inplace",
        "label": "struct ITranchedPool.TrancheInfo",
        "members": [
          {
            "astId": 10404,
            "contract": "contracts/protocol/core/TranchedPool.sol:TranchedPool",
            "label": "id",
            "offset": 0,
            "slot": "0",
            "type": "t_uint256"
          },
          {
            "astId": 10406,
            "contract": "contracts/protocol/core/TranchedPool.sol:TranchedPool",
            "label": "principalDeposited",
            "offset": 0,
            "slot": "1",
            "type": "t_uint256"
          },
          {
            "astId": 10408,
            "contract": "contracts/protocol/core/TranchedPool.sol:TranchedPool",
            "label": "principalSharePrice",
            "offset": 0,
            "slot": "2",
            "type": "t_uint256"
          },
          {
            "astId": 10410,
            "contract": "contracts/protocol/core/TranchedPool.sol:TranchedPool",
            "label": "interestSharePrice",
            "offset": 0,
            "slot": "3",
            "type": "t_uint256"
          },
          {
            "astId": 10412,
            "contract": "contracts/protocol/core/TranchedPool.sol:TranchedPool",
            "label": "lockedUntil",
            "offset": 0,
            "slot": "4",
            "type": "t_uint256"
          }
        ],
        "numberOfBytes": "160"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      }
    }
  }
}