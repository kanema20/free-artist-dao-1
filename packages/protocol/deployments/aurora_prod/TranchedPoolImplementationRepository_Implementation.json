{
  "address": "0xDA832b27E91d4B42205e155609baa9C93368a66F",
  "abi": [
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "lineageId",
          "type": "uint256"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "newImplementation",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "oldImplementation",
          "type": "address"
        }
      ],
      "name": "Added",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "Paused",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "lineageId",
          "type": "uint256"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "implementation",
          "type": "address"
        }
      ],
      "name": "Removed",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "account",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "sender",
          "type": "address"
        }
      ],
      "name": "RoleGranted",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "account",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "sender",
          "type": "address"
        }
      ],
      "name": "RoleRevoked",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "Unpaused",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "implementation",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "bytes",
          "name": "data",
          "type": "bytes"
        }
      ],
      "name": "UpgradeDataSet",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "uint8[3]",
          "name": "version",
          "type": "uint8[3]"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "impl",
          "type": "address"
        }
      ],
      "name": "VersionAdded",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "uint8[3]",
          "name": "version",
          "type": "uint8[3]"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "impl",
          "type": "address"
        }
      ],
      "name": "VersionRemoved",
      "type": "event"
    },
    {
      "inputs": [],
      "name": "DEFAULT_ADMIN_ROLE",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "OWNER_ROLE",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "PAUSER_ROLE",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "owner",
          "type": "address"
        }
      ],
      "name": "__BaseUpgradeablePausable__init",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "__PauserPausable__init",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "implementation",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "lineageId",
          "type": "uint256"
        }
      ],
      "name": "append",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "implementation",
          "type": "address"
        }
      ],
      "name": "append",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "implementation",
          "type": "address"
        }
      ],
      "name": "createLineage",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "currentImplementation",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "lineageId",
          "type": "uint256"
        }
      ],
      "name": "currentImplementation",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "currentLineageId",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint8[3]",
          "name": "version",
          "type": "uint8[3]"
        }
      ],
      "name": "getByVersion",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        }
      ],
      "name": "getRoleAdmin",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "internalType": "uint256",
          "name": "index",
          "type": "uint256"
        }
      ],
      "name": "getRoleMember",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        }
      ],
      "name": "getRoleMemberCount",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "grantRole",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "implementation",
          "type": "address"
        }
      ],
      "name": "has",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "implementation",
          "type": "address"
        }
      ],
      "name": "hasNext",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "hasRole",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint8[3]",
          "name": "version",
          "type": "uint8[3]"
        }
      ],
      "name": "hasVersion",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_owner",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "implementation",
          "type": "address"
        }
      ],
      "name": "initialize",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "isAdmin",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "lineageId",
          "type": "uint256"
        }
      ],
      "name": "lineageExists",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "lineageIdOf",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "implementation",
          "type": "address"
        }
      ],
      "name": "nextImplementationOf",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "pause",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "paused",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "toRemove",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "previous",
          "type": "address"
        }
      ],
      "name": "remove",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "renounceRole",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "revokeRole",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "implementation",
          "type": "address"
        },
        {
          "internalType": "bytes",
          "name": "data",
          "type": "bytes"
        }
      ],
      "name": "setUpgradeDataFor",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "unpause",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "upgradeDataFor",
      "outputs": [
        {
          "internalType": "bytes",
          "name": "",
          "type": "bytes"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    }
  ],
  "transactionHash": "0xb309b265fb3002db696f88354c8994f509ef3327892c80bec785058dc08bb007",
  "receipt": {
    "to": null,
    "from": "0x108Cc3833CD49333A7908e4bB52f4CF8f4090425",
    "contractAddress": "0xDA832b27E91d4B42205e155609baa9C93368a66F",
    "transactionIndex": 0,
    "gasUsed": "1905087",
    "logsBloom": "0x
    "blockHash": "0x8a98ea8369c85dc810723529bb1a15c2f7bf3c5450fca4200d51904c7b4b3f1e",
    "transactionHash": "0xb309b265fb3002db696f88354c8994f509ef3327892c80bec785058dc08bb007",
    "logs": [],
    "blockNumber": 82673767,
    "cumulativeGasUsed": "0",
    "status": 1,
    "byzantium": true
  },
  "args": [],
  "solcInputHash": "bf6f46dcbe6f600dbdc728698b461228",
  "metadata": "{\"compiler\":{\"version\":\"0.6.12+commit.27d51765\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"lineageId\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newImplementation\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"oldImplementation\",\"type\":\"address\"}],\"name\":\"Added\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"Paused\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"lineageId\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"implementation\",\"type\":\"address\"}],\"name\":\"Removed\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"}],\"name\":\"RoleGranted\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"}],\"name\":\"RoleRevoked\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"Unpaused\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"implementation\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"name\":\"UpgradeDataSet\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint8[3]\",\"name\":\"version\",\"type\":\"uint8[3]\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"impl\",\"type\":\"address\"}],\"name\":\"VersionAdded\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint8[3]\",\"name\":\"version\",\"type\":\"uint8[3]\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"impl\",\"type\":\"address\"}],\"name\":\"VersionRemoved\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"DEFAULT_ADMIN_ROLE\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"OWNER_ROLE\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"PAUSER_ROLE\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"__BaseUpgradeablePausable__init\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"__PauserPausable__init\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"implementation\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"lineageId\",\"type\":\"uint256\"}],\"name\":\"append\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"implementation\",\"type\":\"address\"}],\"name\":\"append\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"implementation\",\"type\":\"address\"}],\"name\":\"createLineage\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"currentImplementation\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"lineageId\",\"type\":\"uint256\"}],\"name\":\"currentImplementation\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"currentLineageId\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint8[3]\",\"name\":\"version\",\"type\":\"uint8[3]\"}],\"name\":\"getByVersion\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"}],\"name\":\"getRoleAdmin\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"uint256\",\"name\":\"index\",\"type\":\"uint256\"}],\"name\":\"getRoleMember\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"}],\"name\":\"getRoleMemberCount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"grantRole\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"implementation\",\"type\":\"address\"}],\"name\":\"has\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"implementation\",\"type\":\"address\"}],\"name\":\"hasNext\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"hasRole\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint8[3]\",\"name\":\"version\",\"type\":\"uint8[3]\"}],\"name\":\"hasVersion\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"implementation\",\"type\":\"address\"}],\"name\":\"initialize\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"isAdmin\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"lineageId\",\"type\":\"uint256\"}],\"name\":\"lineageExists\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"lineageIdOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"implementation\",\"type\":\"address\"}],\"name\":\"nextImplementationOf\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"pause\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"paused\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"toRemove\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"previous\",\"type\":\"address\"}],\"name\":\"remove\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"renounceRole\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"revokeRole\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"implementation\",\"type\":\"address\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"name\":\"setUpgradeDataFor\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"unpause\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"upgradeDataFor\",\"outputs\":[{\"internalType\":\"bytes\",\"name\":\"\",\"type\":\"bytes\"}],\"stateMutability\":\"view\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"append(address)\":{\"details\":\"reverts if the sender is not an ownerreverts if the contract is pausedreverts if `implementation` is not a contract\",\"params\":{\"implementation\":\"implementation to append\"}},\"append(address,uint256)\":{\"details\":\"reverts if the contract is pausedreverts if the sender is not an ownerreverts if `implementation` is not a contract\",\"params\":{\"implementation\":\"implementation to append\",\"lineageId\":\"id of lineage to append to\"}},\"createLineage(address)\":{\"details\":\"reverts if `implementation` is not a contract\",\"params\":{\"implementation\":\"implementation that will be the first implementation in the lineage\"},\"returns\":{\"_0\":\"newly created lineage's id\"}},\"getByVersion(uint8[3])\":{\"params\":{\"version\":\"`[major, minor, patch]` version tag\"},\"returns\":{\"_0\":\"implementation associated with the given version tag\"}},\"getRoleAdmin(bytes32)\":{\"details\":\"Returns the admin role that controls `role`. See {grantRole} and {revokeRole}. To change a role's admin, use {_setRoleAdmin}.\"},\"getRoleMember(bytes32,uint256)\":{\"details\":\"Returns one of the accounts that have `role`. `index` must be a value between 0 and {getRoleMemberCount}, non-inclusive. Role bearers are not sorted in any particular way, and their ordering may change at any point. WARNING: When using {getRoleMember} and {getRoleMemberCount}, make sure you perform all queries on the same block. See the following https://forum.openzeppelin.com/t/iterating-over-elements-on-enumerableset-in-openzeppelin-contracts/2296[forum post] for more information.\"},\"getRoleMemberCount(bytes32)\":{\"details\":\"Returns the number of accounts that have `role`. Can be used together with {getRoleMember} to enumerate all bearers of a role.\"},\"grantRole(bytes32,address)\":{\"details\":\"Grants `role` to `account`. If `account` had not been already granted `role`, emits a {RoleGranted} event. Requirements: - the caller must have ``role``'s admin role.\"},\"has(address)\":{\"params\":{\"implementation\":\"Implementation to check existence of\"},\"returns\":{\"_0\":\"`true` if the implementation has already been added\"}},\"hasNext(address)\":{\"params\":{\"implementation\":\"implementation to check\"},\"returns\":{\"_0\":\"The implementation following the given implementation\"}},\"hasRole(bytes32,address)\":{\"details\":\"Returns `true` if `account` has been granted `role`.\"},\"hasVersion(uint8[3])\":{\"params\":{\"version\":\"`[major, minor, patch]` version tag\"},\"returns\":{\"_0\":\"true if the version is registered\"}},\"initialize(address,address)\":{\"details\":\"reverts if `_owner` is the null addressreverts if `implementation` is not a contract\",\"params\":{\"_owner\":\"owner of the repository\",\"implementation\":\"initial implementation in the repository\"}},\"nextImplementationOf(address)\":{\"details\":\"reverts when contract is paused\",\"params\":{\"implementation\":\"implementation to get the upgraded implementation for\"},\"returns\":{\"_0\":\"Next Implementation\"}},\"pause()\":{\"details\":\"Pauses all functions guarded by Pause See {Pausable-_pause}. Requirements: - the caller must have the PAUSER_ROLE.\"},\"paused()\":{\"details\":\"Returns true if the contract is paused, and false otherwise.\"},\"remove(address,address)\":{\"details\":\"If you have a chain of `A -> B -> C` and I call `remove(B, C)` it will result in `A -> C`reverts if `previos` is not the ancestor of `toRemove`we need to provide the previous implementation here to be able to successfully \\\"stitch\\\"       the chain back together. Because this is an admin action, we can source what the previous       version is from events.\",\"params\":{\"previous\":\"Implementation that currently has `toRemove` as its successor\",\"toRemove\":\"Implementation to remove\"}},\"renounceRole(bytes32,address)\":{\"details\":\"Revokes `role` from the calling account. Roles are often managed via {grantRole} and {revokeRole}: this function's purpose is to provide a mechanism for accounts to lose their privileges if they are compromised (such as when a trusted device is misplaced). If the calling account had been granted `role`, emits a {RoleRevoked} event. Requirements: - the caller must be `account`.\"},\"revokeRole(bytes32,address)\":{\"details\":\"Revokes `role` from `account`. If `account` had been granted `role`, emits a {RoleRevoked} event. Requirements: - the caller must have ``role``'s admin role.\"},\"setUpgradeDataFor(address,bytes)\":{\"details\":\"reverts when caller is not an adminreverts when the contract is pausedreverts if the given implementation isn't registered\"},\"unpause()\":{\"details\":\"Unpauses the contract See {Pausable-_unpause}. Requirements: - the caller must have the Pauser role\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"append(address)\":{\"notice\":\"add a new implementation and set it as the current implementation\"},\"append(address,uint256)\":{\"notice\":\"Append an implementation to a specified lineage\"},\"createLineage(address)\":{\"notice\":\"Create a new lineage of implementations. This creates a new \\\"root\\\" of a new lineage\"},\"currentImplementation()\":{\"notice\":\"return current implementaton of the current lineage\"},\"currentImplementation(uint256)\":{\"notice\":\"Return the current implementation of a lineage with the given `lineageId`\"},\"currentLineageId()\":{\"notice\":\"Returns the id of the most recently created lineage\"},\"getByVersion(uint8[3])\":{\"notice\":\"get an implementation by a version tag\"},\"has(address)\":{\"notice\":\"Returns `true` if an implementation has already been added\"},\"hasNext(address)\":{\"notice\":\"Returns `true` if an implementation has a next implementation set\"},\"hasVersion(uint8[3])\":{\"notice\":\"check if a version exists\"},\"initialize(address,address)\":{\"notice\":\"initialize the repository's state\"},\"lineageExists(uint256)\":{\"notice\":\"Returns `true` if a given lineageId exists\"},\"lineageIdOf(address)\":{\"notice\":\"Returns the id of the lineage a given implementation belongs to\"},\"nextImplementationOf(address)\":{\"notice\":\"Get the next implementation for a given implementation or           `address(0)` if it doesn't exist\"},\"remove(address,address)\":{\"notice\":\"Remove an implementation from the chain and \\\"stitch\\\" together its neighbors\"},\"setUpgradeDataFor(address,bytes)\":{\"notice\":\"set data that will be delegate called when a proxy upgrades to the given `implementation`\"},\"upgradeDataFor(address)\":{\"notice\":\"returns data that will be delegatedCalled when the given implementation           is upgraded to\"}},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/protocol/core/TranchedPoolImplementationRepository.sol\":\"TranchedPoolImplementationRepository\"},\"evmVersion\":\"istanbul\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":100},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts-ethereum-package/contracts/GSN/Context.sol\":{\"content\":\"pragma solidity ^0.6.0;\\nimport \\\"../Initializable.sol\\\";\\n\\n/*\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with GSN meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\ncontract ContextUpgradeSafe is Initializable {\\n    // Empty internal constructor, to prevent people from mistakenly deploying\\n    // an instance of this contract, which should be used via inheritance.\\n\\n    function __Context_init() internal initializer {\\n        __Context_init_unchained();\\n    }\\n\\n    function __Context_init_unchained() internal initializer {\\n\\n\\n    }\\n\\n\\n    function _msgSender() internal view virtual returns (address payable) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes memory) {\\n        this; // silence state mutability warning without generating bytecode - see https://github.com/ethereum/solidity/issues/2691\\n        return msg.data;\\n    }\\n\\n    uint256[50] private __gap;\\n}\\n\",\"keccak256\":\"0xe81686511d62f18b2d9c693c2c94c0a789c690de63aa90e15451ebf65c5bfd3e\"},\"@openzeppelin/contracts-ethereum-package/contracts/Initializable.sol\":{\"content\":\"pragma solidity >=0.4.24 <0.7.0;\\n\\n\\n/**\\n * @title Initializable\\n *\\n * @dev Helper contract to support initializer functions. To use it, replace\\n * the constructor with a function that has the `initializer` modifier.\\n * WARNING: Unlike constructors, initializer functions must be manually\\n * invoked. This applies both to deploying an Initializable contract, as well\\n * as extending an Initializable contract via inheritance.\\n * WARNING: When used with inheritance, manual care must be taken to not invoke\\n * a parent initializer twice, or ensure that all initializers are idempotent,\\n * because this is not dealt with automatically as with constructors.\\n */\\ncontract Initializable {\\n\\n  /**\\n   * @dev Indicates that the contract has been initialized.\\n   */\\n  bool private initialized;\\n\\n  /**\\n   * @dev Indicates that the contract is in the process of being initialized.\\n   */\\n  bool private initializing;\\n\\n  /**\\n   * @dev Modifier to use in the initializer function of a contract.\\n   */\\n  modifier initializer() {\\n    require(initializing || isConstructor() || !initialized, \\\"Contract instance has already been initialized\\\");\\n\\n    bool isTopLevelCall = !initializing;\\n    if (isTopLevelCall) {\\n      initializing = true;\\n      initialized = true;\\n    }\\n\\n    _;\\n\\n    if (isTopLevelCall) {\\n      initializing = false;\\n    }\\n  }\\n\\n  /// @dev Returns true if and only if the function is running in the constructor\\n  function isConstructor() private view returns (bool) {\\n    // extcodesize checks the size of the code stored in an address, and\\n    // address returns the current address. Since the code is still not\\n    // deployed when running a constructor, any checks on its code size will\\n    // yield zero, making it an effective way to detect if a contract is\\n    // under construction or not.\\n    address self = address(this);\\n    uint256 cs;\\n    assembly { cs := extcodesize(self) }\\n    return cs == 0;\\n  }\\n\\n  // Reserved storage space to allow for layout changes in the future.\\n  uint256[50] private ______gap;\\n}\\n\",\"keccak256\":\"0x9bfec92e36234ecc99b5d37230acb6cd1f99560233753162204104a4897e8721\"},\"@openzeppelin/contracts-ethereum-package/contracts/access/AccessControl.sol\":{\"content\":\"pragma solidity ^0.6.0;\\n\\nimport \\\"../utils/EnumerableSet.sol\\\";\\nimport \\\"../utils/Address.sol\\\";\\nimport \\\"../GSN/Context.sol\\\";\\nimport \\\"../Initializable.sol\\\";\\n\\n/**\\n * @dev Contract module that allows children to implement role-based access\\n * control mechanisms.\\n *\\n * Roles are referred to by their `bytes32` identifier. These should be exposed\\n * in the external API and be unique. The best way to achieve this is by\\n * using `public constant` hash digests:\\n *\\n * ```\\n * bytes32 public constant MY_ROLE = keccak256(\\\"MY_ROLE\\\");\\n * ```\\n *\\n * Roles can be used to represent a set of permissions. To restrict access to a\\n * function call, use {hasRole}:\\n *\\n * ```\\n * function foo() public {\\n *     require(hasRole(MY_ROLE, _msgSender()));\\n *     ...\\n * }\\n * ```\\n *\\n * Roles can be granted and revoked dynamically via the {grantRole} and\\n * {revokeRole} functions. Each role has an associated admin role, and only\\n * accounts that have a role's admin role can call {grantRole} and {revokeRole}.\\n *\\n * By default, the admin role for all roles is `DEFAULT_ADMIN_ROLE`, which means\\n * that only accounts with this role will be able to grant or revoke other\\n * roles. More complex role relationships can be created by using\\n * {_setRoleAdmin}.\\n */\\nabstract contract AccessControlUpgradeSafe is Initializable, ContextUpgradeSafe {\\n    function __AccessControl_init() internal initializer {\\n        __Context_init_unchained();\\n        __AccessControl_init_unchained();\\n    }\\n\\n    function __AccessControl_init_unchained() internal initializer {\\n\\n\\n    }\\n\\n    using EnumerableSet for EnumerableSet.AddressSet;\\n    using Address for address;\\n\\n    struct RoleData {\\n        EnumerableSet.AddressSet members;\\n        bytes32 adminRole;\\n    }\\n\\n    mapping (bytes32 => RoleData) private _roles;\\n\\n    bytes32 public constant DEFAULT_ADMIN_ROLE = 0x00;\\n\\n    /**\\n     * @dev Emitted when `account` is granted `role`.\\n     *\\n     * `sender` is the account that originated the contract call, an admin role\\n     * bearer except when using {_setupRole}.\\n     */\\n    event RoleGranted(bytes32 indexed role, address indexed account, address indexed sender);\\n\\n    /**\\n     * @dev Emitted when `account` is revoked `role`.\\n     *\\n     * `sender` is the account that originated the contract call:\\n     *   - if using `revokeRole`, it is the admin role bearer\\n     *   - if using `renounceRole`, it is the role bearer (i.e. `account`)\\n     */\\n    event RoleRevoked(bytes32 indexed role, address indexed account, address indexed sender);\\n\\n    /**\\n     * @dev Returns `true` if `account` has been granted `role`.\\n     */\\n    function hasRole(bytes32 role, address account) public view returns (bool) {\\n        return _roles[role].members.contains(account);\\n    }\\n\\n    /**\\n     * @dev Returns the number of accounts that have `role`. Can be used\\n     * together with {getRoleMember} to enumerate all bearers of a role.\\n     */\\n    function getRoleMemberCount(bytes32 role) public view returns (uint256) {\\n        return _roles[role].members.length();\\n    }\\n\\n    /**\\n     * @dev Returns one of the accounts that have `role`. `index` must be a\\n     * value between 0 and {getRoleMemberCount}, non-inclusive.\\n     *\\n     * Role bearers are not sorted in any particular way, and their ordering may\\n     * change at any point.\\n     *\\n     * WARNING: When using {getRoleMember} and {getRoleMemberCount}, make sure\\n     * you perform all queries on the same block. See the following\\n     * https://forum.openzeppelin.com/t/iterating-over-elements-on-enumerableset-in-openzeppelin-contracts/2296[forum post]\\n     * for more information.\\n     */\\n    function getRoleMember(bytes32 role, uint256 index) public view returns (address) {\\n        return _roles[role].members.at(index);\\n    }\\n\\n    /**\\n     * @dev Returns the admin role that controls `role`. See {grantRole} and\\n     * {revokeRole}.\\n     *\\n     * To change a role's admin, use {_setRoleAdmin}.\\n     */\\n    function getRoleAdmin(bytes32 role) public view returns (bytes32) {\\n        return _roles[role].adminRole;\\n    }\\n\\n    /**\\n     * @dev Grants `role` to `account`.\\n     *\\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     */\\n    function grantRole(bytes32 role, address account) public virtual {\\n        require(hasRole(_roles[role].adminRole, _msgSender()), \\\"AccessControl: sender must be an admin to grant\\\");\\n\\n        _grantRole(role, account);\\n    }\\n\\n    /**\\n     * @dev Revokes `role` from `account`.\\n     *\\n     * If `account` had been granted `role`, emits a {RoleRevoked} event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     */\\n    function revokeRole(bytes32 role, address account) public virtual {\\n        require(hasRole(_roles[role].adminRole, _msgSender()), \\\"AccessControl: sender must be an admin to revoke\\\");\\n\\n        _revokeRole(role, account);\\n    }\\n\\n    /**\\n     * @dev Revokes `role` from the calling account.\\n     *\\n     * Roles are often managed via {grantRole} and {revokeRole}: this function's\\n     * purpose is to provide a mechanism for accounts to lose their privileges\\n     * if they are compromised (such as when a trusted device is misplaced).\\n     *\\n     * If the calling account had been granted `role`, emits a {RoleRevoked}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must be `account`.\\n     */\\n    function renounceRole(bytes32 role, address account) public virtual {\\n        require(account == _msgSender(), \\\"AccessControl: can only renounce roles for self\\\");\\n\\n        _revokeRole(role, account);\\n    }\\n\\n    /**\\n     * @dev Grants `role` to `account`.\\n     *\\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\\n     * event. Note that unlike {grantRole}, this function doesn't perform any\\n     * checks on the calling account.\\n     *\\n     * [WARNING]\\n     * ====\\n     * This function should only be called from the constructor when setting\\n     * up the initial roles for the system.\\n     *\\n     * Using this function in any other way is effectively circumventing the admin\\n     * system imposed by {AccessControl}.\\n     * ====\\n     */\\n    function _setupRole(bytes32 role, address account) internal virtual {\\n        _grantRole(role, account);\\n    }\\n\\n    /**\\n     * @dev Sets `adminRole` as ``role``'s admin role.\\n     */\\n    function _setRoleAdmin(bytes32 role, bytes32 adminRole) internal virtual {\\n        _roles[role].adminRole = adminRole;\\n    }\\n\\n    function _grantRole(bytes32 role, address account) private {\\n        if (_roles[role].members.add(account)) {\\n            emit RoleGranted(role, account, _msgSender());\\n        }\\n    }\\n\\n    function _revokeRole(bytes32 role, address account) private {\\n        if (_roles[role].members.remove(account)) {\\n            emit RoleRevoked(role, account, _msgSender());\\n        }\\n    }\\n\\n    uint256[49] private __gap;\\n}\\n\",\"keccak256\":\"0x3954a5ee18b9297616912390eac7b0fe698e6ffea5a50dc3ccb0980cae210e86\"},\"@openzeppelin/contracts-ethereum-package/contracts/math/SafeMath.sol\":{\"content\":\"pragma solidity ^0.6.0;\\n\\n/**\\n * @dev Wrappers over Solidity's arithmetic operations with added overflow\\n * checks.\\n *\\n * Arithmetic operations in Solidity wrap on overflow. This can easily result\\n * in bugs, because programmers usually assume that an overflow raises an\\n * error, which is the standard behavior in high level programming languages.\\n * `SafeMath` restores this intuition by reverting the transaction when an\\n * operation overflows.\\n *\\n * Using this library instead of the unchecked operations eliminates an entire\\n * class of bugs, so it's recommended to use it always.\\n */\\nlibrary SafeMath {\\n    /**\\n     * @dev Returns the addition of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `+` operator.\\n     *\\n     * Requirements:\\n     * - Addition cannot overflow.\\n     */\\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\\n        uint256 c = a + b;\\n        require(c >= a, \\\"SafeMath: addition overflow\\\");\\n\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting on\\n     * overflow (when the result is negative).\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     * - Subtraction cannot overflow.\\n     */\\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return sub(a, b, \\\"SafeMath: subtraction overflow\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\\n     * overflow (when the result is negative).\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     * - Subtraction cannot overflow.\\n     */\\n    function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        require(b <= a, errorMessage);\\n        uint256 c = a - b;\\n\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the multiplication of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `*` operator.\\n     *\\n     * Requirements:\\n     * - Multiplication cannot overflow.\\n     */\\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\\n        // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\\n        // benefit is lost if 'b' is also tested.\\n        // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\\n        if (a == 0) {\\n            return 0;\\n        }\\n\\n        uint256 c = a * b;\\n        require(c / a == b, \\\"SafeMath: multiplication overflow\\\");\\n\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers. Reverts on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\\n     * uses an invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     * - The divisor cannot be zero.\\n     */\\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return div(a, b, \\\"SafeMath: division by zero\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers. Reverts with custom message on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\\n     * uses an invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     * - The divisor cannot be zero.\\n     */\\n    function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        // Solidity only automatically asserts when dividing by 0\\n        require(b > 0, errorMessage);\\n        uint256 c = a / b;\\n        // assert(a == b * c + a % b); // There is no case in which this doesn't hold\\n\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * Reverts when dividing by zero.\\n     *\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     * - The divisor cannot be zero.\\n     */\\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return mod(a, b, \\\"SafeMath: modulo by zero\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * Reverts with custom message when dividing by zero.\\n     *\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     * - The divisor cannot be zero.\\n     */\\n    function mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        require(b != 0, errorMessage);\\n        return a % b;\\n    }\\n}\\n\",\"keccak256\":\"0x04d34b3cd5677bea25f8dfceb6dec0eaa071d4d4b789a43f13fe0c415ba4c296\"},\"@openzeppelin/contracts-ethereum-package/contracts/utils/Address.sol\":{\"content\":\"pragma solidity ^0.6.2;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // According to EIP-1052, 0x0 is the value returned for not-yet created accounts\\n        // and 0xc5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470 is returned\\n        // for accounts without code, i.e. `keccak256('')`\\n        bytes32 codehash;\\n        bytes32 accountHash = 0xc5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470;\\n        // solhint-disable-next-line no-inline-assembly\\n        assembly { codehash := extcodehash(account) }\\n        return (codehash != accountHash && codehash != 0x0);\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        // solhint-disable-next-line avoid-low-level-calls, avoid-call-value\\n        (bool success, ) = recipient.call{ value: amount }(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n}\\n\",\"keccak256\":\"0x5f7da58ee3d9faa9b8999a93d49c8ff978f1afc88ae9bcfc6f9cbb44da011c2b\"},\"@openzeppelin/contracts-ethereum-package/contracts/utils/EnumerableSet.sol\":{\"content\":\"pragma solidity ^0.6.0;\\n\\n/**\\n * @dev Library for managing\\n * https://en.wikipedia.org/wiki/Set_(abstract_data_type)[sets] of primitive\\n * types.\\n *\\n * Sets have the following properties:\\n *\\n * - Elements are added, removed, and checked for existence in constant time\\n * (O(1)).\\n * - Elements are enumerated in O(n). No guarantees are made on the ordering.\\n *\\n * ```\\n * contract Example {\\n *     // Add the library methods\\n *     using EnumerableSet for EnumerableSet.AddressSet;\\n *\\n *     // Declare a set state variable\\n *     EnumerableSet.AddressSet private mySet;\\n * }\\n * ```\\n *\\n * As of v3.0.0, only sets of type `address` (`AddressSet`) and `uint256`\\n * (`UintSet`) are supported.\\n */\\nlibrary EnumerableSet {\\n    // To implement this library for multiple types with as little code\\n    // repetition as possible, we write it in terms of a generic Set type with\\n    // bytes32 values.\\n    // The Set implementation uses private functions, and user-facing\\n    // implementations (such as AddressSet) are just wrappers around the\\n    // underlying Set.\\n    // This means that we can only create new EnumerableSets for types that fit\\n    // in bytes32.\\n\\n    struct Set {\\n        // Storage of set values\\n        bytes32[] _values;\\n\\n        // Position of the value in the `values` array, plus 1 because index 0\\n        // means a value is not in the set.\\n        mapping (bytes32 => uint256) _indexes;\\n    }\\n\\n    /**\\n     * @dev Add a value to a set. O(1).\\n     *\\n     * Returns true if the value was added to the set, that is if it was not\\n     * already present.\\n     */\\n    function _add(Set storage set, bytes32 value) private returns (bool) {\\n        if (!_contains(set, value)) {\\n            set._values.push(value);\\n            // The value is stored at length-1, but we add 1 to all indexes\\n            // and use 0 as a sentinel value\\n            set._indexes[value] = set._values.length;\\n            return true;\\n        } else {\\n            return false;\\n        }\\n    }\\n\\n    /**\\n     * @dev Removes a value from a set. O(1).\\n     *\\n     * Returns true if the value was removed from the set, that is if it was\\n     * present.\\n     */\\n    function _remove(Set storage set, bytes32 value) private returns (bool) {\\n        // We read and store the value's index to prevent multiple reads from the same storage slot\\n        uint256 valueIndex = set._indexes[value];\\n\\n        if (valueIndex != 0) { // Equivalent to contains(set, value)\\n            // To delete an element from the _values array in O(1), we swap the element to delete with the last one in\\n            // the array, and then remove the last element (sometimes called as 'swap and pop').\\n            // This modifies the order of the array, as noted in {at}.\\n\\n            uint256 toDeleteIndex = valueIndex - 1;\\n            uint256 lastIndex = set._values.length - 1;\\n\\n            // When the value to delete is the last one, the swap operation is unnecessary. However, since this occurs\\n            // so rarely, we still do the swap anyway to avoid the gas cost of adding an 'if' statement.\\n\\n            bytes32 lastvalue = set._values[lastIndex];\\n\\n            // Move the last value to the index where the value to delete is\\n            set._values[toDeleteIndex] = lastvalue;\\n            // Update the index for the moved value\\n            set._indexes[lastvalue] = toDeleteIndex + 1; // All indexes are 1-based\\n\\n            // Delete the slot where the moved value was stored\\n            set._values.pop();\\n\\n            // Delete the index for the deleted slot\\n            delete set._indexes[value];\\n\\n            return true;\\n        } else {\\n            return false;\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns true if the value is in the set. O(1).\\n     */\\n    function _contains(Set storage set, bytes32 value) private view returns (bool) {\\n        return set._indexes[value] != 0;\\n    }\\n\\n    /**\\n     * @dev Returns the number of values on the set. O(1).\\n     */\\n    function _length(Set storage set) private view returns (uint256) {\\n        return set._values.length;\\n    }\\n\\n   /**\\n    * @dev Returns the value stored at position `index` in the set. O(1).\\n    *\\n    * Note that there are no guarantees on the ordering of values inside the\\n    * array, and it may change when more values are added or removed.\\n    *\\n    * Requirements:\\n    *\\n    * - `index` must be strictly less than {length}.\\n    */\\n    function _at(Set storage set, uint256 index) private view returns (bytes32) {\\n        require(set._values.length > index, \\\"EnumerableSet: index out of bounds\\\");\\n        return set._values[index];\\n    }\\n\\n    // AddressSet\\n\\n    struct AddressSet {\\n        Set _inner;\\n    }\\n\\n    /**\\n     * @dev Add a value to a set. O(1).\\n     *\\n     * Returns true if the value was added to the set, that is if it was not\\n     * already present.\\n     */\\n    function add(AddressSet storage set, address value) internal returns (bool) {\\n        return _add(set._inner, bytes32(uint256(value)));\\n    }\\n\\n    /**\\n     * @dev Removes a value from a set. O(1).\\n     *\\n     * Returns true if the value was removed from the set, that is if it was\\n     * present.\\n     */\\n    function remove(AddressSet storage set, address value) internal returns (bool) {\\n        return _remove(set._inner, bytes32(uint256(value)));\\n    }\\n\\n    /**\\n     * @dev Returns true if the value is in the set. O(1).\\n     */\\n    function contains(AddressSet storage set, address value) internal view returns (bool) {\\n        return _contains(set._inner, bytes32(uint256(value)));\\n    }\\n\\n    /**\\n     * @dev Returns the number of values in the set. O(1).\\n     */\\n    function length(AddressSet storage set) internal view returns (uint256) {\\n        return _length(set._inner);\\n    }\\n\\n   /**\\n    * @dev Returns the value stored at position `index` in the set. O(1).\\n    *\\n    * Note that there are no guarantees on the ordering of values inside the\\n    * array, and it may change when more values are added or removed.\\n    *\\n    * Requirements:\\n    *\\n    * - `index` must be strictly less than {length}.\\n    */\\n    function at(AddressSet storage set, uint256 index) internal view returns (address) {\\n        return address(uint256(_at(set._inner, index)));\\n    }\\n\\n\\n    // UintSet\\n\\n    struct UintSet {\\n        Set _inner;\\n    }\\n\\n    /**\\n     * @dev Add a value to a set. O(1).\\n     *\\n     * Returns true if the value was added to the set, that is if it was not\\n     * already present.\\n     */\\n    function add(UintSet storage set, uint256 value) internal returns (bool) {\\n        return _add(set._inner, bytes32(value));\\n    }\\n\\n    /**\\n     * @dev Removes a value from a set. O(1).\\n     *\\n     * Returns true if the value was removed from the set, that is if it was\\n     * present.\\n     */\\n    function remove(UintSet storage set, uint256 value) internal returns (bool) {\\n        return _remove(set._inner, bytes32(value));\\n    }\\n\\n    /**\\n     * @dev Returns true if the value is in the set. O(1).\\n     */\\n    function contains(UintSet storage set, uint256 value) internal view returns (bool) {\\n        return _contains(set._inner, bytes32(value));\\n    }\\n\\n    /**\\n     * @dev Returns the number of values on the set. O(1).\\n     */\\n    function length(UintSet storage set) internal view returns (uint256) {\\n        return _length(set._inner);\\n    }\\n\\n   /**\\n    * @dev Returns the value stored at position `index` in the set. O(1).\\n    *\\n    * Note that there are no guarantees on the ordering of values inside the\\n    * array, and it may change when more values are added or removed.\\n    *\\n    * Requirements:\\n    *\\n    * - `index` must be strictly less than {length}.\\n    */\\n    function at(UintSet storage set, uint256 index) internal view returns (uint256) {\\n        return uint256(_at(set._inner, index));\\n    }\\n}\\n\",\"keccak256\":\"0x7f6401708b61f575b497aa7c8118ca9d70348643c83c26e70d9b643edf1a95c1\"},\"@openzeppelin/contracts-ethereum-package/contracts/utils/Pausable.sol\":{\"content\":\"pragma solidity ^0.6.0;\\n\\nimport \\\"../GSN/Context.sol\\\";\\nimport \\\"../Initializable.sol\\\";\\n\\n/**\\n * @dev Contract module which allows children to implement an emergency stop\\n * mechanism that can be triggered by an authorized account.\\n *\\n * This module is used through inheritance. It will make available the\\n * modifiers `whenNotPaused` and `whenPaused`, which can be applied to\\n * the functions of your contract. Note that they will not be pausable by\\n * simply including this module, only once the modifiers are put in place.\\n */\\ncontract PausableUpgradeSafe is Initializable, ContextUpgradeSafe {\\n    /**\\n     * @dev Emitted when the pause is triggered by `account`.\\n     */\\n    event Paused(address account);\\n\\n    /**\\n     * @dev Emitted when the pause is lifted by `account`.\\n     */\\n    event Unpaused(address account);\\n\\n    bool private _paused;\\n\\n    /**\\n     * @dev Initializes the contract in unpaused state.\\n     */\\n\\n    function __Pausable_init() internal initializer {\\n        __Context_init_unchained();\\n        __Pausable_init_unchained();\\n    }\\n\\n    function __Pausable_init_unchained() internal initializer {\\n\\n\\n        _paused = false;\\n\\n    }\\n\\n\\n    /**\\n     * @dev Returns true if the contract is paused, and false otherwise.\\n     */\\n    function paused() public view returns (bool) {\\n        return _paused;\\n    }\\n\\n    /**\\n     * @dev Modifier to make a function callable only when the contract is not paused.\\n     */\\n    modifier whenNotPaused() {\\n        require(!_paused, \\\"Pausable: paused\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Modifier to make a function callable only when the contract is paused.\\n     */\\n    modifier whenPaused() {\\n        require(_paused, \\\"Pausable: not paused\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Triggers stopped state.\\n     */\\n    function _pause() internal virtual whenNotPaused {\\n        _paused = true;\\n        emit Paused(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Returns to normal state.\\n     */\\n    function _unpause() internal virtual whenPaused {\\n        _paused = false;\\n        emit Unpaused(_msgSender());\\n    }\\n\\n    uint256[49] private __gap;\\n}\\n\",\"keccak256\":\"0x2ad5473fe88d9ab30c6cd495ab8895daae8c4a48cf8231282a2d339387b35006\"},\"@openzeppelin/contracts-ethereum-package/contracts/utils/ReentrancyGuard.sol\":{\"content\":\"pragma solidity ^0.6.0;\\nimport \\\"../Initializable.sol\\\";\\n\\n/**\\n * @dev Contract module that helps prevent reentrant calls to a function.\\n *\\n * Inheriting from `ReentrancyGuard` will make the {nonReentrant} modifier\\n * available, which can be applied to functions to make sure there are no nested\\n * (reentrant) calls to them.\\n *\\n * Note that because there is a single `nonReentrant` guard, functions marked as\\n * `nonReentrant` may not call one another. This can be worked around by making\\n * those functions `private`, and then adding `external` `nonReentrant` entry\\n * points to them.\\n *\\n * TIP: If you would like to learn more about reentrancy and alternative ways\\n * to protect against it, check out our blog post\\n * https://blog.openzeppelin.com/reentrancy-after-istanbul/[Reentrancy After Istanbul].\\n */\\ncontract ReentrancyGuardUpgradeSafe is Initializable {\\n    bool private _notEntered;\\n\\n\\n    function __ReentrancyGuard_init() internal initializer {\\n        __ReentrancyGuard_init_unchained();\\n    }\\n\\n    function __ReentrancyGuard_init_unchained() internal initializer {\\n\\n\\n        // Storing an initial non-zero value makes deployment a bit more\\n        // expensive, but in exchange the refund on every call to nonReentrant\\n        // will be lower in amount. Since refunds are capped to a percetange of\\n        // the total transaction's gas, it is best to keep them low in cases\\n        // like this one, to increase the likelihood of the full refund coming\\n        // into effect.\\n        _notEntered = true;\\n\\n    }\\n\\n\\n    /**\\n     * @dev Prevents a contract from calling itself, directly or indirectly.\\n     * Calling a `nonReentrant` function from another `nonReentrant`\\n     * function is not supported. It is possible to prevent this from happening\\n     * by making the `nonReentrant` function external, and make it call a\\n     * `private` function that does the actual work.\\n     */\\n    modifier nonReentrant() {\\n        // On the first call to nonReentrant, _notEntered will be true\\n        require(_notEntered, \\\"ReentrancyGuard: reentrant call\\\");\\n\\n        // Any calls to nonReentrant after this point will fail\\n        _notEntered = false;\\n\\n        _;\\n\\n        // By storing the original value once again, a refund is triggered (see\\n        // https://eips.ethereum.org/EIPS/eip-2200)\\n        _notEntered = true;\\n    }\\n\\n    uint256[49] private __gap;\\n}\\n\",\"keccak256\":\"0x75a600e5ed3443ecf3b7fb636064b404b358317fd6cd91e70e3ca5cf2370e882\"},\"@openzeppelin/contracts/utils/Address.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.2 <0.8.0;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize, which returns 0 for contracts in\\n        // construction, since the code is only stored at the end of the\\n        // constructor execution.\\n\\n        uint256 size;\\n        // solhint-disable-next-line no-inline-assembly\\n        assembly { size := extcodesize(account) }\\n        return size > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        // solhint-disable-next-line avoid-low-level-calls, avoid-call-value\\n        (bool success, ) = recipient.call{ value: amount }(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain`call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n      return functionCall(target, data, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data, string memory errorMessage) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(address target, bytes memory data, uint256 value) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(address target, bytes memory data, uint256 value, string memory errorMessage) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        require(isContract(target), \\\"Address: call to non-contract\\\");\\n\\n        // solhint-disable-next-line avoid-low-level-calls\\n        (bool success, bytes memory returndata) = target.call{ value: value }(data);\\n        return _verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data, string memory errorMessage) internal view returns (bytes memory) {\\n        require(isContract(target), \\\"Address: static call to non-contract\\\");\\n\\n        // solhint-disable-next-line avoid-low-level-calls\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return _verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data, string memory errorMessage) internal returns (bytes memory) {\\n        require(isContract(target), \\\"Address: delegate call to non-contract\\\");\\n\\n        // solhint-disable-next-line avoid-low-level-calls\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return _verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    function _verifyCallResult(bool success, bytes memory returndata, string memory errorMessage) private pure returns(bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            // Look for revert reason and bubble it up if present\\n            if (returndata.length > 0) {\\n                // The easiest way to bubble the revert reason is using memory via assembly\\n\\n                // solhint-disable-next-line no-inline-assembly\\n                assembly {\\n                    let returndata_size := mload(returndata)\\n                    revert(add(32, returndata), returndata_size)\\n                }\\n            } else {\\n                revert(errorMessage);\\n            }\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x28911e614500ae7c607a432a709d35da25f3bc5ddc8bd12b278b66358070c0ea\",\"license\":\"MIT\"},\"contracts/interfaces/IVersioned.sol\":{\"content\":\"\\n// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.12;\\npragma experimental ABIEncoderV2;\\n\\n/// @title interface for implementers that have an arbitrary associated tag\\ninterface IVersioned {\\n  /// @notice Returns the version triplet `[major, minor, patch]`\\n  function getVersion() external pure returns (uint8[3] memory);\\n}\",\"keccak256\":\"0xe50875386e1cffab693128f6217e9d42dad1afbbf24590e5aa4c8cebef20f98b\",\"license\":\"MIT\"},\"contracts/protocol/core/BaseUpgradeablePausable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.6.12;\\npragma experimental ABIEncoderV2;\\n\\nimport \\\"@openzeppelin/contracts-ethereum-package/contracts/access/AccessControl.sol\\\";\\nimport \\\"@openzeppelin/contracts-ethereum-package/contracts/utils/ReentrancyGuard.sol\\\";\\nimport \\\"@openzeppelin/contracts-ethereum-package/contracts/Initializable.sol\\\";\\nimport \\\"@openzeppelin/contracts-ethereum-package/contracts/math/SafeMath.sol\\\";\\nimport \\\"./PauserPausable.sol\\\";\\n\\n/**\\n * @title BaseUpgradeablePausable contract\\n * @notice This is our Base contract that most other contracts inherit from. It includes many standard\\n *  useful abilities like upgradeability, pausability, access control, and re-entrancy guards.\\n * @author Goldfinch\\n */\\n\\ncontract BaseUpgradeablePausable is\\n  Initializable,\\n  AccessControlUpgradeSafe,\\n  PauserPausable,\\n  ReentrancyGuardUpgradeSafe\\n{\\n  bytes32 public constant OWNER_ROLE = keccak256(\\\"OWNER_ROLE\\\");\\n  using SafeMath for uint256;\\n  // Pre-reserving a few slots in the base contract in case we need to add things in the future.\\n  // This does not actually take up gas cost or storage cost, but it does reserve the storage slots.\\n  // See OpenZeppelin's use of this pattern here:\\n  // https://github.com/OpenZeppelin/openzeppelin-contracts-ethereum-package/blob/master/contracts/GSN/Context.sol#L37\\n  uint256[50] private __gap1;\\n  uint256[50] private __gap2;\\n  uint256[50] private __gap3;\\n  uint256[50] private __gap4;\\n\\n  // solhint-disable-next-line func-name-mixedcase\\n  function __BaseUpgradeablePausable__init(address owner) public initializer {\\n    require(owner != address(0), \\\"Owner cannot be the zero address\\\");\\n    __AccessControl_init_unchained();\\n    __Pausable_init_unchained();\\n    __ReentrancyGuard_init_unchained();\\n\\n    _setupRole(OWNER_ROLE, owner);\\n    _setupRole(PAUSER_ROLE, owner);\\n\\n    _setRoleAdmin(PAUSER_ROLE, OWNER_ROLE);\\n    _setRoleAdmin(OWNER_ROLE, OWNER_ROLE);\\n  }\\n\\n  function isAdmin() public view returns (bool) {\\n    return hasRole(OWNER_ROLE, _msgSender());\\n  }\\n\\n  modifier onlyAdmin() {\\n    require(isAdmin(), \\\"Must have admin role to perform this action\\\");\\n    _;\\n  }\\n}\\n\",\"keccak256\":\"0x555f6b770e8c9abbf90aa2d51f7f4c10161aa9f6ab6c3f0f4647cdbee8225c81\",\"license\":\"MIT\"},\"contracts/protocol/core/PauserPausable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.6.12;\\npragma experimental ABIEncoderV2;\\n\\nimport \\\"@openzeppelin/contracts-ethereum-package/contracts/utils/Pausable.sol\\\";\\nimport \\\"@openzeppelin/contracts-ethereum-package/contracts/access/AccessControl.sol\\\";\\n\\n/**\\n * @title PauserPausable\\n * @notice Inheriting from OpenZeppelin's Pausable contract, this does small\\n *  augmentations to make it work with a PAUSER_ROLE, leveraging the AccessControl contract.\\n *  It is meant to be inherited.\\n * @author Goldfinch\\n */\\n\\ncontract PauserPausable is AccessControlUpgradeSafe, PausableUpgradeSafe {\\n  bytes32 public constant PAUSER_ROLE = keccak256(\\\"PAUSER_ROLE\\\");\\n\\n  // solhint-disable-next-line func-name-mixedcase\\n  function __PauserPausable__init() public initializer {\\n    __Pausable_init_unchained();\\n  }\\n\\n  /**\\n   * @dev Pauses all functions guarded by Pause\\n   *\\n   * See {Pausable-_pause}.\\n   *\\n   * Requirements:\\n   *\\n   * - the caller must have the PAUSER_ROLE.\\n   */\\n\\n  function pause() public onlyPauserRole {\\n    _pause();\\n  }\\n\\n  /**\\n   * @dev Unpauses the contract\\n   *\\n   * See {Pausable-_unpause}.\\n   *\\n   * Requirements:\\n   *\\n   * - the caller must have the Pauser role\\n   */\\n  function unpause() public onlyPauserRole {\\n    _unpause();\\n  }\\n\\n  modifier onlyPauserRole() {\\n    /// @dev NA: not authorized\\n    require(hasRole(PAUSER_ROLE, _msgSender()), \\\"NA\\\");\\n    _;\\n  }\\n}\\n\",\"keccak256\":\"0x218eb32fc1649d98c0ac6f80689fc3e5fdcfbca36cf94431b9901788fbf3d266\",\"license\":\"MIT\"},\"contracts/protocol/core/TranchedPoolImplementationRepository.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.12;\\npragma experimental ABIEncoderV2;\\n\\n// solhint-disable-next-line max-line-length\\nimport {VersionedImplementationRepository} from \\\"./proxy/VersionedImplementationRepository.sol\\\";\\n\\ncontract TranchedPoolImplementationRepository is VersionedImplementationRepository {}\\n\",\"keccak256\":\"0x1763e03e7e082e1e09f563e382084899e655f5d3a74a015f0fc40f3713f4f68e\",\"license\":\"MIT\"},\"contracts/protocol/core/proxy/ImplementationRepository.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.12;\\npragma experimental ABIEncoderV2;\\n\\nimport {BaseUpgradeablePausable} from \\\"../BaseUpgradeablePausable.sol\\\";\\nimport {Address} from \\\"@openzeppelin/contracts/utils/Address.sol\\\";\\n\\n/// @title User Controlled Upgrades (UCU) Proxy Repository\\n/// A repository maintaing a collection of \\\"lineages\\\" of implementation contracts\\n///\\n/// Lineages are a sequence of implementations each lineage can be thought of as\\n/// a \\\"major\\\" revision of implementations. Implementations between lineages are\\n/// considered incompatible.\\ncontract ImplementationRepository is BaseUpgradeablePausable {\\n  address internal constant INVALID_IMPL = address(0);\\n  uint256 internal constant INVALID_LINEAGE_ID = 0;\\n\\n  /// @notice returns data that will be delegatedCalled when the given implementation\\n  ///           is upgraded to\\n  mapping(address => bytes) public upgradeDataFor;\\n\\n  /// @dev mapping from one implementation to the succeeding implementation\\n  mapping(address => address) internal _nextImplementationOf;\\n\\n  /// @notice Returns the id of the lineage a given implementation belongs to\\n  mapping(address => uint256) public lineageIdOf;\\n\\n  /// @dev internal because we expose this through the `currentImplementation(uint256)` api\\n  mapping(uint256 => address) internal _currentOfLineage;\\n\\n  /// @notice Returns the id of the most recently created lineage\\n  uint256 public currentLineageId;\\n\\n  // //////// External ////////////////////////////////////////////////////////////\\n\\n  /// @notice initialize the repository's state\\n  /// @dev reverts if `_owner` is the null address\\n  /// @dev reverts if `implementation` is not a contract\\n  /// @param _owner owner of the repository\\n  /// @param implementation initial implementation in the repository\\n  function initialize(address _owner, address implementation) external initializer {\\n    __BaseUpgradeablePausable__init(_owner);\\n    _createLineage(implementation);\\n    require(currentLineageId != INVALID_LINEAGE_ID);\\n  }\\n\\n  /// @notice set data that will be delegate called when a proxy upgrades to the given `implementation`\\n  /// @dev reverts when caller is not an admin\\n  /// @dev reverts when the contract is paused\\n  /// @dev reverts if the given implementation isn't registered\\n  function setUpgradeDataFor(address implementation, bytes calldata data) external onlyAdmin whenNotPaused {\\n    _setUpgradeDataFor(implementation, data);\\n  }\\n\\n  /// @notice Create a new lineage of implementations.\\n  ///\\n  /// This creates a new \\\"root\\\" of a new lineage\\n  /// @dev reverts if `implementation` is not a contract\\n  /// @param implementation implementation that will be the first implementation in the lineage\\n  /// @return newly created lineage's id\\n  function createLineage(address implementation) external onlyAdmin whenNotPaused returns (uint256) {\\n    return _createLineage(implementation);\\n  }\\n\\n  /// @notice add a new implementation and set it as the current implementation\\n  /// @dev reverts if the sender is not an owner\\n  /// @dev reverts if the contract is paused\\n  /// @dev reverts if `implementation` is not a contract\\n  /// @param implementation implementation to append\\n  function append(address implementation) external onlyAdmin whenNotPaused {\\n    _append(implementation, currentLineageId);\\n  }\\n\\n  /// @notice Append an implementation to a specified lineage\\n  /// @dev reverts if the contract is paused\\n  /// @dev reverts if the sender is not an owner\\n  /// @dev reverts if `implementation` is not a contract\\n  /// @param implementation implementation to append\\n  /// @param lineageId id of lineage to append to\\n  function append(address implementation, uint256 lineageId) external onlyAdmin whenNotPaused {\\n    _append(implementation, lineageId);\\n  }\\n\\n  /// @notice Remove an implementation from the chain and \\\"stitch\\\" together its neighbors\\n  /// @dev If you have a chain of `A -> B -> C` and I call `remove(B, C)` it will result in `A -> C`\\n  /// @dev reverts if `previos` is not the ancestor of `toRemove`\\n  /// @dev we need to provide the previous implementation here to be able to successfully \\\"stitch\\\"\\n  ///       the chain back together. Because this is an admin action, we can source what the previous\\n  ///       version is from events.\\n  /// @param toRemove Implementation to remove\\n  /// @param previous Implementation that currently has `toRemove` as its successor\\n  function remove(address toRemove, address previous) external onlyAdmin whenNotPaused {\\n    _remove(toRemove, previous);\\n  }\\n\\n  // //////// External view ////////////////////////////////////////////////////////////\\n\\n  /// @notice Returns `true` if an implementation has a next implementation set\\n  /// @param implementation implementation to check\\n  /// @return The implementation following the given implementation\\n  function hasNext(address implementation) external view returns (bool) {\\n    return _nextImplementationOf[implementation] != INVALID_IMPL;\\n  }\\n\\n  /// @notice Returns `true` if an implementation has already been added\\n  /// @param implementation Implementation to check existence of\\n  /// @return `true` if the implementation has already been added\\n  function has(address implementation) external view returns (bool) {\\n    return _has(implementation);\\n  }\\n\\n  /// @notice Get the next implementation for a given implementation or\\n  ///           `address(0)` if it doesn't exist\\n  /// @dev reverts when contract is paused\\n  /// @param implementation implementation to get the upgraded implementation for\\n  /// @return Next Implementation\\n  function nextImplementationOf(address implementation) external view whenNotPaused returns (address) {\\n    return _nextImplementationOf[implementation];\\n  }\\n\\n  /// @notice Returns `true` if a given lineageId exists\\n  function lineageExists(uint256 lineageId) external view returns (bool) {\\n    return _lineageExists(lineageId);\\n  }\\n\\n  /// @notice Return the current implementation of a lineage with the given `lineageId`\\n  function currentImplementation(uint256 lineageId) external view whenNotPaused returns (address) {\\n    return _currentImplementation(lineageId);\\n  }\\n\\n  /// @notice return current implementaton of the current lineage\\n  function currentImplementation() external view whenNotPaused returns (address) {\\n    return _currentImplementation(currentLineageId);\\n  }\\n\\n  // //////// Internal ////////////////////////////////////////////////////////////\\n\\n  function _setUpgradeDataFor(address implementation, bytes memory data) internal {\\n    require(_has(implementation), \\\"unknown impl\\\");\\n    upgradeDataFor[implementation] = data;\\n    emit UpgradeDataSet(implementation, data);\\n  }\\n\\n  function _createLineage(address implementation) internal virtual returns (uint256) {\\n    require(Address.isContract(implementation), \\\"not a contract\\\");\\n    // NOTE: impractical to overflow\\n    currentLineageId += 1;\\n\\n    _currentOfLineage[currentLineageId] = implementation;\\n    lineageIdOf[implementation] = currentLineageId;\\n\\n    emit Added(currentLineageId, implementation, address(0));\\n    return currentLineageId;\\n  }\\n\\n  function _currentImplementation(uint256 lineageId) internal view returns (address) {\\n    return _currentOfLineage[lineageId];\\n  }\\n\\n  /// @notice Returns `true` if an implementation has already been added\\n  /// @param implementation implementation to check for\\n  /// @return `true` if the implementation has already been added\\n  function _has(address implementation) internal view virtual returns (bool) {\\n    return lineageIdOf[implementation] != INVALID_LINEAGE_ID;\\n  }\\n\\n  /// @notice Set an implementation to the current implementation\\n  /// @param implementation implementation to set as current implementation\\n  /// @param lineageId id of lineage to append to\\n  function _append(address implementation, uint256 lineageId) internal virtual {\\n    require(Address.isContract(implementation), \\\"not a contract\\\");\\n    require(!_has(implementation), \\\"exists\\\");\\n    require(_lineageExists(lineageId), \\\"invalid lineageId\\\");\\n    require(_currentOfLineage[lineageId] != INVALID_IMPL, \\\"empty lineage\\\");\\n\\n    address oldImplementation = _currentOfLineage[lineageId];\\n    _currentOfLineage[lineageId] = implementation;\\n    lineageIdOf[implementation] = lineageId;\\n    _nextImplementationOf[oldImplementation] = implementation;\\n\\n    emit Added(lineageId, implementation, oldImplementation);\\n  }\\n\\n  function _remove(address toRemove, address previous) internal virtual {\\n    require(toRemove != INVALID_IMPL && previous != INVALID_IMPL, \\\"ZERO\\\");\\n    require(_nextImplementationOf[previous] == toRemove, \\\"Not prev\\\");\\n\\n    uint256 lineageId = lineageIdOf[toRemove];\\n\\n    // need to reset the head pointer to the previous version if we remove the head\\n    if (toRemove == _currentOfLineage[lineageId]) {\\n      _currentOfLineage[lineageId] = previous;\\n    }\\n\\n    _setUpgradeDataFor(toRemove, \\\"\\\"); // reset upgrade data\\n    _nextImplementationOf[previous] = _nextImplementationOf[toRemove];\\n    _nextImplementationOf[toRemove] = INVALID_IMPL;\\n    lineageIdOf[toRemove] = INVALID_LINEAGE_ID;\\n    emit Removed(lineageId, toRemove);\\n  }\\n\\n  function _lineageExists(uint256 lineageId) internal view returns (bool) {\\n    return lineageId != INVALID_LINEAGE_ID && lineageId <= currentLineageId;\\n  }\\n\\n  // //////// Events //////////////////////////////////////////////////////////////\\n  event Added(uint256 indexed lineageId, address indexed newImplementation, address indexed oldImplementation);\\n  event Removed(uint256 indexed lineageId, address indexed implementation);\\n  event UpgradeDataSet(address indexed implementation, bytes data);\\n}\\n\",\"keccak256\":\"0xa52d50641c081def0b1f66a1150fa3b6079a2959704911476e4287f462cf1297\",\"license\":\"MIT\"},\"contracts/protocol/core/proxy/VersionedImplementationRepository.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.12;\\npragma experimental ABIEncoderV2;\\nimport {IVersioned} from \\\"../../../interfaces/IVersioned.sol\\\";\\nimport {\\n  ImplementationRepository as Repo\\n} from \\\"./ImplementationRepository.sol\\\";\\n\\ncontract VersionedImplementationRepository is Repo {\\n  /// @dev abi encoded version -> implementation address\\n  /// @dev we use bytes here so only a single storage slot is used\\n  mapping(bytes => address) internal _byVersion;\\n\\n  // // EXTERNAL //////////////////////////////////////////////////////////////////\\n\\n  /// @notice get an implementation by a version tag\\n  /// @param version `[major, minor, patch]` version tag\\n  /// @return implementation associated with the given version tag\\n  function getByVersion(uint8[3] calldata version) external view returns (address) {\\n    return _byVersion[abi.encodePacked(version)];\\n  }\\n\\n  /// @notice check if a version exists\\n  /// @param version `[major, minor, patch]` version tag\\n  /// @return true if the version is registered\\n  function hasVersion(uint8[3] calldata version) external view returns (bool) {\\n    return _hasVersion(version);\\n  }\\n\\n  // // INTERNAL //////////////////////////////////////////////////////////////////\\n\\n  function _append(address implementation, uint256 lineageId) internal override {\\n    uint8[3] memory version = IVersioned(implementation).getVersion();\\n    _insertVersion(version, implementation);\\n    return super._append(implementation, lineageId);\\n  }\\n\\n  function _createLineage(address implementation) internal override returns (uint256) {\\n    uint8[3] memory version = IVersioned(implementation).getVersion();\\n    _insertVersion(version, implementation);\\n    uint256 lineageId = super._createLineage(implementation);\\n    return lineageId;\\n  }\\n\\n  function _remove(address toRemove, address previous) internal override {\\n    uint8[3] memory version = IVersioned(toRemove).getVersion();\\n    _removeVersion(version);\\n    return super._remove(toRemove, previous);\\n  }\\n\\n  function _insertVersion(uint8[3] memory version, address impl) internal {\\n    require(!_hasVersion(version), \\\"exists\\\");\\n    _byVersion[abi.encodePacked(version)] = impl;\\n    emit VersionAdded(version, impl);\\n  }\\n\\n  function _removeVersion(uint8[3] memory version) internal {\\n    address toRemove = _byVersion[abi.encode(version)];\\n    _byVersion[abi.encodePacked(version)] = INVALID_IMPL;\\n    emit VersionRemoved(version, toRemove);\\n  }\\n\\n  function _hasVersion(uint8[3] memory version) internal view returns (bool) {\\n    return _byVersion[abi.encodePacked(version)] != INVALID_IMPL;\\n  }\\n\\n  event VersionAdded(uint8[3] indexed version, address indexed impl);\\n  event VersionRemoved(uint8[3] indexed version, address indexed impl);\\n}\\n\",\"keccak256\":\"0x4919337edb64a5050ebeab8722701ba51df26070b5cdf02f2b5f3fc35ce70ee5\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x608060405234801561001057600080fd5b5061217f806100206000396000f3fe608060405234801561001057600080fd5b50600436106101bb5760003560e01c8063800751b2116100fa578063ac04f5a71161009d578063ac04f5a714610385578063b6db75a014610398578063ca15c873146103a0578063d547741f146103b3578063d8bd5c29146103c6578063e58378bb146103ce578063e63ab1e9146103d6578063f57f6880146103de578063fd81bf9a146103f1576101bb565b8063800751b2146103015780638456cb591461030957806386c700e2146103115780638e12f761146103245780639010d07c1461034457806391d14854146103575780639fb9d3d31461036a578063a217fddf1461037d576101bb565b8063526d81f611610162578063526d81f6146102725780635b730dbb1461027a5780635c975abb1461028d5780636063d19c146102955780636067570e146102a85780636a3def6c146102bb57806378e33e4e146102db5780637f7c1491146102ee576101bb565b8063097616a3146101c05780630e6a6ef5146101d557806321887c3d146101fe578063248a9ca3146102115780632f2ff15d1461023157806336568abe146102445780633f4ba83a14610257578063485cc9551461025f575b600080fd5b6101d36101ce366004611a21565b610404565b005b6101e86101e3366004611a21565b61053d565b6040516101f59190611cfc565b60405180910390f35b6101e861020c366004611a21565b61055e565b61022461021f366004611bc7565b61056f565b6040516101f59190611d07565b6101d361023f366004611bdf565b610584565b6101d3610252366004611bdf565b6105c8565b6101d361060a565b6101d361026d366004611a3c565b61064a565b6101d36106ef565b610224610288366004611a21565b61077a565b6101e861078d565b6101e86102a3366004611bc7565b610796565b6101d36102b6366004611a70565b6107a1565b6102ce6102c9366004611a21565b610828565b6040516101f59190611cb4565b6102246102e9366004611a21565b61086e565b6101d36102fc366004611a3c565b6108c0565b610224610911565b6101d3610918565b6101d361031f366004611af0565b610956565b610337610332366004611a21565b6109a7565b6040516101f59190611d10565b6102ce610352366004611c0e565b610a43565b6101e8610365366004611bdf565b610a62565b6102ce610378366004611b1a565b610a7a565b610224610aca565b6101d3610393366004611a21565b610acf565b6101e8610b23565b6102246103ae366004611bc7565b610b44565b6101d36103c1366004611bdf565b610b5b565b6102ce610b95565b610224610bc7565b610224610bd9565b6101e86103ec366004611b1a565b610beb565b6102ce6103ff366004611bc7565b610c1f565b600054610100900460ff168061041d575061041d610c4e565b8061042b575060005460ff16155b6104505760405162461bcd60e51b815260040161044790611f39565b60405180910390fd5b600054610100900460ff1615801561047b576000805460ff1961ff0019909116610100171660011790555b6001600160a01b0382166104a15760405162461bcd60e51b815260040161044790611f04565b6104a9610c54565b6104b1610cd5565b6104b9610d61565b6104d160008051602061210a833981519152836105be565b6104e960008051602061212a833981519152836105be565b61050f60008051602061212a83398151915260008051602061210a833981519152610df0565b61052760008051602061210a83398151915280610df0565b8015610539576000805461ff00191690555b5050565b6001600160a01b0390811660009081526101c4602052604090205416151590565b600061056982610e05565b92915050565b60009081526065602052604090206002015490565b6000828152606560205260409020600201546105a290610365610e23565b6105be5760405162461bcd60e51b815260040161044790611da5565b6105398282610e27565b6105d0610e23565b6001600160a01b0316816001600160a01b0316146106005760405162461bcd60e51b815260040161044790612066565b6105398282610e90565b61062460008051602061212a833981519152610365610e23565b6106405760405162461bcd60e51b815260040161044790611fae565b610648610ef9565b565b600054610100900460ff16806106635750610663610c4e565b80610671575060005460ff16155b61068d5760405162461bcd60e51b815260040161044790611f39565b600054610100900460ff161580156106b8576000805460ff1961ff0019909116610100171660011790555b6106c183610404565b6106ca82610f65565b506101c7546106d857600080fd5b80156106ea576000805461ff00191690555b505050565b600054610100900460ff16806107085750610708610c4e565b80610716575060005460ff16155b6107325760405162461bcd60e51b815260040161044790611f39565b600054610100900460ff1615801561075d576000805460ff1961ff0019909116610100171660011790555b610765610cd5565b8015610777576000805461ff00191690555b50565b6101c56020526000908152604090205481565b60975460ff1690565b600061056982610fff565b6107a9610b23565b6107c55760405162461bcd60e51b81526004016104479061201b565b60975460ff16156107e85760405162461bcd60e51b815260040161044790611eda565b6106ea8383838080601f01602080910402602001604051908101604052809392919081815260200183838082843760009201919091525061101592505050565b60975460009060ff161561084e5760405162461bcd60e51b815260040161044790611eda565b506001600160a01b0390811660009081526101c460205260409020541690565b6000610878610b23565b6108945760405162461bcd60e51b81526004016104479061201b565b60975460ff16156108b75760405162461bcd60e51b815260040161044790611eda565b61056982610f65565b6108c8610b23565b6108e45760405162461bcd60e51b81526004016104479061201b565b60975460ff16156109075760405162461bcd60e51b815260040161044790611eda565b61053982826110aa565b6101c75481565b61093260008051602061212a833981519152610365610e23565b61094e5760405162461bcd60e51b815260040161044790611fae565b610648611138565b61095e610b23565b61097a5760405162461bcd60e51b81526004016104479061201b565b60975460ff161561099d5760405162461bcd60e51b815260040161044790611eda565b6105398282611191565b6101c36020908152600091825260409182902080548351601f600260001961010060018616150201909316929092049182018490048402810184019094528084529091830182828015610a3b5780601f10610a1057610100808354040283529160200191610a3b565b820191906000526020600020905b815481529060010190602001808311610a1e57829003601f168201915b505050505081565b6000828152606560205260408120610a5b9083611220565b9392505050565b6000828152606560205260408120610a5b908361122c565b60006101c882604051602001610a909190611c2f565b60408051601f1981840301815290829052610aaa91611c98565b908152604051908190036020019020546001600160a01b03169050919050565b600081565b610ad7610b23565b610af35760405162461bcd60e51b81526004016104479061201b565b60975460ff1615610b165760405162461bcd60e51b815260040161044790611eda565b610777816101c754611191565b6000610b3f60008051602061210a833981519152610365610e23565b905090565b600081815260656020526040812061056990611241565b600082815260656020526040902060020154610b7990610365610e23565b6106005760405162461bcd60e51b815260040161044790611e8a565b60975460009060ff1615610bbb5760405162461bcd60e51b815260040161044790611eda565b610b3f6101c75461124c565b60008051602061210a83398151915281565b60008051602061212a83398151915281565b6000610569826003806020026040519081016040528092919082600360200280828437600092019190915250611268915050565b60975460009060ff1615610c455760405162461bcd60e51b815260040161044790611eda565b6105698261124c565b303b1590565b600054610100900460ff1680610c6d5750610c6d610c4e565b80610c7b575060005460ff16155b610c975760405162461bcd60e51b815260040161044790611f39565b600054610100900460ff16158015610765576000805460ff1961ff0019909116610100171660011790558015610777576000805461ff001916905550565b600054610100900460ff1680610cee5750610cee610c4e565b80610cfc575060005460ff16155b610d185760405162461bcd60e51b815260040161044790611f39565b600054610100900460ff16158015610d43576000805460ff1961ff0019909116610100171660011790555b6097805460ff191690558015610777576000805461ff001916905550565b600054610100900460ff1680610d7a5750610d7a610c4e565b80610d88575060005460ff16155b610da45760405162461bcd60e51b815260040161044790611f39565b600054610100900460ff16158015610dcf576000805460ff1961ff0019909116610100171660011790555b60c9805460ff191660011790558015610777576000805461ff001916905550565b60009182526065602052604090912060020155565b6001600160a01b031660009081526101c56020526040902054151590565b3390565b6000828152606560205260409020610e3f90826112c4565b1561053957610e4c610e23565b6001600160a01b0316816001600160a01b0316837f2f8788117e7eff1d82e926ec794901d17c78024a50270940304540a733656f0d60405160405180910390a45050565b6000828152606560205260409020610ea890826112d9565b1561053957610eb5610e23565b6001600160a01b0316816001600160a01b0316837ff6391f5c32d9c69d2a47ea670b442974b53935d1edc7fd64eb21e047a839171b60405160405180910390a45050565b60975460ff16610f1b5760405162461bcd60e51b815260040161044790611df4565b6097805460ff191690557f5db9ee0a495bf2e6ff9c91a7834c1ba4fdd244a5e8aa4e537bd38aeae4b073aa610f4e610e23565b604051610f5b9190611cb4565b60405180910390a1565b6000610f6f61194e565b826001600160a01b0316630d8e6e2c6040518163ffffffff1660e01b815260040160606040518083038186803b158015610fa857600080fd5b505afa158015610fbc573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610fe09190611b40565b9050610fec81846112ee565b6000610ff7846113b1565b949350505050565b600081158015906105695750506101c754101590565b61101e82610e05565b61103a5760405162461bcd60e51b815260040161044790611ff5565b6001600160a01b03821660009081526101c36020908152604090912082516110649284019061196c565b50816001600160a01b03167fcfcd475c604bfbc75932564c95bc031e51de33f73cad003713615047cd8fff2e8260405161109e9190611d10565b60405180910390a25050565b6110b261194e565b826001600160a01b0316630d8e6e2c6040518163ffffffff1660e01b815260040160606040518083038186803b1580156110eb57600080fd5b505afa1580156110ff573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906111239190611b40565b905061112e81611454565b6106ea838361153b565b60975460ff161561115b5760405162461bcd60e51b815260040161044790611eda565b6097805460ff191660011790557f62e78cea01bee320cd4e420270b5ea74000d11b0c9f74754ebdbfc544b05a258610f4e610e23565b61119961194e565b826001600160a01b0316630d8e6e2c6040518163ffffffff1660e01b815260040160606040518083038186803b1580156111d257600080fd5b505afa1580156111e6573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061120a9190611b40565b905061121681846112ee565b6106ea83836116ac565b6000610a5b83836117d7565b6000610a5b836001600160a01b03841661181c565b600061056982611834565b60009081526101c660205260409020546001600160a01b031690565b6000806001600160a01b03166101c8836040516020016112889190611c70565b60408051601f19818403018152908290526112a291611c98565b908152604051908190036020019020546001600160a01b031614159050919050565b6000610a5b836001600160a01b038416611838565b6000610a5b836001600160a01b038416611882565b6112f782611268565b156113145760405162461bcd60e51b815260040161044790611d43565b806101c8836040516020016113299190611c70565b60408051601f198184030181529082905261134391611c98565b90815260405190819003602001812080546001600160a01b039384166001600160a01b03199091161790559082169061137d908490611c70565b604051908190038120907f0e9fe021c3c807e908689f11f723b17a4f0d65d0a62a5cda1e39656ddee33c8890600090a35050565b60006113bc82611948565b6113d85760405162461bcd60e51b815260040161044790611e22565b6101c7805460010180825560009081526101c66020908152604080832080546001600160a01b0319166001600160a01b03881690811790915593548484526101c5909252808320829055519192917f5570b95960d1ec214184bfc3681f1e8b1b70e90f7e07e53a209e8029cbba5d5b908490a450506101c75490565b60006101c88260405160200161146a9190611cc8565b60408051601f198184030181529082905261148491611c98565b90815260405160209181900382018120546001600160a01b031692506000916101c8916114b391869101611c70565b60408051601f19818403018152908290526114cd91611c98565b90815260405190819003602001812080546001600160a01b039384166001600160a01b031990911617905590821690611507908490611c70565b604051908190038120907f18e2b5e04736289291853fdba61749fad2d986bbbc779a658029be409d6ac5d890600090a35050565b6001600160a01b0382161580159061155b57506001600160a01b03811615155b6115775760405162461bcd60e51b815260040161044790611e4a565b6001600160a01b0381811660009081526101c460205260409020548116908316146115b45760405162461bcd60e51b815260040161044790611e68565b6001600160a01b0380831660008181526101c560209081526040808320548084526101c69092529091205490921614156116115760008181526101c66020526040902080546001600160a01b0319166001600160a01b0384161790555b61162a8360405180602001604052806000815250611015565b6001600160a01b0383811660008181526101c460209081526040808320805488871685528285208054919097166001600160a01b03199182161790965584845280549095169094556101c590528281208190559151909183917f0d141fd7c77072fc48765e24d85a4727dc79f72cbb320ad2ba944e2914a51e6d9190a3505050565b6116b582611948565b6116d15760405162461bcd60e51b815260040161044790611e22565b6116da82610e05565b156116f75760405162461bcd60e51b815260040161044790611d43565b61170081610fff565b61171c5760405162461bcd60e51b815260040161044790611fca565b60008181526101c660205260409020546001600160a01b03166117515760405162461bcd60e51b815260040161044790611f87565b60008181526101c66020908152604080832080546001600160a01b038781166001600160a01b031980841682179094558087526101c5865284872088905591168086526101c49094528285208054909216811790915590519192839285917f5570b95960d1ec214184bfc3681f1e8b1b70e90f7e07e53a209e8029cbba5d5b91a4505050565b815460009082106117fa5760405162461bcd60e51b815260040161044790611d63565b82600001828154811061180957fe5b9060005260206000200154905092915050565b60009081526001919091016020526040902054151590565b5490565b6000611844838361181c565b61187a57508154600181810184556000848152602080822090930184905584548482528286019093526040902091909155610569565b506000610569565b6000818152600183016020526040812054801561193e57835460001980830191908101906000908790839081106118b557fe5b90600052602060002001549050808760000184815481106118d257fe5b60009182526020808320909101929092558281526001898101909252604090209084019055865487908061190257fe5b60019003818190600052602060002001600090559055866001016000878152602001908152602001600020600090556001945050505050610569565b6000915050610569565b3b151590565b60405180606001604052806003906020820280368337509192915050565b828054600181600116156101000203166002900490600052602060002090601f016020900481019282601f106119ad57805160ff19168380011785556119da565b828001600101855582156119da579182015b828111156119da5782518255916020019190600101906119bf565b506119e69291506119ea565b5090565b5b808211156119e657600081556001016119eb565b80356001600160a01b038116811461056957600080fd5b8051610569816120fa565b600060208284031215611a32578081fd5b610a5b83836119ff565b60008060408385031215611a4e578081fd5b611a5884846119ff565b9150611a6784602085016119ff565b90509250929050565b600080600060408486031215611a84578081fd5b8335611a8f816120e5565b9250602084013567ffffffffffffffff80821115611aab578283fd5b818601915086601f830112611abe578283fd5b813581811115611acc578384fd5b876020828501011115611add578384fd5b6020830194508093505050509250925092565b60008060408385031215611b02578182fd5b611b0c84846119ff565b946020939093013593505050565b600060608284031215611b2b578081fd5b82606083011115611b3a578081fd5b50919050565b600060608284031215611b51578081fd5b82601f830112611b5f578081fd5b6040516060810181811067ffffffffffffffff82111715611b7e578283fd5b604052808360608101861015611b92578384fd5b835b6003811015611bbc57611ba78783611a16565b83526020928301929190910190600101611b94565b509195945050505050565b600060208284031215611bd8578081fd5b5035919050565b60008060408385031215611bf1578182fd5b823591506020830135611c03816120e5565b809150509250929050565b60008060408385031215611c20578182fd5b50508035926020909101359150565b60008183825b6003811015611c615760208235611c4b816120fa565b60ff168452928301929190910190600101611c35565b50505060608201905092915050565b60008183825b6003811015611c6157815160ff16835260209283019290910190600101611c76565b60008251611caa8184602087016120b5565b9190910192915050565b6001600160a01b0391909116815260200190565b60608101818360005b6003811015611cf357815160ff16835260209283019290910190600101611cd1565b50505092915050565b901515815260200190565b90815260200190565b6000602082528251806020840152611d2f8160408501602087016120b5565b601f01601f19169190910160400192915050565b60208082526006908201526565786973747360d01b604082015260600190565b60208082526022908201527f456e756d657261626c655365743a20696e646578206f7574206f6620626f756e604082015261647360f01b606082015260800190565b6020808252602f908201527f416363657373436f6e74726f6c3a2073656e646572206d75737420626520616e60408201526e0818591b5a5b881d1bc819dc985b9d608a1b606082015260800190565b60208082526014908201527314185d5cd8589b194e881b9bdd081c185d5cd95960621b604082015260600190565b6020808252600e908201526d1b9bdd08184818dbdb9d1c9858dd60921b604082015260600190565b6020808252600490820152635a45524f60e01b604082015260600190565b6020808252600890820152672737ba10383932bb60c11b604082015260600190565b60208082526030908201527f416363657373436f6e74726f6c3a2073656e646572206d75737420626520616e60408201526f2061646d696e20746f207265766f6b6560801b606082015260800190565b60208082526010908201526f14185d5cd8589b194e881c185d5cd95960821b604082015260600190565b6020808252818101527f4f776e65722063616e6e6f7420626520746865207a65726f2061646472657373604082015260600190565b6020808252602e908201527f436f6e747261637420696e7374616e63652068617320616c726561647920626560408201526d195b881a5b9a5d1a585b1a5e995960921b606082015260800190565b6020808252600d908201526c656d707479206c696e6561676560981b604082015260600190565b6020808252600290820152614e4160f01b604082015260600190565b6020808252601190820152701a5b9d985b1a59081b1a5b995859d95259607a1b604082015260600190565b6020808252600c908201526b1d5b9adb9bdddb881a5b5c1b60a21b604082015260600190565b6020808252602b908201527f4d75737420686176652061646d696e20726f6c6520746f20706572666f726d2060408201526a3a3434b99030b1ba34b7b760a91b606082015260800190565b6020808252602f908201527f416363657373436f6e74726f6c3a2063616e206f6e6c792072656e6f756e636560408201526e103937b632b9903337b91039b2b63360891b606082015260800190565b60005b838110156120d05781810151838201526020016120b8565b838111156120df576000848401525b50505050565b6001600160a01b038116811461077757600080fd5b60ff8116811461077757600080fdfeb19546dff01e856fb3f010c267a7b1c60363cf8a4664e21cc89c26224620214e65d7a28e3265b37a6474929f336521b332c1681b933f6cb9f3376673440d862aa2646970667358221220eed80af356ae7d719cc7abb6c88cab58c8002ab72cd8b04b3879786f3cce421264736f6c634300060c0033",
  "deployedBytecode": "0x608060405234801561001057600080fd5b50600436106101bb5760003560e01c8063800751b2116100fa578063ac04f5a71161009d578063ac04f5a714610385578063b6db75a014610398578063ca15c873146103a0578063d547741f146103b3578063d8bd5c29146103c6578063e58378bb146103ce578063e63ab1e9146103d6578063f57f6880146103de578063fd81bf9a146103f1576101bb565b8063800751b2146103015780638456cb591461030957806386c700e2146103115780638e12f761146103245780639010d07c1461034457806391d14854146103575780639fb9d3d31461036a578063a217fddf1461037d576101bb565b8063526d81f611610162578063526d81f6146102725780635b730dbb1461027a5780635c975abb1461028d5780636063d19c146102955780636067570e146102a85780636a3def6c146102bb57806378e33e4e146102db5780637f7c1491146102ee576101bb565b8063097616a3146101c05780630e6a6ef5146101d557806321887c3d146101fe578063248a9ca3146102115780632f2ff15d1461023157806336568abe146102445780633f4ba83a14610257578063485cc9551461025f575b600080fd5b6101d36101ce366004611a21565b610404565b005b6101e86101e3366004611a21565b61053d565b6040516101f59190611cfc565b60405180910390f35b6101e861020c366004611a21565b61055e565b61022461021f366004611bc7565b61056f565b6040516101f59190611d07565b6101d361023f366004611bdf565b610584565b6101d3610252366004611bdf565b6105c8565b6101d361060a565b6101d361026d366004611a3c565b61064a565b6101d36106ef565b610224610288366004611a21565b61077a565b6101e861078d565b6101e86102a3366004611bc7565b610796565b6101d36102b6366004611a70565b6107a1565b6102ce6102c9366004611a21565b610828565b6040516101f59190611cb4565b6102246102e9366004611a21565b61086e565b6101d36102fc366004611a3c565b6108c0565b610224610911565b6101d3610918565b6101d361031f366004611af0565b610956565b610337610332366004611a21565b6109a7565b6040516101f59190611d10565b6102ce610352366004611c0e565b610a43565b6101e8610365366004611bdf565b610a62565b6102ce610378366004611b1a565b610a7a565b610224610aca565b6101d3610393366004611a21565b610acf565b6101e8610b23565b6102246103ae366004611bc7565b610b44565b6101d36103c1366004611bdf565b610b5b565b6102ce610b95565b610224610bc7565b610224610bd9565b6101e86103ec366004611b1a565b610beb565b6102ce6103ff366004611bc7565b610c1f565b600054610100900460ff168061041d575061041d610c4e565b8061042b575060005460ff16155b6104505760405162461bcd60e51b815260040161044790611f39565b60405180910390fd5b600054610100900460ff1615801561047b576000805460ff1961ff0019909116610100171660011790555b6001600160a01b0382166104a15760405162461bcd60e51b815260040161044790611f04565b6104a9610c54565b6104b1610cd5565b6104b9610d61565b6104d160008051602061210a833981519152836105be565b6104e960008051602061212a833981519152836105be565b61050f60008051602061212a83398151915260008051602061210a833981519152610df0565b61052760008051602061210a83398151915280610df0565b8015610539576000805461ff00191690555b5050565b6001600160a01b0390811660009081526101c4602052604090205416151590565b600061056982610e05565b92915050565b60009081526065602052604090206002015490565b6000828152606560205260409020600201546105a290610365610e23565b6105be5760405162461bcd60e51b815260040161044790611da5565b6105398282610e27565b6105d0610e23565b6001600160a01b0316816001600160a01b0316146106005760405162461bcd60e51b815260040161044790612066565b6105398282610e90565b61062460008051602061212a833981519152610365610e23565b6106405760405162461bcd60e51b815260040161044790611fae565b610648610ef9565b565b600054610100900460ff16806106635750610663610c4e565b80610671575060005460ff16155b61068d5760405162461bcd60e51b815260040161044790611f39565b600054610100900460ff161580156106b8576000805460ff1961ff0019909116610100171660011790555b6106c183610404565b6106ca82610f65565b506101c7546106d857600080fd5b80156106ea576000805461ff00191690555b505050565b600054610100900460ff16806107085750610708610c4e565b80610716575060005460ff16155b6107325760405162461bcd60e51b815260040161044790611f39565b600054610100900460ff1615801561075d576000805460ff1961ff0019909116610100171660011790555b610765610cd5565b8015610777576000805461ff00191690555b50565b6101c56020526000908152604090205481565b60975460ff1690565b600061056982610fff565b6107a9610b23565b6107c55760405162461bcd60e51b81526004016104479061201b565b60975460ff16156107e85760405162461bcd60e51b815260040161044790611eda565b6106ea8383838080601f01602080910402602001604051908101604052809392919081815260200183838082843760009201919091525061101592505050565b60975460009060ff161561084e5760405162461bcd60e51b815260040161044790611eda565b506001600160a01b0390811660009081526101c460205260409020541690565b6000610878610b23565b6108945760405162461bcd60e51b81526004016104479061201b565b60975460ff16156108b75760405162461bcd60e51b815260040161044790611eda565b61056982610f65565b6108c8610b23565b6108e45760405162461bcd60e51b81526004016104479061201b565b60975460ff16156109075760405162461bcd60e51b815260040161044790611eda565b61053982826110aa565b6101c75481565b61093260008051602061212a833981519152610365610e23565b61094e5760405162461bcd60e51b815260040161044790611fae565b610648611138565b61095e610b23565b61097a5760405162461bcd60e51b81526004016104479061201b565b60975460ff161561099d5760405162461bcd60e51b815260040161044790611eda565b6105398282611191565b6101c36020908152600091825260409182902080548351601f600260001961010060018616150201909316929092049182018490048402810184019094528084529091830182828015610a3b5780601f10610a1057610100808354040283529160200191610a3b565b820191906000526020600020905b815481529060010190602001808311610a1e57829003601f168201915b505050505081565b6000828152606560205260408120610a5b9083611220565b9392505050565b6000828152606560205260408120610a5b908361122c565b60006101c882604051602001610a909190611c2f565b60408051601f1981840301815290829052610aaa91611c98565b908152604051908190036020019020546001600160a01b03169050919050565b600081565b610ad7610b23565b610af35760405162461bcd60e51b81526004016104479061201b565b60975460ff1615610b165760405162461bcd60e51b815260040161044790611eda565b610777816101c754611191565b6000610b3f60008051602061210a833981519152610365610e23565b905090565b600081815260656020526040812061056990611241565b600082815260656020526040902060020154610b7990610365610e23565b6106005760405162461bcd60e51b815260040161044790611e8a565b60975460009060ff1615610bbb5760405162461bcd60e51b815260040161044790611eda565b610b3f6101c75461124c565b60008051602061210a83398151915281565b60008051602061212a83398151915281565b6000610569826003806020026040519081016040528092919082600360200280828437600092019190915250611268915050565b60975460009060ff1615610c455760405162461bcd60e51b815260040161044790611eda565b6105698261124c565b303b1590565b600054610100900460ff1680610c6d5750610c6d610c4e565b80610c7b575060005460ff16155b610c975760405162461bcd60e51b815260040161044790611f39565b600054610100900460ff16158015610765576000805460ff1961ff0019909116610100171660011790558015610777576000805461ff001916905550565b600054610100900460ff1680610cee5750610cee610c4e565b80610cfc575060005460ff16155b610d185760405162461bcd60e51b815260040161044790611f39565b600054610100900460ff16158015610d43576000805460ff1961ff0019909116610100171660011790555b6097805460ff191690558015610777576000805461ff001916905550565b600054610100900460ff1680610d7a5750610d7a610c4e565b80610d88575060005460ff16155b610da45760405162461bcd60e51b815260040161044790611f39565b600054610100900460ff16158015610dcf576000805460ff1961ff0019909116610100171660011790555b60c9805460ff191660011790558015610777576000805461ff001916905550565b60009182526065602052604090912060020155565b6001600160a01b031660009081526101c56020526040902054151590565b3390565b6000828152606560205260409020610e3f90826112c4565b1561053957610e4c610e23565b6001600160a01b0316816001600160a01b0316837f2f8788117e7eff1d82e926ec794901d17c78024a50270940304540a733656f0d60405160405180910390a45050565b6000828152606560205260409020610ea890826112d9565b1561053957610eb5610e23565b6001600160a01b0316816001600160a01b0316837ff6391f5c32d9c69d2a47ea670b442974b53935d1edc7fd64eb21e047a839171b60405160405180910390a45050565b60975460ff16610f1b5760405162461bcd60e51b815260040161044790611df4565b6097805460ff191690557f5db9ee0a495bf2e6ff9c91a7834c1ba4fdd244a5e8aa4e537bd38aeae4b073aa610f4e610e23565b604051610f5b9190611cb4565b60405180910390a1565b6000610f6f61194e565b826001600160a01b0316630d8e6e2c6040518163ffffffff1660e01b815260040160606040518083038186803b158015610fa857600080fd5b505afa158015610fbc573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610fe09190611b40565b9050610fec81846112ee565b6000610ff7846113b1565b949350505050565b600081158015906105695750506101c754101590565b61101e82610e05565b61103a5760405162461bcd60e51b815260040161044790611ff5565b6001600160a01b03821660009081526101c36020908152604090912082516110649284019061196c565b50816001600160a01b03167fcfcd475c604bfbc75932564c95bc031e51de33f73cad003713615047cd8fff2e8260405161109e9190611d10565b60405180910390a25050565b6110b261194e565b826001600160a01b0316630d8e6e2c6040518163ffffffff1660e01b815260040160606040518083038186803b1580156110eb57600080fd5b505afa1580156110ff573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906111239190611b40565b905061112e81611454565b6106ea838361153b565b60975460ff161561115b5760405162461bcd60e51b815260040161044790611eda565b6097805460ff191660011790557f62e78cea01bee320cd4e420270b5ea74000d11b0c9f74754ebdbfc544b05a258610f4e610e23565b61119961194e565b826001600160a01b0316630d8e6e2c6040518163ffffffff1660e01b815260040160606040518083038186803b1580156111d257600080fd5b505afa1580156111e6573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061120a9190611b40565b905061121681846112ee565b6106ea83836116ac565b6000610a5b83836117d7565b6000610a5b836001600160a01b03841661181c565b600061056982611834565b60009081526101c660205260409020546001600160a01b031690565b6000806001600160a01b03166101c8836040516020016112889190611c70565b60408051601f19818403018152908290526112a291611c98565b908152604051908190036020019020546001600160a01b031614159050919050565b6000610a5b836001600160a01b038416611838565b6000610a5b836001600160a01b038416611882565b6112f782611268565b156113145760405162461bcd60e51b815260040161044790611d43565b806101c8836040516020016113299190611c70565b60408051601f198184030181529082905261134391611c98565b90815260405190819003602001812080546001600160a01b039384166001600160a01b03199091161790559082169061137d908490611c70565b604051908190038120907f0e9fe021c3c807e908689f11f723b17a4f0d65d0a62a5cda1e39656ddee33c8890600090a35050565b60006113bc82611948565b6113d85760405162461bcd60e51b815260040161044790611e22565b6101c7805460010180825560009081526101c66020908152604080832080546001600160a01b0319166001600160a01b03881690811790915593548484526101c5909252808320829055519192917f5570b95960d1ec214184bfc3681f1e8b1b70e90f7e07e53a209e8029cbba5d5b908490a450506101c75490565b60006101c88260405160200161146a9190611cc8565b60408051601f198184030181529082905261148491611c98565b90815260405160209181900382018120546001600160a01b031692506000916101c8916114b391869101611c70565b60408051601f19818403018152908290526114cd91611c98565b90815260405190819003602001812080546001600160a01b039384166001600160a01b031990911617905590821690611507908490611c70565b604051908190038120907f18e2b5e04736289291853fdba61749fad2d986bbbc779a658029be409d6ac5d890600090a35050565b6001600160a01b0382161580159061155b57506001600160a01b03811615155b6115775760405162461bcd60e51b815260040161044790611e4a565b6001600160a01b0381811660009081526101c460205260409020548116908316146115b45760405162461bcd60e51b815260040161044790611e68565b6001600160a01b0380831660008181526101c560209081526040808320548084526101c69092529091205490921614156116115760008181526101c66020526040902080546001600160a01b0319166001600160a01b0384161790555b61162a8360405180602001604052806000815250611015565b6001600160a01b0383811660008181526101c460209081526040808320805488871685528285208054919097166001600160a01b03199182161790965584845280549095169094556101c590528281208190559151909183917f0d141fd7c77072fc48765e24d85a4727dc79f72cbb320ad2ba944e2914a51e6d9190a3505050565b6116b582611948565b6116d15760405162461bcd60e51b815260040161044790611e22565b6116da82610e05565b156116f75760405162461bcd60e51b815260040161044790611d43565b61170081610fff565b61171c5760405162461bcd60e51b815260040161044790611fca565b60008181526101c660205260409020546001600160a01b03166117515760405162461bcd60e51b815260040161044790611f87565b60008181526101c66020908152604080832080546001600160a01b038781166001600160a01b031980841682179094558087526101c5865284872088905591168086526101c49094528285208054909216811790915590519192839285917f5570b95960d1ec214184bfc3681f1e8b1b70e90f7e07e53a209e8029cbba5d5b91a4505050565b815460009082106117fa5760405162461bcd60e51b815260040161044790611d63565b82600001828154811061180957fe5b9060005260206000200154905092915050565b60009081526001919091016020526040902054151590565b5490565b6000611844838361181c565b61187a57508154600181810184556000848152602080822090930184905584548482528286019093526040902091909155610569565b506000610569565b6000818152600183016020526040812054801561193e57835460001980830191908101906000908790839081106118b557fe5b90600052602060002001549050808760000184815481106118d257fe5b60009182526020808320909101929092558281526001898101909252604090209084019055865487908061190257fe5b60019003818190600052602060002001600090559055866001016000878152602001908152602001600020600090556001945050505050610569565b6000915050610569565b3b151590565b60405180606001604052806003906020820280368337509192915050565b828054600181600116156101000203166002900490600052602060002090601f016020900481019282601f106119ad57805160ff19168380011785556119da565b828001600101855582156119da579182015b828111156119da5782518255916020019190600101906119bf565b506119e69291506119ea565b5090565b5b808211156119e657600081556001016119eb565b80356001600160a01b038116811461056957600080fd5b8051610569816120fa565b600060208284031215611a32578081fd5b610a5b83836119ff565b60008060408385031215611a4e578081fd5b611a5884846119ff565b9150611a6784602085016119ff565b90509250929050565b600080600060408486031215611a84578081fd5b8335611a8f816120e5565b9250602084013567ffffffffffffffff80821115611aab578283fd5b818601915086601f830112611abe578283fd5b813581811115611acc578384fd5b876020828501011115611add578384fd5b6020830194508093505050509250925092565b60008060408385031215611b02578182fd5b611b0c84846119ff565b946020939093013593505050565b600060608284031215611b2b578081fd5b82606083011115611b3a578081fd5b50919050565b600060608284031215611b51578081fd5b82601f830112611b5f578081fd5b6040516060810181811067ffffffffffffffff82111715611b7e578283fd5b604052808360608101861015611b92578384fd5b835b6003811015611bbc57611ba78783611a16565b83526020928301929190910190600101611b94565b509195945050505050565b600060208284031215611bd8578081fd5b5035919050565b60008060408385031215611bf1578182fd5b823591506020830135611c03816120e5565b809150509250929050565b60008060408385031215611c20578182fd5b50508035926020909101359150565b60008183825b6003811015611c615760208235611c4b816120fa565b60ff168452928301929190910190600101611c35565b50505060608201905092915050565b60008183825b6003811015611c6157815160ff16835260209283019290910190600101611c76565b60008251611caa8184602087016120b5565b9190910192915050565b6001600160a01b0391909116815260200190565b60608101818360005b6003811015611cf357815160ff16835260209283019290910190600101611cd1565b50505092915050565b901515815260200190565b90815260200190565b6000602082528251806020840152611d2f8160408501602087016120b5565b601f01601f19169190910160400192915050565b60208082526006908201526565786973747360d01b604082015260600190565b60208082526022908201527f456e756d657261626c655365743a20696e646578206f7574206f6620626f756e604082015261647360f01b606082015260800190565b6020808252602f908201527f416363657373436f6e74726f6c3a2073656e646572206d75737420626520616e60408201526e0818591b5a5b881d1bc819dc985b9d608a1b606082015260800190565b60208082526014908201527314185d5cd8589b194e881b9bdd081c185d5cd95960621b604082015260600190565b6020808252600e908201526d1b9bdd08184818dbdb9d1c9858dd60921b604082015260600190565b6020808252600490820152635a45524f60e01b604082015260600190565b6020808252600890820152672737ba10383932bb60c11b604082015260600190565b60208082526030908201527f416363657373436f6e74726f6c3a2073656e646572206d75737420626520616e60408201526f2061646d696e20746f207265766f6b6560801b606082015260800190565b60208082526010908201526f14185d5cd8589b194e881c185d5cd95960821b604082015260600190565b6020808252818101527f4f776e65722063616e6e6f7420626520746865207a65726f2061646472657373604082015260600190565b6020808252602e908201527f436f6e747261637420696e7374616e63652068617320616c726561647920626560408201526d195b881a5b9a5d1a585b1a5e995960921b606082015260800190565b6020808252600d908201526c656d707479206c696e6561676560981b604082015260600190565b6020808252600290820152614e4160f01b604082015260600190565b6020808252601190820152701a5b9d985b1a59081b1a5b995859d95259607a1b604082015260600190565b6020808252600c908201526b1d5b9adb9bdddb881a5b5c1b60a21b604082015260600190565b6020808252602b908201527f4d75737420686176652061646d696e20726f6c6520746f20706572666f726d2060408201526a3a3434b99030b1ba34b7b760a91b606082015260800190565b6020808252602f908201527f416363657373436f6e74726f6c3a2063616e206f6e6c792072656e6f756e636560408201526e103937b632b9903337b91039b2b63360891b606082015260800190565b60005b838110156120d05781810151838201526020016120b8565b838111156120df576000848401525b50505050565b6001600160a01b038116811461077757600080fd5b60ff8116811461077757600080fdfeb19546dff01e856fb3f010c267a7b1c60363cf8a4664e21cc89c26224620214e65d7a28e3265b37a6474929f336521b332c1681b933f6cb9f3376673440d862aa2646970667358221220eed80af356ae7d719cc7abb6c88cab58c8002ab72cd8b04b3879786f3cce421264736f6c634300060c0033",
  "devdoc": {
    "kind": "dev",
    "methods": {
      "append(address)": {
        "details": "reverts if the sender is not an ownerreverts if the contract is pausedreverts if `implementation` is not a contract",
        "params": {
          "implementation": "implementation to append"
        }
      },
      "append(address,uint256)": {
        "details": "reverts if the contract is pausedreverts if the sender is not an ownerreverts if `implementation` is not a contract",
        "params": {
          "implementation": "implementation to append",
          "lineageId": "id of lineage to append to"
        }
      },
      "createLineage(address)": {
        "details": "reverts if `implementation` is not a contract",
        "params": {
          "implementation": "implementation that will be the first implementation in the lineage"
        },
        "returns": {
          "_0": "newly created lineage's id"
        }
      },
      "getByVersion(uint8[3])": {
        "params": {
          "version": "`[major, minor, patch]` version tag"
        },
        "returns": {
          "_0": "implementation associated with the given version tag"
        }
      },
      "getRoleAdmin(bytes32)": {
        "details": "Returns the admin role that controls `role`. See {grantRole} and {revokeRole}. To change a role's admin, use {_setRoleAdmin}."
      },
      "getRoleMember(bytes32,uint256)": {
        "details": "Returns one of the accounts that have `role`. `index` must be a value between 0 and {getRoleMemberCount}, non-inclusive. Role bearers are not sorted in any particular way, and their ordering may change at any point. WARNING: When using {getRoleMember} and {getRoleMemberCount}, make sure you perform all queries on the same block. See the following https://forum.openzeppelin.com/t/iterating-over-elements-on-enumerableset-in-openzeppelin-contracts/2296[forum post] for more information."
      },
      "getRoleMemberCount(bytes32)": {
        "details": "Returns the number of accounts that have `role`. Can be used together with {getRoleMember} to enumerate all bearers of a role."
      },
      "grantRole(bytes32,address)": {
        "details": "Grants `role` to `account`. If `account` had not been already granted `role`, emits a {RoleGranted} event. Requirements: - the caller must have ``role``'s admin role."
      },
      "has(address)": {
        "params": {
          "implementation": "Implementation to check existence of"
        },
        "returns": {
          "_0": "`true` if the implementation has already been added"
        }
      },
      "hasNext(address)": {
        "params": {
          "implementation": "implementation to check"
        },
        "returns": {
          "_0": "The implementation following the given implementation"
        }
      },
      "hasRole(bytes32,address)": {
        "details": "Returns `true` if `account` has been granted `role`."
      },
      "hasVersion(uint8[3])": {
        "params": {
          "version": "`[major, minor, patch]` version tag"
        },
        "returns": {
          "_0": "true if the version is registered"
        }
      },
      "initialize(address,address)": {
        "details": "reverts if `_owner` is the null addressreverts if `implementation` is not a contract",
        "params": {
          "_owner": "owner of the repository",
          "implementation": "initial implementation in the repository"
        }
      },
      "nextImplementationOf(address)": {
        "details": "reverts when contract is paused",
        "params": {
          "implementation": "implementation to get the upgraded implementation for"
        },
        "returns": {
          "_0": "Next Implementation"
        }
      },
      "pause()": {
        "details": "Pauses all functions guarded by Pause See {Pausable-_pause}. Requirements: - the caller must have the PAUSER_ROLE."
      },
      "paused()": {
        "details": "Returns true if the contract is paused, and false otherwise."
      },
      "remove(address,address)": {
        "details": "If you have a chain of `A -> B -> C` and I call `remove(B, C)` it will result in `A -> C`reverts if `previos` is not the ancestor of `toRemove`we need to provide the previous implementation here to be able to successfully \"stitch\"       the chain back together. Because this is an admin action, we can source what the previous       version is from events.",
        "params": {
          "previous": "Implementation that currently has `toRemove` as its successor",
          "toRemove": "Implementation to remove"
        }
      },
      "renounceRole(bytes32,address)": {
        "details": "Revokes `role` from the calling account. Roles are often managed via {grantRole} and {revokeRole}: this function's purpose is to provide a mechanism for accounts to lose their privileges if they are compromised (such as when a trusted device is misplaced). If the calling account had been granted `role`, emits a {RoleRevoked} event. Requirements: - the caller must be `account`."
      },
      "revokeRole(bytes32,address)": {
        "details": "Revokes `role` from `account`. If `account` had been granted `role`, emits a {RoleRevoked} event. Requirements: - the caller must have ``role``'s admin role."
      },
      "setUpgradeDataFor(address,bytes)": {
        "details": "reverts when caller is not an adminreverts when the contract is pausedreverts if the given implementation isn't registered"
      },
      "unpause()": {
        "details": "Unpauses the contract See {Pausable-_unpause}. Requirements: - the caller must have the Pauser role"
      }
    },
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {
      "append(address)": {
        "notice": "add a new implementation and set it as the current implementation"
      },
      "append(address,uint256)": {
        "notice": "Append an implementation to a specified lineage"
      },
      "createLineage(address)": {
        "notice": "Create a new lineage of implementations. This creates a new \"root\" of a new lineage"
      },
      "currentImplementation()": {
        "notice": "return current implementaton of the current lineage"
      },
      "currentImplementation(uint256)": {
        "notice": "Return the current implementation of a lineage with the given `lineageId`"
      },
      "currentLineageId()": {
        "notice": "Returns the id of the most recently created lineage"
      },
      "getByVersion(uint8[3])": {
        "notice": "get an implementation by a version tag"
      },
      "has(address)": {
        "notice": "Returns `true` if an implementation has already been added"
      },
      "hasNext(address)": {
        "notice": "Returns `true` if an implementation has a next implementation set"
      },
      "hasVersion(uint8[3])": {
        "notice": "check if a version exists"
      },
      "initialize(address,address)": {
        "notice": "initialize the repository's state"
      },
      "lineageExists(uint256)": {
        "notice": "Returns `true` if a given lineageId exists"
      },
      "lineageIdOf(address)": {
        "notice": "Returns the id of the lineage a given implementation belongs to"
      },
      "nextImplementationOf(address)": {
        "notice": "Get the next implementation for a given implementation or           `address(0)` if it doesn't exist"
      },
      "remove(address,address)": {
        "notice": "Remove an implementation from the chain and \"stitch\" together its neighbors"
      },
      "setUpgradeDataFor(address,bytes)": {
        "notice": "set data that will be delegate called when a proxy upgrades to the given `implementation`"
      },
      "upgradeDataFor(address)": {
        "notice": "returns data that will be delegatedCalled when the given implementation           is upgraded to"
      }
    },
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 50,
        "contract": "contracts/protocol/core/TranchedPoolImplementationRepository.sol:TranchedPoolImplementationRepository",
        "label": "initialized",
        "offset": 0,
        "slot": "0",
        "type": "t_bool"
      },
      {
        "astId": 53,
        "contract": "contracts/protocol/core/TranchedPoolImplementationRepository.sol:TranchedPoolImplementationRepository",
        "label": "initializing",
        "offset": 1,
        "slot": "0",
        "type": "t_bool"
      },
      {
        "astId": 118,
        "contract": "contracts/protocol/core/TranchedPoolImplementationRepository.sol:TranchedPoolImplementationRepository",
        "label": "______gap",
        "offset": 0,
        "slot": "1",
        "type": "t_array(t_uint256)50_storage"
      },
      {
        "astId": 43,
        "contract": "contracts/protocol/core/TranchedPoolImplementationRepository.sol:TranchedPoolImplementationRepository",
        "label": "__gap",
        "offset": 0,
        "slot": "51",
        "type": "t_array(t_uint256)50_storage"
      },
      {
        "astId": 163,
        "contract": "contracts/protocol/core/TranchedPoolImplementationRepository.sol:TranchedPoolImplementationRepository",
        "label": "_roles",
        "offset": 0,
        "slot": "101",
        "type": "t_mapping(t_bytes32,t_struct(RoleData)159_storage)"
      },
      {
        "astId": 408,
        "contract": "contracts/protocol/core/TranchedPoolImplementationRepository.sol:TranchedPoolImplementationRepository",
        "label": "__gap",
        "offset": 0,
        "slot": "102",
        "type": "t_array(t_uint256)49_storage"
      },
      {
        "astId": 3207,
        "contract": "contracts/protocol/core/TranchedPoolImplementationRepository.sol:TranchedPoolImplementationRepository",
        "label": "_paused",
        "offset": 0,
        "slot": "151",
        "type": "t_bool"
      },
      {
        "astId": 3296,
        "contract": "contracts/protocol/core/TranchedPoolImplementationRepository.sol:TranchedPoolImplementationRepository",
        "label": "__gap",
        "offset": 0,
        "slot": "152",
        "type": "t_array(t_uint256)49_storage"
      },
      {
        "astId": 3305,
        "contract": "contracts/protocol/core/TranchedPoolImplementationRepository.sol:TranchedPoolImplementationRepository",
        "label": "_notEntered",
        "offset": 0,
        "slot": "201",
        "type": "t_bool"
      },
      {
        "astId": 3346,
        "contract": "contracts/protocol/core/TranchedPoolImplementationRepository.sol:TranchedPoolImplementationRepository",
        "label": "__gap",
        "offset": 0,
        "slot": "202",
        "type": "t_array(t_uint256)49_storage"
      },
      {
        "astId": 12077,
        "contract": "contracts/protocol/core/TranchedPoolImplementationRepository.sol:TranchedPoolImplementationRepository",
        "label": "__gap1",
        "offset": 0,
        "slot": "251",
        "type": "t_array(t_uint256)50_storage"
      },
      {
        "astId": 12081,
        "contract": "contracts/protocol/core/TranchedPoolImplementationRepository.sol:TranchedPoolImplementationRepository",
        "label": "__gap2",
        "offset": 0,
        "slot": "301",
        "type": "t_array(t_uint256)50_storage"
      },
      {
        "astId": 12085,
        "contract": "contracts/protocol/core/TranchedPoolImplementationRepository.sol:TranchedPoolImplementationRepository",
        "label": "__gap3",
        "offset": 0,
        "slot": "351",
        "type": "t_array(t_uint256)50_storage"
      },
      {
        "astId": 12089,
        "contract": "contracts/protocol/core/TranchedPoolImplementationRepository.sol:TranchedPoolImplementationRepository",
        "label": "__gap4",
        "offset": 0,
        "slot": "401",
        "type": "t_array(t_uint256)50_storage"
      },
      {
        "astId": 23845,
        "contract": "contracts/protocol/core/TranchedPoolImplementationRepository.sol:TranchedPoolImplementationRepository",
        "label": "upgradeDataFor",
        "offset": 0,
        "slot": "451",
        "type": "t_mapping(t_address,t_bytes_storage)"
      },
      {
        "astId": 23850,
        "contract": "contracts/protocol/core/TranchedPoolImplementationRepository.sol:TranchedPoolImplementationRepository",
        "label": "_nextImplementationOf",
        "offset": 0,
        "slot": "452",
        "type": "t_mapping(t_address,t_address)"
      },
      {
        "astId": 23855,
        "contract": "contracts/protocol/core/TranchedPoolImplementationRepository.sol:TranchedPoolImplementationRepository",
        "label": "lineageIdOf",
        "offset": 0,
        "slot": "453",
        "type": "t_mapping(t_address,t_uint256)"
      },
      {
        "astId": 23860,
        "contract": "contracts/protocol/core/TranchedPoolImplementationRepository.sol:TranchedPoolImplementationRepository",
        "label": "_currentOfLineage",
        "offset": 0,
        "slot": "454",
        "type": "t_mapping(t_uint256,t_address)"
      },
      {
        "astId": 23863,
        "contract": "contracts/protocol/core/TranchedPoolImplementationRepository.sol:TranchedPoolImplementationRepository",
        "label": "currentLineageId",
        "offset": 0,
        "slot": "455",
        "type": "t_uint256"
      },
      {
        "astId": 24619,
        "contract": "contracts/protocol/core/TranchedPoolImplementationRepository.sol:TranchedPoolImplementationRepository",
        "label": "_byVersion",
        "offset": 0,
        "slot": "456",
        "type": "t_mapping(t_bytes_memory_ptr,t_address)"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_array(t_bytes32)dyn_storage": {
        "base": "t_bytes32",
        "encoding": "dynamic_array",
        "label": "bytes32[]",
        "numberOfBytes": "32"
      },
      "t_array(t_uint256)49_storage": {
        "base": "t_uint256",
        "encoding": "inplace",
        "label": "uint256[49]",
        "numberOfBytes": "1568"
      },
      "t_array(t_uint256)50_storage": {
        "base": "t_uint256",
        "encoding": "inplace",
        "label": "uint256[50]",
        "numberOfBytes": "1600"
      },
      "t_bool": {
        "encoding": "inplace",
        "label": "bool",
        "numberOfBytes": "1"
      },
      "t_bytes32": {
        "encoding": "inplace",
        "label": "bytes32",
        "numberOfBytes": "32"
      },
      "t_bytes_memory_ptr": {
        "encoding": "bytes",
        "label": "bytes",
        "numberOfBytes": "32"
      },
      "t_bytes_storage": {
        "encoding": "bytes",
        "label": "bytes",
        "numberOfBytes": "32"
      },
      "t_mapping(t_address,t_address)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => address)",
        "numberOfBytes": "32",
        "value": "t_address"
      },
      "t_mapping(t_address,t_bytes_storage)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => bytes)",
        "numberOfBytes": "32",
        "value": "t_bytes_storage"
      },
      "t_mapping(t_address,t_uint256)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => uint256)",
        "numberOfBytes": "32",
        "value": "t_uint256"
      },
      "t_mapping(t_bytes32,t_struct(RoleData)159_storage)": {
        "encoding": "mapping",
        "key": "t_bytes32",
        "label": "mapping(bytes32 => struct AccessControlUpgradeSafe.RoleData)",
        "numberOfBytes": "32",
        "value": "t_struct(RoleData)159_storage"
      },
      "t_mapping(t_bytes32,t_uint256)": {
        "encoding": "mapping",
        "key": "t_bytes32",
        "label": "mapping(bytes32 => uint256)",
        "numberOfBytes": "32",
        "value": "t_uint256"
      },
      "t_mapping(t_bytes_memory_ptr,t_address)": {
        "encoding": "mapping",
        "key": "t_bytes_memory_ptr",
        "label": "mapping(bytes => address)",
        "numberOfBytes": "32",
        "value": "t_address"
      },
      "t_mapping(t_uint256,t_address)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => address)",
        "numberOfBytes": "32",
        "value": "t_address"
      },
      "t_struct(AddressSet)2982_storage": {
        "encoding": "inplace",
        "label": "struct EnumerableSet.AddressSet",
        "members": [
          {
            "astId": 2981,
            "contract": "contracts/protocol/core/TranchedPoolImplementationRepository.sol:TranchedPoolImplementationRepository",
            "label": "_inner",
            "offset": 0,
            "slot": "0",
            "type": "t_struct(Set)2802_storage"
          }
        ],
        "numberOfBytes": "64"
      },
      "t_struct(RoleData)159_storage": {
        "encoding": "inplace",
        "label": "struct AccessControlUpgradeSafe.RoleData",
        "members": [
          {
            "astId": 156,
            "contract": "contracts/protocol/core/TranchedPoolImplementationRepository.sol:TranchedPoolImplementationRepository",
            "label": "members",
            "offset": 0,
            "slot": "0",
            "type": "t_struct(AddressSet)2982_storage"
          },
          {
            "astId": 158,
            "contract": "contracts/protocol/core/TranchedPoolImplementationRepository.sol:TranchedPoolImplementationRepository",
            "label": "adminRole",
            "offset": 0,
            "slot": "2",
            "type": "t_bytes32"
          }
        ],
        "numberOfBytes": "96"
      },
      "t_struct(Set)2802_storage": {
        "encoding": "inplace",
        "label": "struct EnumerableSet.Set",
        "members": [
          {
            "astId": 2797,
            "contract": "contracts/protocol/core/TranchedPoolImplementationRepository.sol:TranchedPoolImplementationRepository",
            "label": "_values",
            "offset": 0,
            "slot": "0",
            "type": "t_array(t_bytes32)dyn_storage"
          },
          {
            "astId": 2801,
            "contract": "contracts/protocol/core/TranchedPoolImplementationRepository.sol:TranchedPoolImplementationRepository",
            "label": "_indexes",
            "offset": 0,
            "slot": "1",
            "type": "t_mapping(t_bytes32,t_uint256)"
          }
        ],
        "numberOfBytes": "64"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      }
    }
  }
}