{
  "manifestVersion": "3.2",
  "proxies": [
    {
      "address": "0x19ED8Ee406F38e795686B68E8e5CB44CB1b3EE4a",
      "txHash": "0x9dc213d16f5de2a28b769ad694ba739d51ba10e621ec0769c4e6e6e8c12216fd",
      "kind": "transparent"
    },
    {
      "address": "0x4B881Ed117bD9c296415Ed71Fe90D79E60cd5e4B",
      "txHash": "0x69087a38a036785310bf459e8c08c918021795c9ca0420f7ff2db23b369daea8",
      "kind": "transparent"
    },
    {
      "address": "0x13313AAa80E468F618C8195C4C5B5d90f7ba1EAc",
      "txHash": "0x44976ec91ee12ace2036637c0a9cdc7dceaef3a998f7a7b81545b139f588e92e",
      "kind": "transparent"
    },
    {
      "address": "0x4D79DC12C2237B51DFCe27C79d91AA4f9171B538",
      "txHash": "0xe32785a34233b2a670b27add6eac83fb5e52254fe70052ef9bda3ee7471ce383",
      "kind": "transparent"
    },
    {
      "address": "0x267cC2D856f82Eae6C4758256142859cd55c590B",
      "txHash": "0xfe6f1b9f4a8a014ac76528a5cc96e961958cfdefababfeffac8a0f026c11f909",
      "kind": "transparent"
    },
    {
      "address": "0xe1ab1f88Ad7CFFc6cf3aDc686C2510bd7870712d",
      "txHash": "0xf5d4b7c60eb9b0142a47e3c21592882aad146de83899133eedfa56f3d951eb6e",
      "kind": "transparent"
    },
    {
      "address": "0xc2872Dc1AC3da8e8074685b86Fb80522182Ef564",
      "txHash": "0x52de5c76f55ff639bae0fc2ff46a16bd099857e3bcf2bbdec9d4a78508d051fb",
      "kind": "transparent"
    },
    {
      "address": "0x1A3C9b6c29e7a870946946891E2C8148CFe1f558",
      "txHash": "0x5530d5f997564d94592a42e81cc281050ee5447918cb37541c28d745c3d1dde2",
      "kind": "transparent"
    },
    {
      "address": "0xD551458564545d20Ca25c7C6fbef0f36EaAA5Da2",
      "txHash": "0x60538895dc6d703a09549e7503e858c062b3cf7a3aacf17bb0c432157298f69f",
      "kind": "transparent"
    },
    {
      "address": "0x752777100a06d209D640035e210a11C64E91f916",
      "txHash": "0xeb0c565dbb9431bb1021c139ffca6ad2e8a2561fac63d65b8a45595ce3ef2c8a",
      "kind": "transparent"
    },
    {
      "address": "0xA6482D80575AF126f8556E687AEdAAA5Cc8e5f13",
      "txHash": "0x101b2ea878672c0b8b313e57cd07c3b8be7788af20c7402351f47cf5e2587208",
      "kind": "transparent"
    },
    {
      "address": "0x9E020c7b9a8B971aBBab6F481a370CC77Ba83c65",
      "txHash": "0x0bfaca5852f6441be475c78c9041c49e76e3489bdc153a032014b1e810a3b467",
      "kind": "transparent"
    },
    {
      "address": "0x1fb8Ce8C0CfDE8504a141378D89b7978245Db46D",
      "txHash": "0x3c5e42aa9e1b918014bf4b68ab968bd30a7f68c3f763d1e332fef439a4104640",
      "kind": "transparent"
    },
    {
      "address": "0x09a4B7838D3F07aCb0B3C5bb47dAc96218Ed5CF5",
      "txHash": "0x5ae11e984c75cf5964f4fa77c7e552a0ece87d47f6e6228e735ad6b695d033b4",
      "kind": "transparent"
    },
    {
      "address": "0x31dd3A47e8bF4ec1527e310521A6919163ff6BD3",
      "txHash": "0xcb78a2411362de1760a95a17ef0201daba5901478ddb19c6bbd3346377e4ab6b",
      "kind": "transparent"
    }
  ],
  "impls": {
    "4b873d2431626e7b8b7f25c801720314173fafdabde488a547130bb1da3f4c00": {
      "address": "0x5770Bbd147CBd6a925220DeAC203Ee49F687C974",
      "txHash": "0xdf3e1fccdc550d13262880a29aaf3017d5b69308882366b02a062c62de63dfdb",
      "layout": {
        "storage": [
          {
            "contract": "Initializable",
            "label": "initialized",
            "type": "t_bool",
            "src": "@openzeppelin/contracts-ethereum-package/contracts/Initializable.sol:21"
          },
          {
            "contract": "Initializable",
            "label": "initializing",
            "type": "t_bool",
            "src": "@openzeppelin/contracts-ethereum-package/contracts/Initializable.sol:26"
          },
          {
            "contract": "Initializable",
            "label": "______gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "@openzeppelin/contracts-ethereum-package/contracts/Initializable.sol:61"
          },
          {
            "contract": "ContextUpgradeSafe",
            "label": "__gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "@openzeppelin/contracts-ethereum-package/contracts/GSN/Context.sol:37"
          },
          {
            "contract": "AccessControlUpgradeSafe",
            "label": "_roles",
            "type": "t_mapping(t_bytes32,t_struct(RoleData)260_storage)",
            "src": "@openzeppelin/contracts-ethereum-package/contracts/access/AccessControl.sol:58"
          },
          {
            "contract": "AccessControlUpgradeSafe",
            "label": "__gap",
            "type": "t_array(t_uint256)49_storage",
            "src": "@openzeppelin/contracts-ethereum-package/contracts/access/AccessControl.sol:210"
          },
          {
            "contract": "ERC20UpgradeSafe",
            "label": "_balances",
            "type": "t_mapping(t_address,t_uint256)",
            "src": "@openzeppelin/contracts-ethereum-package/contracts/token/ERC20/ERC20.sol:37"
          },
          {
            "contract": "ERC20UpgradeSafe",
            "label": "_allowances",
            "type": "t_mapping(t_address,t_mapping(t_address,t_uint256))",
            "src": "@openzeppelin/contracts-ethereum-package/contracts/token/ERC20/ERC20.sol:39"
          },
          {
            "contract": "ERC20UpgradeSafe",
            "label": "_totalSupply",
            "type": "t_uint256",
            "src": "@openzeppelin/contracts-ethereum-package/contracts/token/ERC20/ERC20.sol:41"
          },
          {
            "contract": "ERC20UpgradeSafe",
            "label": "_name",
            "type": "t_string_storage",
            "src": "@openzeppelin/contracts-ethereum-package/contracts/token/ERC20/ERC20.sol:43"
          },
          {
            "contract": "ERC20UpgradeSafe",
            "label": "_symbol",
            "type": "t_string_storage",
            "src": "@openzeppelin/contracts-ethereum-package/contracts/token/ERC20/ERC20.sol:44"
          },
          {
            "contract": "ERC20UpgradeSafe",
            "label": "_decimals",
            "type": "t_uint8",
            "src": "@openzeppelin/contracts-ethereum-package/contracts/token/ERC20/ERC20.sol:45"
          },
          {
            "contract": "ERC20UpgradeSafe",
            "label": "__gap",
            "type": "t_array(t_uint256)44_storage",
            "src": "@openzeppelin/contracts-ethereum-package/contracts/token/ERC20/ERC20.sol:317"
          },
          {
            "contract": "ERC20BurnableUpgradeSafe",
            "label": "__gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "@openzeppelin/contracts-ethereum-package/contracts/token/ERC20/ERC20Burnable.sol:50"
          },
          {
            "contract": "PausableUpgradeSafe",
            "label": "_paused",
            "type": "t_bool",
            "src": "@openzeppelin/contracts-ethereum-package/contracts/utils/Pausable.sol:26"
          },
          {
            "contract": "PausableUpgradeSafe",
            "label": "__gap",
            "type": "t_array(t_uint256)49_storage",
            "src": "@openzeppelin/contracts-ethereum-package/contracts/utils/Pausable.sol:84"
          },
          {
            "contract": "ERC20PausableUpgradeSafe",
            "label": "__gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "@openzeppelin/contracts-ethereum-package/contracts/token/ERC20/ERC20Pausable.sol:39"
          },
          {
            "contract": "ERC20PresetMinterPauserUpgradeSafe",
            "label": "__gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "@openzeppelin/contracts-ethereum-package/contracts/presets/ERC20PresetMinterPauser.sol:106"
          },
          {
            "contract": "Fidu",
            "label": "config",
            "type": "t_contract(GoldfinchConfig)17591",
            "src": "contracts/protocol/core/Fidu.sol:21"
          }
        ],
        "types": {
          "t_contract(GoldfinchConfig)17591": {
            "label": "contract GoldfinchConfig"
          },
          "t_array(t_uint256)50_storage": {
            "label": "uint256[50]"
          },
          "t_uint256": {
            "label": "uint256"
          },
          "t_bool": {
            "label": "bool"
          },
          "t_array(t_uint256)49_storage": {
            "label": "uint256[49]"
          },
          "t_mapping(t_address,t_uint256)": {
            "label": "mapping(address => uint256)"
          },
          "t_address": {
            "label": "address"
          },
          "t_mapping(t_address,t_mapping(t_address,t_uint256))": {
            "label": "mapping(address => mapping(address => uint256))"
          },
          "t_string_storage": {
            "label": "string"
          },
          "t_uint8": {
            "label": "uint8"
          },
          "t_array(t_uint256)44_storage": {
            "label": "uint256[44]"
          },
          "t_mapping(t_bytes32,t_struct(RoleData)260_storage)": {
            "label": "mapping(bytes32 => struct AccessControlUpgradeSafe.RoleData)"
          },
          "t_bytes32": {
            "label": "bytes32"
          },
          "t_struct(RoleData)260_storage": {
            "label": "struct AccessControlUpgradeSafe.RoleData",
            "members": [
              {
                "label": "members",
                "type": "t_struct(AddressSet)4204_storage"
              },
              {
                "label": "adminRole",
                "type": "t_bytes32"
              }
            ]
          },
          "t_struct(AddressSet)4204_storage": {
            "label": "struct EnumerableSet.AddressSet",
            "members": [
              {
                "label": "_inner",
                "type": "t_struct(Set)4024_storage"
              }
            ]
          },
          "t_struct(Set)4024_storage": {
            "label": "struct EnumerableSet.Set",
            "members": [
              {
                "label": "_values",
                "type": "t_array(t_bytes32)dyn_storage"
              },
              {
                "label": "_indexes",
                "type": "t_mapping(t_bytes32,t_uint256)"
              }
            ]
          },
          "t_array(t_bytes32)dyn_storage": {
            "label": "bytes32[]"
          },
          "t_mapping(t_bytes32,t_uint256)": {
            "label": "mapping(bytes32 => uint256)"
          }
        }
      }
    },
    "56564fc6ff18a62c8509ace4ea7cebd77dc4b8801d6e4dfbf619ae0b8376cab2": {
      "address": "0x6713f153E816D0C8Ae5A4cC3f17490748DbD2198",
      "txHash": "0xba3a84dd7cc16a2da9506b16c2c3e2b86ee3e3ea1472ab82bde00464aca9db20",
      "layout": {
        "storage": [
          {
            "contract": "Initializable",
            "label": "initialized",
            "type": "t_bool",
            "src": "@openzeppelin/contracts-ethereum-package/contracts/Initializable.sol:21"
          },
          {
            "contract": "Initializable",
            "label": "initializing",
            "type": "t_bool",
            "src": "@openzeppelin/contracts-ethereum-package/contracts/Initializable.sol:26"
          },
          {
            "contract": "Initializable",
            "label": "______gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "@openzeppelin/contracts-ethereum-package/contracts/Initializable.sol:61"
          },
          {
            "contract": "ContextUpgradeSafe",
            "label": "__gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "@openzeppelin/contracts-ethereum-package/contracts/GSN/Context.sol:37"
          },
          {
            "contract": "AccessControlUpgradeSafe",
            "label": "_roles",
            "type": "t_mapping(t_bytes32,t_struct(RoleData)260_storage)",
            "src": "@openzeppelin/contracts-ethereum-package/contracts/access/AccessControl.sol:58"
          },
          {
            "contract": "AccessControlUpgradeSafe",
            "label": "__gap",
            "type": "t_array(t_uint256)49_storage",
            "src": "@openzeppelin/contracts-ethereum-package/contracts/access/AccessControl.sol:210"
          },
          {
            "contract": "ERC165UpgradeSafe",
            "label": "_supportedInterfaces",
            "type": "t_mapping(t_bytes4,t_bool)",
            "src": "@openzeppelin/contracts-ethereum-package/contracts/introspection/ERC165.sol:21"
          },
          {
            "contract": "ERC165UpgradeSafe",
            "label": "__gap",
            "type": "t_array(t_uint256)49_storage",
            "src": "@openzeppelin/contracts-ethereum-package/contracts/introspection/ERC165.sol:63"
          },
          {
            "contract": "ERC721UpgradeSafe",
            "label": "_holderTokens",
            "type": "t_mapping(t_address,t_struct(UintSet)4313_storage)",
            "src": "@openzeppelin/contracts-ethereum-package/contracts/token/ERC721/ERC721.sol:32"
          },
          {
            "contract": "ERC721UpgradeSafe",
            "label": "_tokenOwners",
            "type": "t_struct(UintToAddressMap)3838_storage",
            "src": "@openzeppelin/contracts-ethereum-package/contracts/token/ERC721/ERC721.sol:35"
          },
          {
            "contract": "ERC721UpgradeSafe",
            "label": "_tokenApprovals",
            "type": "t_mapping(t_uint256,t_address)",
            "src": "@openzeppelin/contracts-ethereum-package/contracts/token/ERC721/ERC721.sol:38"
          },
          {
            "contract": "ERC721UpgradeSafe",
            "label": "_operatorApprovals",
            "type": "t_mapping(t_address,t_mapping(t_address,t_bool))",
            "src": "@openzeppelin/contracts-ethereum-package/contracts/token/ERC721/ERC721.sol:41"
          },
          {
            "contract": "ERC721UpgradeSafe",
            "label": "_name",
            "type": "t_string_storage",
            "src": "@openzeppelin/contracts-ethereum-package/contracts/token/ERC721/ERC721.sol:44"
          },
          {
            "contract": "ERC721UpgradeSafe",
            "label": "_symbol",
            "type": "t_string_storage",
            "src": "@openzeppelin/contracts-ethereum-package/contracts/token/ERC721/ERC721.sol:47"
          },
          {
            "contract": "ERC721UpgradeSafe",
            "label": "_tokenURIs",
            "type": "t_mapping(t_uint256,t_string_storage)",
            "src": "@openzeppelin/contracts-ethereum-package/contracts/token/ERC721/ERC721.sol:50"
          },
          {
            "contract": "ERC721UpgradeSafe",
            "label": "_baseURI",
            "type": "t_string_storage",
            "src": "@openzeppelin/contracts-ethereum-package/contracts/token/ERC721/ERC721.sol:53"
          },
          {
            "contract": "ERC721UpgradeSafe",
            "label": "__gap",
            "type": "t_array(t_uint256)41_storage",
            "src": "@openzeppelin/contracts-ethereum-package/contracts/token/ERC721/ERC721.sol:555"
          },
          {
            "contract": "PausableUpgradeSafe",
            "label": "_paused",
            "type": "t_bool",
            "src": "@openzeppelin/contracts-ethereum-package/contracts/utils/Pausable.sol:26"
          },
          {
            "contract": "PausableUpgradeSafe",
            "label": "__gap",
            "type": "t_array(t_uint256)49_storage",
            "src": "@openzeppelin/contracts-ethereum-package/contracts/utils/Pausable.sol:84"
          },
          {
            "contract": "ERC721PausableUpgradeSafe",
            "label": "__gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "@openzeppelin/contracts-ethereum-package/contracts/token/ERC721/ERC721Pausable.sol:40"
          },
          {
            "contract": "ERC721PresetMinterPauserAutoIdUpgradeSafe",
            "label": "_tokenIdTracker",
            "type": "t_struct(Counter)3518_storage",
            "src": "contracts/external/ERC721PresetMinterPauserAutoId.sol:48"
          },
          {
            "contract": "ERC721PresetMinterPauserAutoIdUpgradeSafe",
            "label": "__gap",
            "type": "t_array(t_uint256)49_storage",
            "src": "contracts/external/ERC721PresetMinterPauserAutoId.sol:86"
          },
          {
            "contract": "PoolTokens",
            "label": "config",
            "type": "t_contract(GoldfinchConfig)17591",
            "src": "contracts/protocol/core/PoolTokens.sol:19"
          },
          {
            "contract": "PoolTokens",
            "label": "tokens",
            "type": "t_mapping(t_uint256,t_struct(TokenInfo)10238_storage)",
            "src": "contracts/protocol/core/PoolTokens.sol:29"
          },
          {
            "contract": "PoolTokens",
            "label": "pools",
            "type": "t_mapping(t_address,t_struct(PoolInfo)20088_storage)",
            "src": "contracts/protocol/core/PoolTokens.sol:31"
          }
        ],
        "types": {
          "t_contract(GoldfinchConfig)17591": {
            "label": "contract GoldfinchConfig"
          },
          "t_mapping(t_uint256,t_struct(TokenInfo)10238_storage)": {
            "label": "mapping(uint256 => struct IPoolTokens.TokenInfo)"
          },
          "t_uint256": {
            "label": "uint256"
          },
          "t_struct(TokenInfo)10238_storage": {
            "label": "struct IPoolTokens.TokenInfo",
            "members": [
              {
                "label": "pool",
                "type": "t_address"
              },
              {
                "label": "tranche",
                "type": "t_uint256"
              },
              {
                "label": "principalAmount",
                "type": "t_uint256"
              },
              {
                "label": "principalRedeemed",
                "type": "t_uint256"
              },
              {
                "label": "interestRedeemed",
                "type": "t_uint256"
              }
            ]
          },
          "t_address": {
            "label": "address"
          },
          "t_mapping(t_address,t_struct(PoolInfo)20088_storage)": {
            "label": "mapping(address => struct PoolTokens.PoolInfo)"
          },
          "t_struct(PoolInfo)20088_storage": {
            "label": "struct PoolTokens.PoolInfo",
            "members": [
              {
                "label": "totalMinted",
                "type": "t_uint256"
              },
              {
                "label": "totalPrincipalRedeemed",
                "type": "t_uint256"
              },
              {
                "label": "created",
                "type": "t_bool"
              }
            ]
          },
          "t_bool": {
            "label": "bool"
          },
          "t_struct(Counter)3518_storage": {
            "label": "struct Counters.Counter",
            "members": [
              {
                "label": "_value",
                "type": "t_uint256"
              }
            ]
          },
          "t_array(t_uint256)49_storage": {
            "label": "uint256[49]"
          },
          "t_array(t_uint256)50_storage": {
            "label": "uint256[50]"
          },
          "t_mapping(t_address,t_struct(UintSet)4313_storage)": {
            "label": "mapping(address => struct EnumerableSet.UintSet)"
          },
          "t_struct(UintSet)4313_storage": {
            "label": "struct EnumerableSet.UintSet",
            "members": [
              {
                "label": "_inner",
                "type": "t_struct(Set)4024_storage"
              }
            ]
          },
          "t_struct(Set)4024_storage": {
            "label": "struct EnumerableSet.Set",
            "members": [
              {
                "label": "_values",
                "type": "t_array(t_bytes32)dyn_storage"
              },
              {
                "label": "_indexes",
                "type": "t_mapping(t_bytes32,t_uint256)"
              }
            ]
          },
          "t_array(t_bytes32)dyn_storage": {
            "label": "bytes32[]"
          },
          "t_bytes32": {
            "label": "bytes32"
          },
          "t_mapping(t_bytes32,t_uint256)": {
            "label": "mapping(bytes32 => uint256)"
          },
          "t_struct(UintToAddressMap)3838_storage": {
            "label": "struct EnumerableMap.UintToAddressMap",
            "members": [
              {
                "label": "_inner",
                "type": "t_struct(Map)3574_storage"
              }
            ]
          },
          "t_struct(Map)3574_storage": {
            "label": "struct EnumerableMap.Map",
            "members": [
              {
                "label": "_entries",
                "type": "t_array(t_struct(MapEntry)3566_storage)dyn_storage"
              },
              {
                "label": "_indexes",
                "type": "t_mapping(t_bytes32,t_uint256)"
              }
            ]
          },
          "t_array(t_struct(MapEntry)3566_storage)dyn_storage": {
            "label": "struct EnumerableMap.MapEntry[]"
          },
          "t_struct(MapEntry)3566_storage": {
            "label": "struct EnumerableMap.MapEntry",
            "members": [
              {
                "label": "_key",
                "type": "t_bytes32"
              },
              {
                "label": "_value",
                "type": "t_bytes32"
              }
            ]
          },
          "t_mapping(t_uint256,t_address)": {
            "label": "mapping(uint256 => address)"
          },
          "t_mapping(t_address,t_mapping(t_address,t_bool))": {
            "label": "mapping(address => mapping(address => bool))"
          },
          "t_mapping(t_address,t_bool)": {
            "label": "mapping(address => bool)"
          },
          "t_string_storage": {
            "label": "string"
          },
          "t_mapping(t_uint256,t_string_storage)": {
            "label": "mapping(uint256 => string)"
          },
          "t_array(t_uint256)41_storage": {
            "label": "uint256[41]"
          },
          "t_mapping(t_bytes4,t_bool)": {
            "label": "mapping(bytes4 => bool)"
          },
          "t_bytes4": {
            "label": "bytes4"
          },
          "t_mapping(t_bytes32,t_struct(RoleData)260_storage)": {
            "label": "mapping(bytes32 => struct AccessControlUpgradeSafe.RoleData)"
          },
          "t_struct(RoleData)260_storage": {
            "label": "struct AccessControlUpgradeSafe.RoleData",
            "members": [
              {
                "label": "members",
                "type": "t_struct(AddressSet)4204_storage"
              },
              {
                "label": "adminRole",
                "type": "t_bytes32"
              }
            ]
          },
          "t_struct(AddressSet)4204_storage": {
            "label": "struct EnumerableSet.AddressSet",
            "members": [
              {
                "label": "_inner",
                "type": "t_struct(Set)4024_storage"
              }
            ]
          }
        }
      }
    },
    "576e96714aceba3f49693bea6316615bc91fa7d4f23f0db0a47626cf18e29cc5": {
      "address": "0xf06C3aE57f4350aB1ED3752008Da4A8c358365E1",
      "txHash": "0xf6a22011ce04b03ea8d6f478b805b635544662e96b1a85be87be517138aa0c6e",
      "layout": {
        "storage": [
          {
            "contract": "Initializable",
            "label": "initialized",
            "type": "t_bool",
            "src": "@openzeppelin/contracts-ethereum-package/contracts/Initializable.sol:21"
          },
          {
            "contract": "Initializable",
            "label": "initializing",
            "type": "t_bool",
            "src": "@openzeppelin/contracts-ethereum-package/contracts/Initializable.sol:26"
          },
          {
            "contract": "Initializable",
            "label": "______gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "@openzeppelin/contracts-ethereum-package/contracts/Initializable.sol:61"
          },
          {
            "contract": "ContextUpgradeSafe",
            "label": "__gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "@openzeppelin/contracts-ethereum-package/contracts/GSN/Context.sol:37"
          },
          {
            "contract": "AccessControlUpgradeSafe",
            "label": "_roles",
            "type": "t_mapping(t_bytes32,t_struct(RoleData)260_storage)",
            "src": "@openzeppelin/contracts-ethereum-package/contracts/access/AccessControl.sol:58"
          },
          {
            "contract": "AccessControlUpgradeSafe",
            "label": "__gap",
            "type": "t_array(t_uint256)49_storage",
            "src": "@openzeppelin/contracts-ethereum-package/contracts/access/AccessControl.sol:210"
          },
          {
            "contract": "ERC165UpgradeSafe",
            "label": "_supportedInterfaces",
            "type": "t_mapping(t_bytes4,t_bool)",
            "src": "@openzeppelin/contracts-ethereum-package/contracts/introspection/ERC165.sol:21"
          },
          {
            "contract": "ERC165UpgradeSafe",
            "label": "__gap",
            "type": "t_array(t_uint256)49_storage",
            "src": "@openzeppelin/contracts-ethereum-package/contracts/introspection/ERC165.sol:63"
          },
          {
            "contract": "ERC721UpgradeSafe",
            "label": "_holderTokens",
            "type": "t_mapping(t_address,t_struct(UintSet)4313_storage)",
            "src": "@openzeppelin/contracts-ethereum-package/contracts/token/ERC721/ERC721.sol:32"
          },
          {
            "contract": "ERC721UpgradeSafe",
            "label": "_tokenOwners",
            "type": "t_struct(UintToAddressMap)3838_storage",
            "src": "@openzeppelin/contracts-ethereum-package/contracts/token/ERC721/ERC721.sol:35"
          },
          {
            "contract": "ERC721UpgradeSafe",
            "label": "_tokenApprovals",
            "type": "t_mapping(t_uint256,t_address)",
            "src": "@openzeppelin/contracts-ethereum-package/contracts/token/ERC721/ERC721.sol:38"
          },
          {
            "contract": "ERC721UpgradeSafe",
            "label": "_operatorApprovals",
            "type": "t_mapping(t_address,t_mapping(t_address,t_bool))",
            "src": "@openzeppelin/contracts-ethereum-package/contracts/token/ERC721/ERC721.sol:41"
          },
          {
            "contract": "ERC721UpgradeSafe",
            "label": "_name",
            "type": "t_string_storage",
            "src": "@openzeppelin/contracts-ethereum-package/contracts/token/ERC721/ERC721.sol:44"
          },
          {
            "contract": "ERC721UpgradeSafe",
            "label": "_symbol",
            "type": "t_string_storage",
            "src": "@openzeppelin/contracts-ethereum-package/contracts/token/ERC721/ERC721.sol:47"
          },
          {
            "contract": "ERC721UpgradeSafe",
            "label": "_tokenURIs",
            "type": "t_mapping(t_uint256,t_string_storage)",
            "src": "@openzeppelin/contracts-ethereum-package/contracts/token/ERC721/ERC721.sol:50"
          },
          {
            "contract": "ERC721UpgradeSafe",
            "label": "_baseURI",
            "type": "t_string_storage",
            "src": "@openzeppelin/contracts-ethereum-package/contracts/token/ERC721/ERC721.sol:53"
          },
          {
            "contract": "ERC721UpgradeSafe",
            "label": "__gap",
            "type": "t_array(t_uint256)41_storage",
            "src": "@openzeppelin/contracts-ethereum-package/contracts/token/ERC721/ERC721.sol:555"
          },
          {
            "contract": "PausableUpgradeSafe",
            "label": "_paused",
            "type": "t_bool",
            "src": "@openzeppelin/contracts-ethereum-package/contracts/utils/Pausable.sol:26"
          },
          {
            "contract": "PausableUpgradeSafe",
            "label": "__gap",
            "type": "t_array(t_uint256)49_storage",
            "src": "@openzeppelin/contracts-ethereum-package/contracts/utils/Pausable.sol:84"
          },
          {
            "contract": "ERC721PausableUpgradeSafe",
            "label": "__gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "@openzeppelin/contracts-ethereum-package/contracts/token/ERC721/ERC721Pausable.sol:40"
          },
          {
            "contract": "ERC721PresetMinterPauserAutoIdUpgradeSafe",
            "label": "_tokenIdTracker",
            "type": "t_struct(Counter)3518_storage",
            "src": "contracts/external/ERC721PresetMinterPauserAutoId.sol:48"
          },
          {
            "contract": "ERC721PresetMinterPauserAutoIdUpgradeSafe",
            "label": "__gap",
            "type": "t_array(t_uint256)49_storage",
            "src": "contracts/external/ERC721PresetMinterPauserAutoId.sol:86"
          },
          {
            "contract": "ReentrancyGuardUpgradeSafe",
            "label": "_notEntered",
            "type": "t_bool",
            "src": "@openzeppelin/contracts-ethereum-package/contracts/utils/ReentrancyGuard.sol:21"
          },
          {
            "contract": "ReentrancyGuardUpgradeSafe",
            "label": "__gap",
            "type": "t_array(t_uint256)49_storage",
            "src": "@openzeppelin/contracts-ethereum-package/contracts/utils/ReentrancyGuard.sol:63"
          },
          {
            "contract": "TransferRestrictedVault",
            "label": "config",
            "type": "t_contract(GoldfinchConfig)17591",
            "src": "contracts/protocol/periphery/TransferRestrictedVault.sol:28"
          },
          {
            "contract": "TransferRestrictedVault",
            "label": "poolTokenPositions",
            "type": "t_mapping(t_uint256,t_struct(PoolTokenPosition)27838_storage)",
            "src": "contracts/protocol/periphery/TransferRestrictedVault.sol:43"
          },
          {
            "contract": "TransferRestrictedVault",
            "label": "fiduPositions",
            "type": "t_mapping(t_uint256,t_struct(FiduPosition)27843_storage)",
            "src": "contracts/protocol/periphery/TransferRestrictedVault.sol:45"
          }
        ],
        "types": {
          "t_contract(GoldfinchConfig)17591": {
            "label": "contract GoldfinchConfig"
          },
          "t_mapping(t_uint256,t_struct(PoolTokenPosition)27838_storage)": {
            "label": "mapping(uint256 => struct TransferRestrictedVault.PoolTokenPosition)"
          },
          "t_uint256": {
            "label": "uint256"
          },
          "t_struct(PoolTokenPosition)27838_storage": {
            "label": "struct TransferRestrictedVault.PoolTokenPosition",
            "members": [
              {
                "label": "tokenId",
                "type": "t_uint256"
              },
              {
                "label": "lockedUntil",
                "type": "t_uint256"
              }
            ]
          },
          "t_mapping(t_uint256,t_struct(FiduPosition)27843_storage)": {
            "label": "mapping(uint256 => struct TransferRestrictedVault.FiduPosition)"
          },
          "t_struct(FiduPosition)27843_storage": {
            "label": "struct TransferRestrictedVault.FiduPosition",
            "members": [
              {
                "label": "amount",
                "type": "t_uint256"
              },
              {
                "label": "lockedUntil",
                "type": "t_uint256"
              }
            ]
          },
          "t_bool": {
            "label": "bool"
          },
          "t_array(t_uint256)49_storage": {
            "label": "uint256[49]"
          },
          "t_struct(Counter)3518_storage": {
            "label": "struct Counters.Counter",
            "members": [
              {
                "label": "_value",
                "type": "t_uint256"
              }
            ]
          },
          "t_array(t_uint256)50_storage": {
            "label": "uint256[50]"
          },
          "t_mapping(t_address,t_struct(UintSet)4313_storage)": {
            "label": "mapping(address => struct EnumerableSet.UintSet)"
          },
          "t_address": {
            "label": "address"
          },
          "t_struct(UintSet)4313_storage": {
            "label": "struct EnumerableSet.UintSet",
            "members": [
              {
                "label": "_inner",
                "type": "t_struct(Set)4024_storage"
              }
            ]
          },
          "t_struct(Set)4024_storage": {
            "label": "struct EnumerableSet.Set",
            "members": [
              {
                "label": "_values",
                "type": "t_array(t_bytes32)dyn_storage"
              },
              {
                "label": "_indexes",
                "type": "t_mapping(t_bytes32,t_uint256)"
              }
            ]
          },
          "t_array(t_bytes32)dyn_storage": {
            "label": "bytes32[]"
          },
          "t_bytes32": {
            "label": "bytes32"
          },
          "t_mapping(t_bytes32,t_uint256)": {
            "label": "mapping(bytes32 => uint256)"
          },
          "t_struct(UintToAddressMap)3838_storage": {
            "label": "struct EnumerableMap.UintToAddressMap",
            "members": [
              {
                "label": "_inner",
                "type": "t_struct(Map)3574_storage"
              }
            ]
          },
          "t_struct(Map)3574_storage": {
            "label": "struct EnumerableMap.Map",
            "members": [
              {
                "label": "_entries",
                "type": "t_array(t_struct(MapEntry)3566_storage)dyn_storage"
              },
              {
                "label": "_indexes",
                "type": "t_mapping(t_bytes32,t_uint256)"
              }
            ]
          },
          "t_array(t_struct(MapEntry)3566_storage)dyn_storage": {
            "label": "struct EnumerableMap.MapEntry[]"
          },
          "t_struct(MapEntry)3566_storage": {
            "label": "struct EnumerableMap.MapEntry",
            "members": [
              {
                "label": "_key",
                "type": "t_bytes32"
              },
              {
                "label": "_value",
                "type": "t_bytes32"
              }
            ]
          },
          "t_mapping(t_uint256,t_address)": {
            "label": "mapping(uint256 => address)"
          },
          "t_mapping(t_address,t_mapping(t_address,t_bool))": {
            "label": "mapping(address => mapping(address => bool))"
          },
          "t_mapping(t_address,t_bool)": {
            "label": "mapping(address => bool)"
          },
          "t_string_storage": {
            "label": "string"
          },
          "t_mapping(t_uint256,t_string_storage)": {
            "label": "mapping(uint256 => string)"
          },
          "t_array(t_uint256)41_storage": {
            "label": "uint256[41]"
          },
          "t_mapping(t_bytes4,t_bool)": {
            "label": "mapping(bytes4 => bool)"
          },
          "t_bytes4": {
            "label": "bytes4"
          },
          "t_mapping(t_bytes32,t_struct(RoleData)260_storage)": {
            "label": "mapping(bytes32 => struct AccessControlUpgradeSafe.RoleData)"
          },
          "t_struct(RoleData)260_storage": {
            "label": "struct AccessControlUpgradeSafe.RoleData",
            "members": [
              {
                "label": "members",
                "type": "t_struct(AddressSet)4204_storage"
              },
              {
                "label": "adminRole",
                "type": "t_bytes32"
              }
            ]
          },
          "t_struct(AddressSet)4204_storage": {
            "label": "struct EnumerableSet.AddressSet",
            "members": [
              {
                "label": "_inner",
                "type": "t_struct(Set)4024_storage"
              }
            ]
          }
        }
      }
    },
    "b2b815dc93c70a6c323d2941b6c5dbe6a27c77e90e9d7d0de21a65e4b05a4831": {
      "address": "0x332C7969C14235ce63A7B1A2a17d6bFaD9E0d454",
      "txHash": "0x45da78fd60b9cfab948101ae97fdbc348ecca82a8c1fc98b278adda5d9796d6d",
      "layout": {
        "storage": [
          {
            "contract": "Initializable",
            "label": "initialized",
            "type": "t_bool",
            "src": "@openzeppelin/contracts-ethereum-package/contracts/Initializable.sol:21"
          },
          {
            "contract": "Initializable",
            "label": "initializing",
            "type": "t_bool",
            "src": "@openzeppelin/contracts-ethereum-package/contracts/Initializable.sol:26"
          },
          {
            "contract": "Initializable",
            "label": "______gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "@openzeppelin/contracts-ethereum-package/contracts/Initializable.sol:61"
          },
          {
            "contract": "ContextUpgradeSafe",
            "label": "__gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "@openzeppelin/contracts-ethereum-package/contracts/GSN/Context.sol:37"
          },
          {
            "contract": "AccessControlUpgradeSafe",
            "label": "_roles",
            "type": "t_mapping(t_bytes32,t_struct(RoleData)260_storage)",
            "src": "@openzeppelin/contracts-ethereum-package/contracts/access/AccessControl.sol:58"
          },
          {
            "contract": "AccessControlUpgradeSafe",
            "label": "__gap",
            "type": "t_array(t_uint256)49_storage",
            "src": "@openzeppelin/contracts-ethereum-package/contracts/access/AccessControl.sol:210"
          },
          {
            "contract": "PausableUpgradeSafe",
            "label": "_paused",
            "type": "t_bool",
            "src": "@openzeppelin/contracts-ethereum-package/contracts/utils/Pausable.sol:26"
          },
          {
            "contract": "PausableUpgradeSafe",
            "label": "__gap",
            "type": "t_array(t_uint256)49_storage",
            "src": "@openzeppelin/contracts-ethereum-package/contracts/utils/Pausable.sol:84"
          },
          {
            "contract": "ReentrancyGuardUpgradeSafe",
            "label": "_notEntered",
            "type": "t_bool",
            "src": "@openzeppelin/contracts-ethereum-package/contracts/utils/ReentrancyGuard.sol:21"
          },
          {
            "contract": "ReentrancyGuardUpgradeSafe",
            "label": "__gap",
            "type": "t_array(t_uint256)49_storage",
            "src": "@openzeppelin/contracts-ethereum-package/contracts/utils/ReentrancyGuard.sol:63"
          },
          {
            "contract": "BaseUpgradeablePausable",
            "label": "__gap1",
            "type": "t_array(t_uint256)50_storage",
            "src": "contracts/protocol/core/BaseUpgradeablePausable.sol:31"
          },
          {
            "contract": "BaseUpgradeablePausable",
            "label": "__gap2",
            "type": "t_array(t_uint256)50_storage",
            "src": "contracts/protocol/core/BaseUpgradeablePausable.sol:32"
          },
          {
            "contract": "BaseUpgradeablePausable",
            "label": "__gap3",
            "type": "t_array(t_uint256)50_storage",
            "src": "contracts/protocol/core/BaseUpgradeablePausable.sol:33"
          },
          {
            "contract": "BaseUpgradeablePausable",
            "label": "__gap4",
            "type": "t_array(t_uint256)50_storage",
            "src": "contracts/protocol/core/BaseUpgradeablePausable.sol:34"
          },
          {
            "contract": "IPool",
            "label": "sharePrice",
            "type": "t_uint256",
            "src": "contracts/interfaces/IPool.sol:7"
          },
          {
            "contract": "Pool",
            "label": "config",
            "type": "t_contract(GoldfinchConfig)17591",
            "src": "contracts/protocol/core/Pool.sol:17"
          },
          {
            "contract": "Pool",
            "label": "compoundBalance",
            "type": "t_uint256",
            "src": "contracts/protocol/core/Pool.sol:20"
          }
        ],
        "types": {
          "t_contract(GoldfinchConfig)17591": {
            "label": "contract GoldfinchConfig"
          },
          "t_uint256": {
            "label": "uint256"
          },
          "t_array(t_uint256)50_storage": {
            "label": "uint256[50]"
          },
          "t_bool": {
            "label": "bool"
          },
          "t_array(t_uint256)49_storage": {
            "label": "uint256[49]"
          },
          "t_mapping(t_bytes32,t_struct(RoleData)260_storage)": {
            "label": "mapping(bytes32 => struct AccessControlUpgradeSafe.RoleData)"
          },
          "t_bytes32": {
            "label": "bytes32"
          },
          "t_struct(RoleData)260_storage": {
            "label": "struct AccessControlUpgradeSafe.RoleData",
            "members": [
              {
                "label": "members",
                "type": "t_struct(AddressSet)4204_storage"
              },
              {
                "label": "adminRole",
                "type": "t_bytes32"
              }
            ]
          },
          "t_struct(AddressSet)4204_storage": {
            "label": "struct EnumerableSet.AddressSet",
            "members": [
              {
                "label": "_inner",
                "type": "t_struct(Set)4024_storage"
              }
            ]
          },
          "t_struct(Set)4024_storage": {
            "label": "struct EnumerableSet.Set",
            "members": [
              {
                "label": "_values",
                "type": "t_array(t_bytes32)dyn_storage"
              },
              {
                "label": "_indexes",
                "type": "t_mapping(t_bytes32,t_uint256)"
              }
            ]
          },
          "t_array(t_bytes32)dyn_storage": {
            "label": "bytes32[]"
          },
          "t_mapping(t_bytes32,t_uint256)": {
            "label": "mapping(bytes32 => uint256)"
          }
        }
      }
    },
    "fa31866bf91e1a3c34a601492dd199fd7d7391f723522332016dd8397265e26f": {
      "address": "0x93233584883C86EBB266E54A65183fF02873873E",
      "txHash": "0x3c37c983fe73f2163ff74915bc10de6de2ac81e953cf278c8c3bd542f8c1cd6b",
      "layout": {
        "storage": [
          {
            "contract": "Initializable",
            "label": "initialized",
            "type": "t_bool",
            "src": "@openzeppelin/contracts-ethereum-package/contracts/Initializable.sol:21"
          },
          {
            "contract": "Initializable",
            "label": "initializing",
            "type": "t_bool",
            "src": "@openzeppelin/contracts-ethereum-package/contracts/Initializable.sol:26"
          },
          {
            "contract": "Initializable",
            "label": "______gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "@openzeppelin/contracts-ethereum-package/contracts/Initializable.sol:61"
          },
          {
            "contract": "ContextUpgradeSafe",
            "label": "__gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "@openzeppelin/contracts-ethereum-package/contracts/GSN/Context.sol:37"
          },
          {
            "contract": "AccessControlUpgradeSafe",
            "label": "_roles",
            "type": "t_mapping(t_bytes32,t_struct(RoleData)260_storage)",
            "src": "@openzeppelin/contracts-ethereum-package/contracts/access/AccessControl.sol:58"
          },
          {
            "contract": "AccessControlUpgradeSafe",
            "label": "__gap",
            "type": "t_array(t_uint256)49_storage",
            "src": "@openzeppelin/contracts-ethereum-package/contracts/access/AccessControl.sol:210"
          },
          {
            "contract": "PausableUpgradeSafe",
            "label": "_paused",
            "type": "t_bool",
            "src": "@openzeppelin/contracts-ethereum-package/contracts/utils/Pausable.sol:26"
          },
          {
            "contract": "PausableUpgradeSafe",
            "label": "__gap",
            "type": "t_array(t_uint256)49_storage",
            "src": "@openzeppelin/contracts-ethereum-package/contracts/utils/Pausable.sol:84"
          },
          {
            "contract": "ReentrancyGuardUpgradeSafe",
            "label": "_notEntered",
            "type": "t_bool",
            "src": "@openzeppelin/contracts-ethereum-package/contracts/utils/ReentrancyGuard.sol:21"
          },
          {
            "contract": "ReentrancyGuardUpgradeSafe",
            "label": "__gap",
            "type": "t_array(t_uint256)49_storage",
            "src": "@openzeppelin/contracts-ethereum-package/contracts/utils/ReentrancyGuard.sol:63"
          },
          {
            "contract": "BaseUpgradeablePausable",
            "label": "__gap1",
            "type": "t_array(t_uint256)50_storage",
            "src": "contracts/protocol/core/BaseUpgradeablePausable.sol:31"
          },
          {
            "contract": "BaseUpgradeablePausable",
            "label": "__gap2",
            "type": "t_array(t_uint256)50_storage",
            "src": "contracts/protocol/core/BaseUpgradeablePausable.sol:32"
          },
          {
            "contract": "BaseUpgradeablePausable",
            "label": "__gap3",
            "type": "t_array(t_uint256)50_storage",
            "src": "contracts/protocol/core/BaseUpgradeablePausable.sol:33"
          },
          {
            "contract": "BaseUpgradeablePausable",
            "label": "__gap4",
            "type": "t_array(t_uint256)50_storage",
            "src": "contracts/protocol/core/BaseUpgradeablePausable.sol:34"
          },
          {
            "contract": "ICreditDesk",
            "label": "totalWritedowns",
            "type": "t_uint256",
            "src": "contracts/interfaces/ICreditDesk.sol:7"
          },
          {
            "contract": "ICreditDesk",
            "label": "totalLoansOutstanding",
            "type": "t_uint256",
            "src": "contracts/interfaces/ICreditDesk.sol:8"
          },
          {
            "contract": "CreditDesk",
            "label": "config",
            "type": "t_contract(GoldfinchConfig)17591",
            "src": "contracts/protocol/core/CreditDesk.sol:23"
          },
          {
            "contract": "CreditDesk",
            "label": "underwriters",
            "type": "t_mapping(t_address,t_struct(Underwriter)13028_storage)",
            "src": "contracts/protocol/core/CreditDesk.sol:47"
          },
          {
            "contract": "CreditDesk",
            "label": "borrowers",
            "type": "t_mapping(t_address,t_struct(Borrower)13032_storage)",
            "src": "contracts/protocol/core/CreditDesk.sol:48"
          },
          {
            "contract": "CreditDesk",
            "label": "creditLines",
            "type": "t_mapping(t_address,t_address)",
            "src": "contracts/protocol/core/CreditDesk.sol:49"
          }
        ],
        "types": {
          "t_contract(GoldfinchConfig)17591": {
            "label": "contract GoldfinchConfig"
          },
          "t_mapping(t_address,t_struct(Underwriter)13028_storage)": {
            "label": "mapping(address => struct CreditDesk.Underwriter)"
          },
          "t_address": {
            "label": "address"
          },
          "t_struct(Underwriter)13028_storage": {
            "label": "struct CreditDesk.Underwriter",
            "members": [
              {
                "label": "governanceLimit",
                "type": "t_uint256"
              },
              {
                "label": "creditLines",
                "type": "t_array(t_address)dyn_storage"
              }
            ]
          },
          "t_uint256": {
            "label": "uint256"
          },
          "t_array(t_address)dyn_storage": {
            "label": "address[]"
          },
          "t_mapping(t_address,t_struct(Borrower)13032_storage)": {
            "label": "mapping(address => struct CreditDesk.Borrower)"
          },
          "t_struct(Borrower)13032_storage": {
            "label": "struct CreditDesk.Borrower",
            "members": [
              {
                "label": "creditLines",
                "type": "t_array(t_address)dyn_storage"
              }
            ]
          },
          "t_mapping(t_address,t_address)": {
            "label": "mapping(address => address)"
          },
          "t_array(t_uint256)50_storage": {
            "label": "uint256[50]"
          },
          "t_bool": {
            "label": "bool"
          },
          "t_array(t_uint256)49_storage": {
            "label": "uint256[49]"
          },
          "t_mapping(t_bytes32,t_struct(RoleData)260_storage)": {
            "label": "mapping(bytes32 => struct AccessControlUpgradeSafe.RoleData)"
          },
          "t_bytes32": {
            "label": "bytes32"
          },
          "t_struct(RoleData)260_storage": {
            "label": "struct AccessControlUpgradeSafe.RoleData",
            "members": [
              {
                "label": "members",
                "type": "t_struct(AddressSet)4204_storage"
              },
              {
                "label": "adminRole",
                "type": "t_bytes32"
              }
            ]
          },
          "t_struct(AddressSet)4204_storage": {
            "label": "struct EnumerableSet.AddressSet",
            "members": [
              {
                "label": "_inner",
                "type": "t_struct(Set)4024_storage"
              }
            ]
          },
          "t_struct(Set)4024_storage": {
            "label": "struct EnumerableSet.Set",
            "members": [
              {
                "label": "_values",
                "type": "t_array(t_bytes32)dyn_storage"
              },
              {
                "label": "_indexes",
                "type": "t_mapping(t_bytes32,t_uint256)"
              }
            ]
          },
          "t_array(t_bytes32)dyn_storage": {
            "label": "bytes32[]"
          },
          "t_mapping(t_bytes32,t_uint256)": {
            "label": "mapping(bytes32 => uint256)"
          }
        }
      }
    },
    "03e3a070cb5fe64810fa68ece55080726b122d46e433a217b1b1d886c60f8fd2": {
      "address": "0x3f38dfDF95569969600dAB3140e901580528fF11",
      "txHash": "0x4e45e85a8c680549e5cfb0a30eb6bb78d1f0b4d1e4cb0bebdb4732512171c35c",
      "layout": {
        "storage": [
          {
            "contract": "Initializable",
            "label": "initialized",
            "type": "t_bool",
            "src": "@openzeppelin/contracts-ethereum-package/contracts/Initializable.sol:21"
          },
          {
            "contract": "Initializable",
            "label": "initializing",
            "type": "t_bool",
            "src": "@openzeppelin/contracts-ethereum-package/contracts/Initializable.sol:26"
          },
          {
            "contract": "Initializable",
            "label": "______gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "@openzeppelin/contracts-ethereum-package/contracts/Initializable.sol:61"
          },
          {
            "contract": "ContextUpgradeSafe",
            "label": "__gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "@openzeppelin/contracts-ethereum-package/contracts/GSN/Context.sol:37"
          },
          {
            "contract": "AccessControlUpgradeSafe",
            "label": "_roles",
            "type": "t_mapping(t_bytes32,t_struct(RoleData)260_storage)",
            "src": "@openzeppelin/contracts-ethereum-package/contracts/access/AccessControl.sol:58"
          },
          {
            "contract": "AccessControlUpgradeSafe",
            "label": "__gap",
            "type": "t_array(t_uint256)49_storage",
            "src": "@openzeppelin/contracts-ethereum-package/contracts/access/AccessControl.sol:210"
          },
          {
            "contract": "PausableUpgradeSafe",
            "label": "_paused",
            "type": "t_bool",
            "src": "@openzeppelin/contracts-ethereum-package/contracts/utils/Pausable.sol:26"
          },
          {
            "contract": "PausableUpgradeSafe",
            "label": "__gap",
            "type": "t_array(t_uint256)49_storage",
            "src": "@openzeppelin/contracts-ethereum-package/contracts/utils/Pausable.sol:84"
          },
          {
            "contract": "ReentrancyGuardUpgradeSafe",
            "label": "_notEntered",
            "type": "t_bool",
            "src": "@openzeppelin/contracts-ethereum-package/contracts/utils/ReentrancyGuard.sol:21"
          },
          {
            "contract": "ReentrancyGuardUpgradeSafe",
            "label": "__gap",
            "type": "t_array(t_uint256)49_storage",
            "src": "@openzeppelin/contracts-ethereum-package/contracts/utils/ReentrancyGuard.sol:63"
          },
          {
            "contract": "BaseUpgradeablePausable",
            "label": "__gap1",
            "type": "t_array(t_uint256)50_storage",
            "src": "contracts/protocol/core/BaseUpgradeablePausable.sol:31"
          },
          {
            "contract": "BaseUpgradeablePausable",
            "label": "__gap2",
            "type": "t_array(t_uint256)50_storage",
            "src": "contracts/protocol/core/BaseUpgradeablePausable.sol:32"
          },
          {
            "contract": "BaseUpgradeablePausable",
            "label": "__gap3",
            "type": "t_array(t_uint256)50_storage",
            "src": "contracts/protocol/core/BaseUpgradeablePausable.sol:33"
          },
          {
            "contract": "BaseUpgradeablePausable",
            "label": "__gap4",
            "type": "t_array(t_uint256)50_storage",
            "src": "contracts/protocol/core/BaseUpgradeablePausable.sol:34"
          },
          {
            "contract": "ISeniorPool",
            "label": "sharePrice",
            "type": "t_uint256",
            "src": "contracts/interfaces/ISeniorPool.sol:9"
          },
          {
            "contract": "ISeniorPool",
            "label": "totalLoansOutstanding",
            "type": "t_uint256",
            "src": "contracts/interfaces/ISeniorPool.sol:10"
          },
          {
            "contract": "ISeniorPool",
            "label": "totalWritedowns",
            "type": "t_uint256",
            "src": "contracts/interfaces/ISeniorPool.sol:11"
          },
          {
            "contract": "SeniorPool",
            "label": "config",
            "type": "t_contract(GoldfinchConfig)17591",
            "src": "contracts/protocol/core/SeniorPool.sol:22"
          },
          {
            "contract": "SeniorPool",
            "label": "compoundBalance",
            "type": "t_uint256",
            "src": "contracts/protocol/core/SeniorPool.sol:28"
          },
          {
            "contract": "SeniorPool",
            "label": "writedowns",
            "type": "t_mapping(t_contract(ITranchedPool)10674,t_uint256)",
            "src": "contracts/protocol/core/SeniorPool.sol:29"
          }
        ],
        "types": {
          "t_contract(GoldfinchConfig)17591": {
            "label": "contract GoldfinchConfig"
          },
          "t_uint256": {
            "label": "uint256"
          },
          "t_mapping(t_contract(ITranchedPool)10674,t_uint256)": {
            "label": "mapping(contract ITranchedPool => uint256)"
          },
          "t_contract(ITranchedPool)10674": {
            "label": "contract ITranchedPool"
          },
          "t_array(t_uint256)50_storage": {
            "label": "uint256[50]"
          },
          "t_bool": {
            "label": "bool"
          },
          "t_array(t_uint256)49_storage": {
            "label": "uint256[49]"
          },
          "t_mapping(t_bytes32,t_struct(RoleData)260_storage)": {
            "label": "mapping(bytes32 => struct AccessControlUpgradeSafe.RoleData)"
          },
          "t_bytes32": {
            "label": "bytes32"
          },
          "t_struct(RoleData)260_storage": {
            "label": "struct AccessControlUpgradeSafe.RoleData",
            "members": [
              {
                "label": "members",
                "type": "t_struct(AddressSet)4204_storage"
              },
              {
                "label": "adminRole",
                "type": "t_bytes32"
              }
            ]
          },
          "t_struct(AddressSet)4204_storage": {
            "label": "struct EnumerableSet.AddressSet",
            "members": [
              {
                "label": "_inner",
                "type": "t_struct(Set)4024_storage"
              }
            ]
          },
          "t_struct(Set)4024_storage": {
            "label": "struct EnumerableSet.Set",
            "members": [
              {
                "label": "_values",
                "type": "t_array(t_bytes32)dyn_storage"
              },
              {
                "label": "_indexes",
                "type": "t_mapping(t_bytes32,t_uint256)"
              }
            ]
          },
          "t_array(t_bytes32)dyn_storage": {
            "label": "bytes32[]"
          },
          "t_mapping(t_bytes32,t_uint256)": {
            "label": "mapping(bytes32 => uint256)"
          }
        }
      }
    },
    "2a132555a31f8d77526933591abc33e530407f40bb2e0e93bc53f57685ea1b7c": {
      "address": "0x80783A25E901A214E05B272C46153a426dF92f2B",
      "txHash": "0xa474a21bff6ea68418321168e2be86ff72fbc5368afe749ede2df594ed8b59f7",
      "layout": {
        "storage": [
          {
            "contract": "Initializable",
            "label": "initialized",
            "type": "t_bool",
            "src": "@openzeppelin/contracts-ethereum-package/contracts/Initializable.sol:21"
          },
          {
            "contract": "Initializable",
            "label": "initializing",
            "type": "t_bool",
            "src": "@openzeppelin/contracts-ethereum-package/contracts/Initializable.sol:26"
          },
          {
            "contract": "Initializable",
            "label": "______gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "@openzeppelin/contracts-ethereum-package/contracts/Initializable.sol:61"
          },
          {
            "contract": "ContextUpgradeSafe",
            "label": "__gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "@openzeppelin/contracts-ethereum-package/contracts/GSN/Context.sol:37"
          },
          {
            "contract": "AccessControlUpgradeSafe",
            "label": "_roles",
            "type": "t_mapping(t_bytes32,t_struct(RoleData)260_storage)",
            "src": "@openzeppelin/contracts-ethereum-package/contracts/access/AccessControl.sol:58"
          },
          {
            "contract": "AccessControlUpgradeSafe",
            "label": "__gap",
            "type": "t_array(t_uint256)49_storage",
            "src": "@openzeppelin/contracts-ethereum-package/contracts/access/AccessControl.sol:210"
          },
          {
            "contract": "PausableUpgradeSafe",
            "label": "_paused",
            "type": "t_bool",
            "src": "@openzeppelin/contracts-ethereum-package/contracts/utils/Pausable.sol:26"
          },
          {
            "contract": "PausableUpgradeSafe",
            "label": "__gap",
            "type": "t_array(t_uint256)49_storage",
            "src": "@openzeppelin/contracts-ethereum-package/contracts/utils/Pausable.sol:84"
          },
          {
            "contract": "ReentrancyGuardUpgradeSafe",
            "label": "_notEntered",
            "type": "t_bool",
            "src": "@openzeppelin/contracts-ethereum-package/contracts/utils/ReentrancyGuard.sol:21"
          },
          {
            "contract": "ReentrancyGuardUpgradeSafe",
            "label": "__gap",
            "type": "t_array(t_uint256)49_storage",
            "src": "@openzeppelin/contracts-ethereum-package/contracts/utils/ReentrancyGuard.sol:63"
          },
          {
            "contract": "BaseUpgradeablePausable",
            "label": "__gap1",
            "type": "t_array(t_uint256)50_storage",
            "src": "contracts/protocol/core/BaseUpgradeablePausable.sol:31"
          },
          {
            "contract": "BaseUpgradeablePausable",
            "label": "__gap2",
            "type": "t_array(t_uint256)50_storage",
            "src": "contracts/protocol/core/BaseUpgradeablePausable.sol:32"
          },
          {
            "contract": "BaseUpgradeablePausable",
            "label": "__gap3",
            "type": "t_array(t_uint256)50_storage",
            "src": "contracts/protocol/core/BaseUpgradeablePausable.sol:33"
          },
          {
            "contract": "BaseUpgradeablePausable",
            "label": "__gap4",
            "type": "t_array(t_uint256)50_storage",
            "src": "contracts/protocol/core/BaseUpgradeablePausable.sol:34"
          },
          {
            "contract": "GoldfinchFactory",
            "label": "config",
            "type": "t_contract(GoldfinchConfig)17591",
            "src": "contracts/protocol/core/GoldfinchFactory.sol:20"
          }
        ],
        "types": {
          "t_contract(GoldfinchConfig)17591": {
            "label": "contract GoldfinchConfig"
          },
          "t_array(t_uint256)50_storage": {
            "label": "uint256[50]"
          },
          "t_uint256": {
            "label": "uint256"
          },
          "t_bool": {
            "label": "bool"
          },
          "t_array(t_uint256)49_storage": {
            "label": "uint256[49]"
          },
          "t_mapping(t_bytes32,t_struct(RoleData)260_storage)": {
            "label": "mapping(bytes32 => struct AccessControlUpgradeSafe.RoleData)"
          },
          "t_bytes32": {
            "label": "bytes32"
          },
          "t_struct(RoleData)260_storage": {
            "label": "struct AccessControlUpgradeSafe.RoleData",
            "members": [
              {
                "label": "members",
                "type": "t_struct(AddressSet)4204_storage"
              },
              {
                "label": "adminRole",
                "type": "t_bytes32"
              }
            ]
          },
          "t_struct(AddressSet)4204_storage": {
            "label": "struct EnumerableSet.AddressSet",
            "members": [
              {
                "label": "_inner",
                "type": "t_struct(Set)4024_storage"
              }
            ]
          },
          "t_struct(Set)4024_storage": {
            "label": "struct EnumerableSet.Set",
            "members": [
              {
                "label": "_values",
                "type": "t_array(t_bytes32)dyn_storage"
              },
              {
                "label": "_indexes",
                "type": "t_mapping(t_bytes32,t_uint256)"
              }
            ]
          },
          "t_array(t_bytes32)dyn_storage": {
            "label": "bytes32[]"
          },
          "t_mapping(t_bytes32,t_uint256)": {
            "label": "mapping(bytes32 => uint256)"
          }
        }
      }
    },
    "0b2fe474811748d6a77a1dc203b70f1d340ffdcff2c0957379e2e510e97d68ce": {
      "address": "0x7AbbBCE31978cffd573F8c0aB0453c90211907f4",
      "txHash": "0x8bd25cecee3aa9d518e485fe958298464dfb9f71405e6e9ed5de1c2fee9c4c52",
      "layout": {
        "storage": [
          {
            "contract": "Initializable",
            "label": "initialized",
            "type": "t_bool",
            "src": "@openzeppelin/contracts-ethereum-package/contracts/Initializable.sol:21"
          },
          {
            "contract": "Initializable",
            "label": "initializing",
            "type": "t_bool",
            "src": "@openzeppelin/contracts-ethereum-package/contracts/Initializable.sol:26"
          },
          {
            "contract": "Initializable",
            "label": "______gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "@openzeppelin/contracts-ethereum-package/contracts/Initializable.sol:61"
          },
          {
            "contract": "ContextUpgradeSafe",
            "label": "__gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "@openzeppelin/contracts-ethereum-package/contracts/GSN/Context.sol:37"
          },
          {
            "contract": "AccessControlUpgradeSafe",
            "label": "_roles",
            "type": "t_mapping(t_bytes32,t_struct(RoleData)260_storage)",
            "src": "@openzeppelin/contracts-ethereum-package/contracts/access/AccessControl.sol:58"
          },
          {
            "contract": "AccessControlUpgradeSafe",
            "label": "__gap",
            "type": "t_array(t_uint256)49_storage",
            "src": "@openzeppelin/contracts-ethereum-package/contracts/access/AccessControl.sol:210"
          },
          {
            "contract": "ERC165UpgradeSafe",
            "label": "_supportedInterfaces",
            "type": "t_mapping(t_bytes4,t_bool)",
            "src": "@openzeppelin/contracts-ethereum-package/contracts/introspection/ERC165.sol:21"
          },
          {
            "contract": "ERC165UpgradeSafe",
            "label": "__gap",
            "type": "t_array(t_uint256)49_storage",
            "src": "@openzeppelin/contracts-ethereum-package/contracts/introspection/ERC165.sol:63"
          },
          {
            "contract": "ERC721UpgradeSafe",
            "label": "_holderTokens",
            "type": "t_mapping(t_address,t_struct(UintSet)4313_storage)",
            "src": "@openzeppelin/contracts-ethereum-package/contracts/token/ERC721/ERC721.sol:32"
          },
          {
            "contract": "ERC721UpgradeSafe",
            "label": "_tokenOwners",
            "type": "t_struct(UintToAddressMap)3838_storage",
            "src": "@openzeppelin/contracts-ethereum-package/contracts/token/ERC721/ERC721.sol:35"
          },
          {
            "contract": "ERC721UpgradeSafe",
            "label": "_tokenApprovals",
            "type": "t_mapping(t_uint256,t_address)",
            "src": "@openzeppelin/contracts-ethereum-package/contracts/token/ERC721/ERC721.sol:38"
          },
          {
            "contract": "ERC721UpgradeSafe",
            "label": "_operatorApprovals",
            "type": "t_mapping(t_address,t_mapping(t_address,t_bool))",
            "src": "@openzeppelin/contracts-ethereum-package/contracts/token/ERC721/ERC721.sol:41"
          },
          {
            "contract": "ERC721UpgradeSafe",
            "label": "_name",
            "type": "t_string_storage",
            "src": "@openzeppelin/contracts-ethereum-package/contracts/token/ERC721/ERC721.sol:44"
          },
          {
            "contract": "ERC721UpgradeSafe",
            "label": "_symbol",
            "type": "t_string_storage",
            "src": "@openzeppelin/contracts-ethereum-package/contracts/token/ERC721/ERC721.sol:47"
          },
          {
            "contract": "ERC721UpgradeSafe",
            "label": "_tokenURIs",
            "type": "t_mapping(t_uint256,t_string_storage)",
            "src": "@openzeppelin/contracts-ethereum-package/contracts/token/ERC721/ERC721.sol:50"
          },
          {
            "contract": "ERC721UpgradeSafe",
            "label": "_baseURI",
            "type": "t_string_storage",
            "src": "@openzeppelin/contracts-ethereum-package/contracts/token/ERC721/ERC721.sol:53"
          },
          {
            "contract": "ERC721UpgradeSafe",
            "label": "__gap",
            "type": "t_array(t_uint256)41_storage",
            "src": "@openzeppelin/contracts-ethereum-package/contracts/token/ERC721/ERC721.sol:555"
          },
          {
            "contract": "PausableUpgradeSafe",
            "label": "_paused",
            "type": "t_bool",
            "src": "@openzeppelin/contracts-ethereum-package/contracts/utils/Pausable.sol:26"
          },
          {
            "contract": "PausableUpgradeSafe",
            "label": "__gap",
            "type": "t_array(t_uint256)49_storage",
            "src": "@openzeppelin/contracts-ethereum-package/contracts/utils/Pausable.sol:84"
          },
          {
            "contract": "ERC721PausableUpgradeSafe",
            "label": "__gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "@openzeppelin/contracts-ethereum-package/contracts/token/ERC721/ERC721Pausable.sol:40"
          },
          {
            "contract": "ERC721PresetMinterPauserAutoIdUpgradeSafe",
            "label": "_tokenIdTracker",
            "type": "t_struct(Counter)3518_storage",
            "src": "contracts/external/ERC721PresetMinterPauserAutoId.sol:48"
          },
          {
            "contract": "ERC721PresetMinterPauserAutoIdUpgradeSafe",
            "label": "__gap",
            "type": "t_array(t_uint256)49_storage",
            "src": "contracts/external/ERC721PresetMinterPauserAutoId.sol:86"
          },
          {
            "contract": "ReentrancyGuardUpgradeSafe",
            "label": "_notEntered",
            "type": "t_bool",
            "src": "@openzeppelin/contracts-ethereum-package/contracts/utils/ReentrancyGuard.sol:21"
          },
          {
            "contract": "ReentrancyGuardUpgradeSafe",
            "label": "__gap",
            "type": "t_array(t_uint256)49_storage",
            "src": "@openzeppelin/contracts-ethereum-package/contracts/utils/ReentrancyGuard.sol:63"
          },
          {
            "contract": "StakingRewards",
            "label": "config",
            "type": "t_contract(GoldfinchConfig)17591",
            "src": "contracts/rewards/StakingRewards.sol:87"
          },
          {
            "contract": "StakingRewards",
            "label": "lastUpdateTime",
            "type": "t_uint256",
            "src": "contracts/rewards/StakingRewards.sol:90"
          },
          {
            "contract": "StakingRewards",
            "label": "accumulatedRewardsPerToken",
            "type": "t_uint256",
            "src": "contracts/rewards/StakingRewards.sol:93"
          },
          {
            "contract": "StakingRewards",
            "label": "rewardsAvailable",
            "type": "t_uint256",
            "src": "contracts/rewards/StakingRewards.sol:96"
          },
          {
            "contract": "StakingRewards",
            "label": "positionToAccumulatedRewardsPerToken",
            "type": "t_mapping(t_uint256,t_uint256)",
            "src": "contracts/rewards/StakingRewards.sol:99"
          },
          {
            "contract": "StakingRewards",
            "label": "targetCapacity",
            "type": "t_uint256",
            "src": "contracts/rewards/StakingRewards.sol:103"
          },
          {
            "contract": "StakingRewards",
            "label": "minRate",
            "type": "t_uint256",
            "src": "contracts/rewards/StakingRewards.sol:106"
          },
          {
            "contract": "StakingRewards",
            "label": "maxRate",
            "type": "t_uint256",
            "src": "contracts/rewards/StakingRewards.sol:109"
          },
          {
            "contract": "StakingRewards",
            "label": "maxRateAtPercent",
            "type": "t_uint256",
            "src": "contracts/rewards/StakingRewards.sol:113"
          },
          {
            "contract": "StakingRewards",
            "label": "minRateAtPercent",
            "type": "t_uint256",
            "src": "contracts/rewards/StakingRewards.sol:117"
          },
          {
            "contract": "StakingRewards",
            "label": "vestingLength",
            "type": "t_uint256",
            "src": "contracts/rewards/StakingRewards.sol:120"
          },
          {
            "contract": "StakingRewards",
            "label": "totalStakedSupply",
            "type": "t_uint256",
            "src": "contracts/rewards/StakingRewards.sol:128"
          },
          {
            "contract": "StakingRewards",
            "label": "totalLeveragedStakedSupply",
            "type": "t_uint256",
            "src": "contracts/rewards/StakingRewards.sol:131"
          },
          {
            "contract": "StakingRewards",
            "label": "leverageMultipliers",
            "type": "t_mapping(t_enum(LockupPeriod)32547,t_uint256)",
            "src": "contracts/rewards/StakingRewards.sol:134"
          },
          {
            "contract": "StakingRewards",
            "label": "positions",
            "type": "t_mapping(t_uint256,t_struct(StakedPosition)32565_storage)",
            "src": "contracts/rewards/StakingRewards.sol:137"
          },
          {
            "contract": "StakingRewards",
            "label": "effectiveMultipliers",
            "type": "t_mapping(t_enum(StakedPositionType)32550,t_uint256)",
            "src": "contracts/rewards/StakingRewards.sol:141"
          }
        ],
        "types": {
          "t_contract(GoldfinchConfig)17591": {
            "label": "contract GoldfinchConfig"
          },
          "t_uint256": {
            "label": "uint256"
          },
          "t_mapping(t_uint256,t_uint256)": {
            "label": "mapping(uint256 => uint256)"
          },
          "t_mapping(t_enum(LockupPeriod)32547,t_uint256)": {
            "label": "mapping(enum StakingRewards.LockupPeriod => uint256)"
          },
          "t_enum(LockupPeriod)32547": {
            "label": "enum StakingRewards.LockupPeriod",
            "members": [
              "SixMonths",
              "TwelveMonths",
              "TwentyFourMonths"
            ]
          },
          "t_mapping(t_uint256,t_struct(StakedPosition)32565_storage)": {
            "label": "mapping(uint256 => struct StakingRewards.StakedPosition)"
          },
          "t_struct(StakedPosition)32565_storage": {
            "label": "struct StakingRewards.StakedPosition",
            "members": [
              {
                "label": "amount",
                "type": "t_uint256"
              },
              {
                "label": "rewards",
                "type": "t_struct(Rewards)11256_storage"
              },
              {
                "label": "leverageMultiplier",
                "type": "t_uint256"
              },
              {
                "label": "lockedUntil",
                "type": "t_uint256"
              },
              {
                "label": "positionType",
                "type": "t_enum(StakedPositionType)32550"
              },
              {
                "label": "unsafeEffectiveMultiplier",
                "type": "t_uint256"
              },
              {
                "label": "unsafeBaseTokenExchangeRate",
                "type": "t_uint256"
              }
            ]
          },
          "t_struct(Rewards)11256_storage": {
            "label": "struct StakingRewardsVesting.Rewards",
            "members": [
              {
                "label": "totalUnvested",
                "type": "t_uint256"
              },
              {
                "label": "totalVested",
                "type": "t_uint256"
              },
              {
                "label": "totalPreviouslyVested",
                "type": "t_uint256"
              },
              {
                "label": "totalClaimed",
                "type": "t_uint256"
              },
              {
                "label": "startTime",
                "type": "t_uint256"
              },
              {
                "label": "endTime",
                "type": "t_uint256"
              }
            ]
          },
          "t_enum(StakedPositionType)32550": {
            "label": "enum StakingRewards.StakedPositionType",
            "members": [
              "Fidu",
              "CurveLP"
            ]
          },
          "t_mapping(t_enum(StakedPositionType)32550,t_uint256)": {
            "label": "mapping(enum StakingRewards.StakedPositionType => uint256)"
          },
          "t_bool": {
            "label": "bool"
          },
          "t_array(t_uint256)49_storage": {
            "label": "uint256[49]"
          },
          "t_struct(Counter)3518_storage": {
            "label": "struct Counters.Counter",
            "members": [
              {
                "label": "_value",
                "type": "t_uint256"
              }
            ]
          },
          "t_array(t_uint256)50_storage": {
            "label": "uint256[50]"
          },
          "t_mapping(t_address,t_struct(UintSet)4313_storage)": {
            "label": "mapping(address => struct EnumerableSet.UintSet)"
          },
          "t_address": {
            "label": "address"
          },
          "t_struct(UintSet)4313_storage": {
            "label": "struct EnumerableSet.UintSet",
            "members": [
              {
                "label": "_inner",
                "type": "t_struct(Set)4024_storage"
              }
            ]
          },
          "t_struct(Set)4024_storage": {
            "label": "struct EnumerableSet.Set",
            "members": [
              {
                "label": "_values",
                "type": "t_array(t_bytes32)dyn_storage"
              },
              {
                "label": "_indexes",
                "type": "t_mapping(t_bytes32,t_uint256)"
              }
            ]
          },
          "t_array(t_bytes32)dyn_storage": {
            "label": "bytes32[]"
          },
          "t_bytes32": {
            "label": "bytes32"
          },
          "t_mapping(t_bytes32,t_uint256)": {
            "label": "mapping(bytes32 => uint256)"
          },
          "t_struct(UintToAddressMap)3838_storage": {
            "label": "struct EnumerableMap.UintToAddressMap",
            "members": [
              {
                "label": "_inner",
                "type": "t_struct(Map)3574_storage"
              }
            ]
          },
          "t_struct(Map)3574_storage": {
            "label": "struct EnumerableMap.Map",
            "members": [
              {
                "label": "_entries",
                "type": "t_array(t_struct(MapEntry)3566_storage)dyn_storage"
              },
              {
                "label": "_indexes",
                "type": "t_mapping(t_bytes32,t_uint256)"
              }
            ]
          },
          "t_array(t_struct(MapEntry)3566_storage)dyn_storage": {
            "label": "struct EnumerableMap.MapEntry[]"
          },
          "t_struct(MapEntry)3566_storage": {
            "label": "struct EnumerableMap.MapEntry",
            "members": [
              {
                "label": "_key",
                "type": "t_bytes32"
              },
              {
                "label": "_value",
                "type": "t_bytes32"
              }
            ]
          },
          "t_mapping(t_uint256,t_address)": {
            "label": "mapping(uint256 => address)"
          },
          "t_mapping(t_address,t_mapping(t_address,t_bool))": {
            "label": "mapping(address => mapping(address => bool))"
          },
          "t_mapping(t_address,t_bool)": {
            "label": "mapping(address => bool)"
          },
          "t_string_storage": {
            "label": "string"
          },
          "t_mapping(t_uint256,t_string_storage)": {
            "label": "mapping(uint256 => string)"
          },
          "t_array(t_uint256)41_storage": {
            "label": "uint256[41]"
          },
          "t_mapping(t_bytes4,t_bool)": {
            "label": "mapping(bytes4 => bool)"
          },
          "t_bytes4": {
            "label": "bytes4"
          },
          "t_mapping(t_bytes32,t_struct(RoleData)260_storage)": {
            "label": "mapping(bytes32 => struct AccessControlUpgradeSafe.RoleData)"
          },
          "t_struct(RoleData)260_storage": {
            "label": "struct AccessControlUpgradeSafe.RoleData",
            "members": [
              {
                "label": "members",
                "type": "t_struct(AddressSet)4204_storage"
              },
              {
                "label": "adminRole",
                "type": "t_bytes32"
              }
            ]
          },
          "t_struct(AddressSet)4204_storage": {
            "label": "struct EnumerableSet.AddressSet",
            "members": [
              {
                "label": "_inner",
                "type": "t_struct(Set)4024_storage"
              }
            ]
          }
        }
      }
    },
    "d57f23e97608988f68b0180cd473f276f1d55a804a264b24d7ac06562d3ab346": {
      "address": "0xCbfA1f7f7a59c1580e7744d997761214522485f4",
      "txHash": "0x0d7cc6d3390f358d991c391f66ea25d1a746bcc01bcf2df0155a81ecf0ce8d37",
      "layout": {
        "storage": [
          {
            "contract": "Initializable",
            "label": "initialized",
            "type": "t_bool",
            "src": "@openzeppelin/contracts-ethereum-package/contracts/Initializable.sol:21"
          },
          {
            "contract": "Initializable",
            "label": "initializing",
            "type": "t_bool",
            "src": "@openzeppelin/contracts-ethereum-package/contracts/Initializable.sol:26"
          },
          {
            "contract": "Initializable",
            "label": "______gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "@openzeppelin/contracts-ethereum-package/contracts/Initializable.sol:61"
          },
          {
            "contract": "ContextUpgradeSafe",
            "label": "__gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "@openzeppelin/contracts-ethereum-package/contracts/GSN/Context.sol:37"
          },
          {
            "contract": "AccessControlUpgradeSafe",
            "label": "_roles",
            "type": "t_mapping(t_bytes32,t_struct(RoleData)260_storage)",
            "src": "@openzeppelin/contracts-ethereum-package/contracts/access/AccessControl.sol:58"
          },
          {
            "contract": "AccessControlUpgradeSafe",
            "label": "__gap",
            "type": "t_array(t_uint256)49_storage",
            "src": "@openzeppelin/contracts-ethereum-package/contracts/access/AccessControl.sol:210"
          },
          {
            "contract": "ERC165UpgradeSafe",
            "label": "_supportedInterfaces",
            "type": "t_mapping(t_bytes4,t_bool)",
            "src": "@openzeppelin/contracts-ethereum-package/contracts/introspection/ERC165.sol:21"
          },
          {
            "contract": "ERC165UpgradeSafe",
            "label": "__gap",
            "type": "t_array(t_uint256)49_storage",
            "src": "@openzeppelin/contracts-ethereum-package/contracts/introspection/ERC165.sol:63"
          },
          {
            "contract": "ERC721UpgradeSafe",
            "label": "_holderTokens",
            "type": "t_mapping(t_address,t_struct(UintSet)4313_storage)",
            "src": "@openzeppelin/contracts-ethereum-package/contracts/token/ERC721/ERC721.sol:32"
          },
          {
            "contract": "ERC721UpgradeSafe",
            "label": "_tokenOwners",
            "type": "t_struct(UintToAddressMap)3838_storage",
            "src": "@openzeppelin/contracts-ethereum-package/contracts/token/ERC721/ERC721.sol:35"
          },
          {
            "contract": "ERC721UpgradeSafe",
            "label": "_tokenApprovals",
            "type": "t_mapping(t_uint256,t_address)",
            "src": "@openzeppelin/contracts-ethereum-package/contracts/token/ERC721/ERC721.sol:38"
          },
          {
            "contract": "ERC721UpgradeSafe",
            "label": "_operatorApprovals",
            "type": "t_mapping(t_address,t_mapping(t_address,t_bool))",
            "src": "@openzeppelin/contracts-ethereum-package/contracts/token/ERC721/ERC721.sol:41"
          },
          {
            "contract": "ERC721UpgradeSafe",
            "label": "_name",
            "type": "t_string_storage",
            "src": "@openzeppelin/contracts-ethereum-package/contracts/token/ERC721/ERC721.sol:44"
          },
          {
            "contract": "ERC721UpgradeSafe",
            "label": "_symbol",
            "type": "t_string_storage",
            "src": "@openzeppelin/contracts-ethereum-package/contracts/token/ERC721/ERC721.sol:47"
          },
          {
            "contract": "ERC721UpgradeSafe",
            "label": "_tokenURIs",
            "type": "t_mapping(t_uint256,t_string_storage)",
            "src": "@openzeppelin/contracts-ethereum-package/contracts/token/ERC721/ERC721.sol:50"
          },
          {
            "contract": "ERC721UpgradeSafe",
            "label": "_baseURI",
            "type": "t_string_storage",
            "src": "@openzeppelin/contracts-ethereum-package/contracts/token/ERC721/ERC721.sol:53"
          },
          {
            "contract": "ERC721UpgradeSafe",
            "label": "__gap",
            "type": "t_array(t_uint256)41_storage",
            "src": "@openzeppelin/contracts-ethereum-package/contracts/token/ERC721/ERC721.sol:555"
          },
          {
            "contract": "PausableUpgradeSafe",
            "label": "_paused",
            "type": "t_bool",
            "src": "@openzeppelin/contracts-ethereum-package/contracts/utils/Pausable.sol:26"
          },
          {
            "contract": "PausableUpgradeSafe",
            "label": "__gap",
            "type": "t_array(t_uint256)49_storage",
            "src": "@openzeppelin/contracts-ethereum-package/contracts/utils/Pausable.sol:84"
          },
          {
            "contract": "ERC721PausableUpgradeSafe",
            "label": "__gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "@openzeppelin/contracts-ethereum-package/contracts/token/ERC721/ERC721Pausable.sol:40"
          },
          {
            "contract": "ERC721PresetMinterPauserAutoIdUpgradeSafe",
            "label": "_tokenIdTracker",
            "type": "t_struct(Counter)3518_storage",
            "src": "contracts/external/ERC721PresetMinterPauserAutoId.sol:48"
          },
          {
            "contract": "ERC721PresetMinterPauserAutoIdUpgradeSafe",
            "label": "__gap",
            "type": "t_array(t_uint256)49_storage",
            "src": "contracts/external/ERC721PresetMinterPauserAutoId.sol:86"
          },
          {
            "contract": "ReentrancyGuardUpgradeSafe",
            "label": "_notEntered",
            "type": "t_bool",
            "src": "@openzeppelin/contracts-ethereum-package/contracts/utils/ReentrancyGuard.sol:21"
          },
          {
            "contract": "ReentrancyGuardUpgradeSafe",
            "label": "__gap",
            "type": "t_array(t_uint256)49_storage",
            "src": "@openzeppelin/contracts-ethereum-package/contracts/utils/ReentrancyGuard.sol:63"
          },
          {
            "contract": "CommunityRewards",
            "label": "config",
            "type": "t_contract(GoldfinchConfig)17591",
            "src": "contracts/rewards/CommunityRewards.sol:33"
          },
          {
            "contract": "CommunityRewards",
            "label": "rewardsAvailable",
            "type": "t_uint256",
            "src": "contracts/rewards/CommunityRewards.sol:36"
          },
          {
            "contract": "CommunityRewards",
            "label": "tokenLaunchTimeInSeconds",
            "type": "t_uint256",
            "src": "contracts/rewards/CommunityRewards.sol:39"
          },
          {
            "contract": "CommunityRewards",
            "label": "grants",
            "type": "t_mapping(t_uint256,t_struct(Rewards)10882_storage)",
            "src": "contracts/rewards/CommunityRewards.sol:42"
          }
        ],
        "types": {
          "t_contract(GoldfinchConfig)17591": {
            "label": "contract GoldfinchConfig"
          },
          "t_uint256": {
            "label": "uint256"
          },
          "t_mapping(t_uint256,t_struct(Rewards)10882_storage)": {
            "label": "mapping(uint256 => struct CommunityRewardsVesting.Rewards)"
          },
          "t_struct(Rewards)10882_storage": {
            "label": "struct CommunityRewardsVesting.Rewards",
            "members": [
              {
                "label": "totalGranted",
                "type": "t_uint256"
              },
              {
                "label": "totalClaimed",
                "type": "t_uint256"
              },
              {
                "label": "startTime",
                "type": "t_uint256"
              },
              {
                "label": "endTime",
                "type": "t_uint256"
              },
              {
                "label": "cliffLength",
                "type": "t_uint256"
              },
              {
                "label": "vestingInterval",
                "type": "t_uint256"
              },
              {
                "label": "revokedAt",
                "type": "t_uint256"
              }
            ]
          },
          "t_bool": {
            "label": "bool"
          },
          "t_array(t_uint256)49_storage": {
            "label": "uint256[49]"
          },
          "t_struct(Counter)3518_storage": {
            "label": "struct Counters.Counter",
            "members": [
              {
                "label": "_value",
                "type": "t_uint256"
              }
            ]
          },
          "t_array(t_uint256)50_storage": {
            "label": "uint256[50]"
          },
          "t_mapping(t_address,t_struct(UintSet)4313_storage)": {
            "label": "mapping(address => struct EnumerableSet.UintSet)"
          },
          "t_address": {
            "label": "address"
          },
          "t_struct(UintSet)4313_storage": {
            "label": "struct EnumerableSet.UintSet",
            "members": [
              {
                "label": "_inner",
                "type": "t_struct(Set)4024_storage"
              }
            ]
          },
          "t_struct(Set)4024_storage": {
            "label": "struct EnumerableSet.Set",
            "members": [
              {
                "label": "_values",
                "type": "t_array(t_bytes32)dyn_storage"
              },
              {
                "label": "_indexes",
                "type": "t_mapping(t_bytes32,t_uint256)"
              }
            ]
          },
          "t_array(t_bytes32)dyn_storage": {
            "label": "bytes32[]"
          },
          "t_bytes32": {
            "label": "bytes32"
          },
          "t_mapping(t_bytes32,t_uint256)": {
            "label": "mapping(bytes32 => uint256)"
          },
          "t_struct(UintToAddressMap)3838_storage": {
            "label": "struct EnumerableMap.UintToAddressMap",
            "members": [
              {
                "label": "_inner",
                "type": "t_struct(Map)3574_storage"
              }
            ]
          },
          "t_struct(Map)3574_storage": {
            "label": "struct EnumerableMap.Map",
            "members": [
              {
                "label": "_entries",
                "type": "t_array(t_struct(MapEntry)3566_storage)dyn_storage"
              },
              {
                "label": "_indexes",
                "type": "t_mapping(t_bytes32,t_uint256)"
              }
            ]
          },
          "t_array(t_struct(MapEntry)3566_storage)dyn_storage": {
            "label": "struct EnumerableMap.MapEntry[]"
          },
          "t_struct(MapEntry)3566_storage": {
            "label": "struct EnumerableMap.MapEntry",
            "members": [
              {
                "label": "_key",
                "type": "t_bytes32"
              },
              {
                "label": "_value",
                "type": "t_bytes32"
              }
            ]
          },
          "t_mapping(t_uint256,t_address)": {
            "label": "mapping(uint256 => address)"
          },
          "t_mapping(t_address,t_mapping(t_address,t_bool))": {
            "label": "mapping(address => mapping(address => bool))"
          },
          "t_mapping(t_address,t_bool)": {
            "label": "mapping(address => bool)"
          },
          "t_string_storage": {
            "label": "string"
          },
          "t_mapping(t_uint256,t_string_storage)": {
            "label": "mapping(uint256 => string)"
          },
          "t_array(t_uint256)41_storage": {
            "label": "uint256[41]"
          },
          "t_mapping(t_bytes4,t_bool)": {
            "label": "mapping(bytes4 => bool)"
          },
          "t_bytes4": {
            "label": "bytes4"
          },
          "t_mapping(t_bytes32,t_struct(RoleData)260_storage)": {
            "label": "mapping(bytes32 => struct AccessControlUpgradeSafe.RoleData)"
          },
          "t_struct(RoleData)260_storage": {
            "label": "struct AccessControlUpgradeSafe.RoleData",
            "members": [
              {
                "label": "members",
                "type": "t_struct(AddressSet)4204_storage"
              },
              {
                "label": "adminRole",
                "type": "t_bytes32"
              }
            ]
          },
          "t_struct(AddressSet)4204_storage": {
            "label": "struct EnumerableSet.AddressSet",
            "members": [
              {
                "label": "_inner",
                "type": "t_struct(Set)4024_storage"
              }
            ]
          }
        }
      }
    },
    "5c0e1824808aec6e4f16ff9ed8f3086c7fc9b7e7e192f39197e9ca2b63e57380": {
      "address": "0x84c54Af614B3c179325a76Bb8232f2B9CD857f6b",
      "txHash": "0xc5d05c0dbcc95448f2d3470fbd191afc32d4e008da1cd90c2fc057dd5b3fdbf8",
      "layout": {
        "storage": [
          {
            "contract": "Initializable",
            "label": "initialized",
            "type": "t_bool",
            "src": "@openzeppelin/contracts-ethereum-package/contracts/Initializable.sol:21"
          },
          {
            "contract": "Initializable",
            "label": "initializing",
            "type": "t_bool",
            "src": "@openzeppelin/contracts-ethereum-package/contracts/Initializable.sol:26"
          },
          {
            "contract": "Initializable",
            "label": "______gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "@openzeppelin/contracts-ethereum-package/contracts/Initializable.sol:61"
          },
          {
            "contract": "ContextUpgradeSafe",
            "label": "__gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "@openzeppelin/contracts-ethereum-package/contracts/GSN/Context.sol:37"
          },
          {
            "contract": "AccessControlUpgradeSafe",
            "label": "_roles",
            "type": "t_mapping(t_bytes32,t_struct(RoleData)260_storage)",
            "src": "@openzeppelin/contracts-ethereum-package/contracts/access/AccessControl.sol:58"
          },
          {
            "contract": "AccessControlUpgradeSafe",
            "label": "__gap",
            "type": "t_array(t_uint256)49_storage",
            "src": "@openzeppelin/contracts-ethereum-package/contracts/access/AccessControl.sol:210"
          },
          {
            "contract": "PausableUpgradeSafe",
            "label": "_paused",
            "type": "t_bool",
            "src": "@openzeppelin/contracts-ethereum-package/contracts/utils/Pausable.sol:26"
          },
          {
            "contract": "PausableUpgradeSafe",
            "label": "__gap",
            "type": "t_array(t_uint256)49_storage",
            "src": "@openzeppelin/contracts-ethereum-package/contracts/utils/Pausable.sol:84"
          },
          {
            "contract": "ReentrancyGuardUpgradeSafe",
            "label": "_notEntered",
            "type": "t_bool",
            "src": "@openzeppelin/contracts-ethereum-package/contracts/utils/ReentrancyGuard.sol:21"
          },
          {
            "contract": "ReentrancyGuardUpgradeSafe",
            "label": "__gap",
            "type": "t_array(t_uint256)49_storage",
            "src": "@openzeppelin/contracts-ethereum-package/contracts/utils/ReentrancyGuard.sol:63"
          },
          {
            "contract": "BaseUpgradeablePausable",
            "label": "__gap1",
            "type": "t_array(t_uint256)50_storage",
            "src": "contracts/protocol/core/BaseUpgradeablePausable.sol:31"
          },
          {
            "contract": "BaseUpgradeablePausable",
            "label": "__gap2",
            "type": "t_array(t_uint256)50_storage",
            "src": "contracts/protocol/core/BaseUpgradeablePausable.sol:32"
          },
          {
            "contract": "BaseUpgradeablePausable",
            "label": "__gap3",
            "type": "t_array(t_uint256)50_storage",
            "src": "contracts/protocol/core/BaseUpgradeablePausable.sol:33"
          },
          {
            "contract": "BaseUpgradeablePausable",
            "label": "__gap4",
            "type": "t_array(t_uint256)50_storage",
            "src": "contracts/protocol/core/BaseUpgradeablePausable.sol:34"
          },
          {
            "contract": "MerkleDirectDistributor",
            "label": "gfi",
            "type": "t_address",
            "src": "contracts/rewards/MerkleDirectDistributor.sol:15"
          },
          {
            "contract": "MerkleDirectDistributor",
            "label": "merkleRoot",
            "type": "t_bytes32",
            "src": "contracts/rewards/MerkleDirectDistributor.sol:16"
          },
          {
            "contract": "MerkleDirectDistributor",
            "label": "acceptedBitMap",
            "type": "t_mapping(t_uint256,t_uint256)",
            "src": "contracts/rewards/MerkleDirectDistributor.sol:19"
          }
        ],
        "types": {
          "t_address": {
            "label": "address"
          },
          "t_bytes32": {
            "label": "bytes32"
          },
          "t_mapping(t_uint256,t_uint256)": {
            "label": "mapping(uint256 => uint256)"
          },
          "t_uint256": {
            "label": "uint256"
          },
          "t_array(t_uint256)50_storage": {
            "label": "uint256[50]"
          },
          "t_bool": {
            "label": "bool"
          },
          "t_array(t_uint256)49_storage": {
            "label": "uint256[49]"
          },
          "t_mapping(t_bytes32,t_struct(RoleData)260_storage)": {
            "label": "mapping(bytes32 => struct AccessControlUpgradeSafe.RoleData)"
          },
          "t_struct(RoleData)260_storage": {
            "label": "struct AccessControlUpgradeSafe.RoleData",
            "members": [
              {
                "label": "members",
                "type": "t_struct(AddressSet)4204_storage"
              },
              {
                "label": "adminRole",
                "type": "t_bytes32"
              }
            ]
          },
          "t_struct(AddressSet)4204_storage": {
            "label": "struct EnumerableSet.AddressSet",
            "members": [
              {
                "label": "_inner",
                "type": "t_struct(Set)4024_storage"
              }
            ]
          },
          "t_struct(Set)4024_storage": {
            "label": "struct EnumerableSet.Set",
            "members": [
              {
                "label": "_values",
                "type": "t_array(t_bytes32)dyn_storage"
              },
              {
                "label": "_indexes",
                "type": "t_mapping(t_bytes32,t_uint256)"
              }
            ]
          },
          "t_array(t_bytes32)dyn_storage": {
            "label": "bytes32[]"
          },
          "t_mapping(t_bytes32,t_uint256)": {
            "label": "mapping(bytes32 => uint256)"
          }
        }
      }
    },
    "a5477a5839e6b7e5ea32c3e4448678bd1e0abb689b48ae84d2e9de4dc6df1510": {
      "address": "0x4503Ba424e992137feD95079B99C82C5Ed236286",
      "txHash": "0x54ebd844d40ad95d3c3b3c9d963b1290198b3f0726d8f38d5d969032556493b2",
      "layout": {
        "storage": [
          {
            "contract": "Initializable",
            "label": "_initialized",
            "type": "t_bool",
            "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:21"
          },
          {
            "contract": "Initializable",
            "label": "_initializing",
            "type": "t_bool",
            "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:26"
          },
          {
            "contract": "ContextUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:30"
          },
          {
            "contract": "ERC165Upgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "@openzeppelin/contracts-upgradeable/utils/introspection/ERC165Upgradeable.sol:35"
          },
          {
            "contract": "AccessControlUpgradeable",
            "label": "_roles",
            "type": "t_mapping(t_bytes32,t_struct(RoleData)253_storage)",
            "src": "@openzeppelin/contracts-upgradeable/access/AccessControlUpgradeable.sol:63"
          },
          {
            "contract": "AccessControlUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)49_storage",
            "src": "@openzeppelin/contracts-upgradeable/access/AccessControlUpgradeable.sol:219"
          },
          {
            "contract": "AccessControlEnumerableUpgradeable",
            "label": "_roleMembers",
            "type": "t_mapping(t_bytes32,t_struct(AddressSet)3395_storage)",
            "src": "@openzeppelin/contracts-upgradeable/access/AccessControlEnumerableUpgradeable.sol:25"
          },
          {
            "contract": "AccessControlEnumerableUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)49_storage",
            "src": "@openzeppelin/contracts-upgradeable/access/AccessControlEnumerableUpgradeable.sol:89"
          },
          {
            "contract": "ERC1155Upgradeable",
            "label": "_balances",
            "type": "t_mapping(t_uint256,t_mapping(t_address,t_uint256))",
            "src": "@openzeppelin/contracts-upgradeable/token/ERC1155/ERC1155Upgradeable.sol:24"
          },
          {
            "contract": "ERC1155Upgradeable",
            "label": "_operatorApprovals",
            "type": "t_mapping(t_address,t_mapping(t_address,t_bool))",
            "src": "@openzeppelin/contracts-upgradeable/token/ERC1155/ERC1155Upgradeable.sol:27"
          },
          {
            "contract": "ERC1155Upgradeable",
            "label": "_uri",
            "type": "t_string_storage",
            "src": "@openzeppelin/contracts-upgradeable/token/ERC1155/ERC1155Upgradeable.sol:30"
          },
          {
            "contract": "ERC1155Upgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)47_storage",
            "src": "@openzeppelin/contracts-upgradeable/token/ERC1155/ERC1155Upgradeable.sol:458"
          },
          {
            "contract": "PausableUpgradeable",
            "label": "_paused",
            "type": "t_bool",
            "src": "@openzeppelin/contracts-upgradeable/security/PausableUpgradeable.sol:28"
          },
          {
            "contract": "PausableUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)49_storage",
            "src": "@openzeppelin/contracts-upgradeable/security/PausableUpgradeable.sol:96"
          },
          {
            "contract": "ERC1155PausableUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "@openzeppelin/contracts-upgradeable/token/ERC1155/extensions/ERC1155PausableUpgradeable.sol:47"
          },
          {
            "contract": "ERC1155PresetPauserUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "contracts/external/ERC1155PresetPauserUpgradeable.sol:113"
          },
          {
            "contract": "UniqueIdentity",
            "label": "nonces",
            "type": "t_mapping(t_address,t_uint256)",
            "src": "contracts/protocol/core/UniqueIdentity.sol:35"
          },
          {
            "contract": "UniqueIdentity",
            "label": "supportedUIDTypes",
            "type": "t_mapping(t_uint256,t_bool)",
            "src": "contracts/protocol/core/UniqueIdentity.sol:36"
          }
        ],
        "types": {
          "t_mapping(t_address,t_uint256)": {
            "label": "mapping(address => uint256)"
          },
          "t_address": {
            "label": "address"
          },
          "t_uint256": {
            "label": "uint256"
          },
          "t_mapping(t_uint256,t_bool)": {
            "label": "mapping(uint256 => bool)"
          },
          "t_bool": {
            "label": "bool"
          },
          "t_array(t_uint256)50_storage": {
            "label": "uint256[50]"
          },
          "t_array(t_uint256)49_storage": {
            "label": "uint256[49]"
          },
          "t_mapping(t_uint256,t_mapping(t_address,t_uint256))": {
            "label": "mapping(uint256 => mapping(address => uint256))"
          },
          "t_mapping(t_address,t_mapping(t_address,t_bool))": {
            "label": "mapping(address => mapping(address => bool))"
          },
          "t_mapping(t_address,t_bool)": {
            "label": "mapping(address => bool)"
          },
          "t_string_storage": {
            "label": "string"
          },
          "t_array(t_uint256)47_storage": {
            "label": "uint256[47]"
          },
          "t_mapping(t_bytes32,t_struct(AddressSet)3395_storage)": {
            "label": "mapping(bytes32 => struct EnumerableSetUpgradeable.AddressSet)"
          },
          "t_bytes32": {
            "label": "bytes32"
          },
          "t_struct(AddressSet)3395_storage": {
            "label": "struct EnumerableSetUpgradeable.AddressSet",
            "members": [
              {
                "label": "_inner",
                "type": "t_struct(Set)3094_storage"
              }
            ]
          },
          "t_struct(Set)3094_storage": {
            "label": "struct EnumerableSetUpgradeable.Set",
            "members": [
              {
                "label": "_values",
                "type": "t_array(t_bytes32)dyn_storage"
              },
              {
                "label": "_indexes",
                "type": "t_mapping(t_bytes32,t_uint256)"
              }
            ]
          },
          "t_array(t_bytes32)dyn_storage": {
            "label": "bytes32[]"
          },
          "t_mapping(t_bytes32,t_uint256)": {
            "label": "mapping(bytes32 => uint256)"
          },
          "t_mapping(t_bytes32,t_struct(RoleData)253_storage)": {
            "label": "mapping(bytes32 => struct AccessControlUpgradeable.RoleData)"
          },
          "t_struct(RoleData)253_storage": {
            "label": "struct AccessControlUpgradeable.RoleData",
            "members": [
              {
                "label": "members",
                "type": "t_mapping(t_address,t_bool)"
              },
              {
                "label": "adminRole",
                "type": "t_bytes32"
              }
            ]
          }
        }
      }
    },
    "68d43777ded85e394a5949485264cf31b27d24d744d9c4048ff5f5bb2c9ccb42": {
      "address": "0xDa2F28a3a9318CFE3951d5DE9E3C83Ff1Ec5A945",
      "txHash": "0xc5fbf34680d9afc55fd101f6c4c7102627747e62974e8c76844a9f2aa63ca275",
      "layout": {
        "storage": [
          {
            "contract": "Initializable",
            "label": "initialized",
            "type": "t_bool",
            "src": "@openzeppelin/contracts-ethereum-package/contracts/Initializable.sol:21"
          },
          {
            "contract": "Initializable",
            "label": "initializing",
            "type": "t_bool",
            "src": "@openzeppelin/contracts-ethereum-package/contracts/Initializable.sol:26"
          },
          {
            "contract": "Initializable",
            "label": "______gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "@openzeppelin/contracts-ethereum-package/contracts/Initializable.sol:61"
          },
          {
            "contract": "ContextUpgradeSafe",
            "label": "__gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "@openzeppelin/contracts-ethereum-package/contracts/GSN/Context.sol:37"
          },
          {
            "contract": "AccessControlUpgradeSafe",
            "label": "_roles",
            "type": "t_mapping(t_bytes32,t_struct(RoleData)260_storage)",
            "src": "@openzeppelin/contracts-ethereum-package/contracts/access/AccessControl.sol:58"
          },
          {
            "contract": "AccessControlUpgradeSafe",
            "label": "__gap",
            "type": "t_array(t_uint256)49_storage",
            "src": "@openzeppelin/contracts-ethereum-package/contracts/access/AccessControl.sol:210"
          },
          {
            "contract": "PausableUpgradeSafe",
            "label": "_paused",
            "type": "t_bool",
            "src": "@openzeppelin/contracts-ethereum-package/contracts/utils/Pausable.sol:26"
          },
          {
            "contract": "PausableUpgradeSafe",
            "label": "__gap",
            "type": "t_array(t_uint256)49_storage",
            "src": "@openzeppelin/contracts-ethereum-package/contracts/utils/Pausable.sol:84"
          },
          {
            "contract": "ReentrancyGuardUpgradeSafe",
            "label": "_notEntered",
            "type": "t_bool",
            "src": "@openzeppelin/contracts-ethereum-package/contracts/utils/ReentrancyGuard.sol:21"
          },
          {
            "contract": "ReentrancyGuardUpgradeSafe",
            "label": "__gap",
            "type": "t_array(t_uint256)49_storage",
            "src": "@openzeppelin/contracts-ethereum-package/contracts/utils/ReentrancyGuard.sol:63"
          },
          {
            "contract": "BaseUpgradeablePausable",
            "label": "__gap1",
            "type": "t_array(t_uint256)50_storage",
            "src": "contracts/protocol/core/BaseUpgradeablePausable.sol:31"
          },
          {
            "contract": "BaseUpgradeablePausable",
            "label": "__gap2",
            "type": "t_array(t_uint256)50_storage",
            "src": "contracts/protocol/core/BaseUpgradeablePausable.sol:32"
          },
          {
            "contract": "BaseUpgradeablePausable",
            "label": "__gap3",
            "type": "t_array(t_uint256)50_storage",
            "src": "contracts/protocol/core/BaseUpgradeablePausable.sol:33"
          },
          {
            "contract": "BaseUpgradeablePausable",
            "label": "__gap4",
            "type": "t_array(t_uint256)50_storage",
            "src": "contracts/protocol/core/BaseUpgradeablePausable.sol:34"
          },
          {
            "contract": "Go",
            "label": "uniqueIdentity",
            "type": "t_address",
            "src": "contracts/protocol/core/Go.sol:16"
          },
          {
            "contract": "Go",
            "label": "config",
            "type": "t_contract(GoldfinchConfig)17591",
            "src": "contracts/protocol/core/Go.sol:20"
          },
          {
            "contract": "Go",
            "label": "legacyGoList",
            "type": "t_contract(GoldfinchConfig)17591",
            "src": "contracts/protocol/core/Go.sol:23"
          },
          {
            "contract": "Go",
            "label": "allIdTypes",
            "type": "t_array(t_uint256)11_storage",
            "src": "contracts/protocol/core/Go.sol:24"
          }
        ],
        "types": {
          "t_address": {
            "label": "address"
          },
          "t_contract(GoldfinchConfig)17591": {
            "label": "contract GoldfinchConfig"
          },
          "t_array(t_uint256)11_storage": {
            "label": "uint256[11]"
          },
          "t_uint256": {
            "label": "uint256"
          },
          "t_array(t_uint256)50_storage": {
            "label": "uint256[50]"
          },
          "t_bool": {
            "label": "bool"
          },
          "t_array(t_uint256)49_storage": {
            "label": "uint256[49]"
          },
          "t_mapping(t_bytes32,t_struct(RoleData)260_storage)": {
            "label": "mapping(bytes32 => struct AccessControlUpgradeSafe.RoleData)"
          },
          "t_bytes32": {
            "label": "bytes32"
          },
          "t_struct(RoleData)260_storage": {
            "label": "struct AccessControlUpgradeSafe.RoleData",
            "members": [
              {
                "label": "members",
                "type": "t_struct(AddressSet)4204_storage"
              },
              {
                "label": "adminRole",
                "type": "t_bytes32"
              }
            ]
          },
          "t_struct(AddressSet)4204_storage": {
            "label": "struct EnumerableSet.AddressSet",
            "members": [
              {
                "label": "_inner",
                "type": "t_struct(Set)4024_storage"
              }
            ]
          },
          "t_struct(Set)4024_storage": {
            "label": "struct EnumerableSet.Set",
            "members": [
              {
                "label": "_values",
                "type": "t_array(t_bytes32)dyn_storage"
              },
              {
                "label": "_indexes",
                "type": "t_mapping(t_bytes32,t_uint256)"
              }
            ]
          },
          "t_array(t_bytes32)dyn_storage": {
            "label": "bytes32[]"
          },
          "t_mapping(t_bytes32,t_uint256)": {
            "label": "mapping(bytes32 => uint256)"
          }
        }
      }
    },
    "af0ea0a45900b8be8be2a88ad38012b8d35616a91c13e0a725a8019cc54eccff": {
      "address": "0xcd5cDb133c285711D7F398E16054954899A0936e",
      "txHash": "0x878bbfe52e8bb800fe5a8179fd8384ca4c73aa824f40196611326f0bf35f759d",
      "layout": {
        "storage": [
          {
            "contract": "Initializable",
            "label": "initialized",
            "type": "t_bool",
            "src": "@openzeppelin/contracts-ethereum-package/contracts/Initializable.sol:21"
          },
          {
            "contract": "Initializable",
            "label": "initializing",
            "type": "t_bool",
            "src": "@openzeppelin/contracts-ethereum-package/contracts/Initializable.sol:26"
          },
          {
            "contract": "Initializable",
            "label": "______gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "@openzeppelin/contracts-ethereum-package/contracts/Initializable.sol:61"
          },
          {
            "contract": "ContextUpgradeSafe",
            "label": "__gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "@openzeppelin/contracts-ethereum-package/contracts/GSN/Context.sol:37"
          },
          {
            "contract": "AccessControlUpgradeSafe",
            "label": "_roles",
            "type": "t_mapping(t_bytes32,t_struct(RoleData)260_storage)",
            "src": "@openzeppelin/contracts-ethereum-package/contracts/access/AccessControl.sol:58"
          },
          {
            "contract": "AccessControlUpgradeSafe",
            "label": "__gap",
            "type": "t_array(t_uint256)49_storage",
            "src": "@openzeppelin/contracts-ethereum-package/contracts/access/AccessControl.sol:210"
          },
          {
            "contract": "PausableUpgradeSafe",
            "label": "_paused",
            "type": "t_bool",
            "src": "@openzeppelin/contracts-ethereum-package/contracts/utils/Pausable.sol:26"
          },
          {
            "contract": "PausableUpgradeSafe",
            "label": "__gap",
            "type": "t_array(t_uint256)49_storage",
            "src": "@openzeppelin/contracts-ethereum-package/contracts/utils/Pausable.sol:84"
          },
          {
            "contract": "ReentrancyGuardUpgradeSafe",
            "label": "_notEntered",
            "type": "t_bool",
            "src": "@openzeppelin/contracts-ethereum-package/contracts/utils/ReentrancyGuard.sol:21"
          },
          {
            "contract": "ReentrancyGuardUpgradeSafe",
            "label": "__gap",
            "type": "t_array(t_uint256)49_storage",
            "src": "@openzeppelin/contracts-ethereum-package/contracts/utils/ReentrancyGuard.sol:63"
          },
          {
            "contract": "BaseUpgradeablePausable",
            "label": "__gap1",
            "type": "t_array(t_uint256)50_storage",
            "src": "contracts/protocol/core/BaseUpgradeablePausable.sol:31"
          },
          {
            "contract": "BaseUpgradeablePausable",
            "label": "__gap2",
            "type": "t_array(t_uint256)50_storage",
            "src": "contracts/protocol/core/BaseUpgradeablePausable.sol:32"
          },
          {
            "contract": "BaseUpgradeablePausable",
            "label": "__gap3",
            "type": "t_array(t_uint256)50_storage",
            "src": "contracts/protocol/core/BaseUpgradeablePausable.sol:33"
          },
          {
            "contract": "BaseUpgradeablePausable",
            "label": "__gap4",
            "type": "t_array(t_uint256)50_storage",
            "src": "contracts/protocol/core/BaseUpgradeablePausable.sol:34"
          },
          {
            "contract": "BackerRewards",
            "label": "config",
            "type": "t_contract(GoldfinchConfig)17591",
            "src": "contracts/rewards/BackerRewards.sol:35"
          },
          {
            "contract": "BackerRewards",
            "label": "totalRewards",
            "type": "t_uint256",
            "src": "contracts/rewards/BackerRewards.sol:109"
          },
          {
            "contract": "BackerRewards",
            "label": "maxInterestDollarsEligible",
            "type": "t_uint256",
            "src": "contracts/rewards/BackerRewards.sol:112"
          },
          {
            "contract": "BackerRewards",
            "label": "totalInterestReceived",
            "type": "t_uint256",
            "src": "contracts/rewards/BackerRewards.sol:115"
          },
          {
            "contract": "BackerRewards",
            "label": "totalRewardPercentOfTotalGFI",
            "type": "t_uint256",
            "src": "contracts/rewards/BackerRewards.sol:118"
          },
          {
            "contract": "BackerRewards",
            "label": "tokens",
            "type": "t_mapping(t_uint256,t_struct(BackerRewardsTokenInfo)29401_storage)",
            "src": "contracts/rewards/BackerRewards.sol:121"
          },
          {
            "contract": "BackerRewards",
            "label": "pools",
            "type": "t_mapping(t_address,t_struct(BackerRewardsInfo)29396_storage)",
            "src": "contracts/rewards/BackerRewards.sol:124"
          },
          {
            "contract": "BackerRewards",
            "label": "poolStakingRewards",
            "type": "t_mapping(t_contract(ITranchedPool)10674,t_struct(StakingRewardsPoolInfo)29409_storage)",
            "src": "contracts/rewards/BackerRewards.sol:127"
          },
          {
            "contract": "BackerRewards",
            "label": "tokenStakingRewards",
            "type": "t_mapping(t_uint256,t_struct(StakingRewardsTokenInfo)29423_storage)",
            "src": "contracts/rewards/BackerRewards.sol:130"
          }
        ],
        "types": {
          "t_contract(GoldfinchConfig)17591": {
            "label": "contract GoldfinchConfig"
          },
          "t_uint256": {
            "label": "uint256"
          },
          "t_mapping(t_uint256,t_struct(BackerRewardsTokenInfo)29401_storage)": {
            "label": "mapping(uint256 => struct BackerRewards.BackerRewardsTokenInfo)"
          },
          "t_struct(BackerRewardsTokenInfo)29401_storage": {
            "label": "struct BackerRewards.BackerRewardsTokenInfo",
            "members": [
              {
                "label": "rewardsClaimed",
                "type": "t_uint256"
              },
              {
                "label": "accRewardsPerPrincipalDollarAtMint",
                "type": "t_uint256"
              }
            ]
          },
          "t_mapping(t_address,t_struct(BackerRewardsInfo)29396_storage)": {
            "label": "mapping(address => struct BackerRewards.BackerRewardsInfo)"
          },
          "t_address": {
            "label": "address"
          },
          "t_struct(BackerRewardsInfo)29396_storage": {
            "label": "struct BackerRewards.BackerRewardsInfo",
            "members": [
              {
                "label": "accRewardsPerPrincipalDollar",
                "type": "t_uint256"
              }
            ]
          },
          "t_mapping(t_contract(ITranchedPool)10674,t_struct(StakingRewardsPoolInfo)29409_storage)": {
            "label": "mapping(contract ITranchedPool => struct BackerRewards.StakingRewardsPoolInfo)"
          },
          "t_contract(ITranchedPool)10674": {
            "label": "contract ITranchedPool"
          },
          "t_struct(StakingRewardsPoolInfo)29409_storage": {
            "label": "struct BackerRewards.StakingRewardsPoolInfo",
            "members": [
              {
                "label": "accumulatedRewardsPerTokenAtLastCheckpoint",
                "type": "t_uint256"
              },
              {
                "label": "lastUpdateTime",
                "type": "t_uint256"
              },
              {
                "label": "slicesInfo",
                "type": "t_array(t_struct(StakingRewardsSliceInfo)29420_storage)dyn_storage"
              }
            ]
          },
          "t_array(t_struct(StakingRewardsSliceInfo)29420_storage)dyn_storage": {
            "label": "struct BackerRewards.StakingRewardsSliceInfo[]"
          },
          "t_struct(StakingRewardsSliceInfo)29420_storage": {
            "label": "struct BackerRewards.StakingRewardsSliceInfo",
            "members": [
              {
                "label": "fiduSharePriceAtDrawdown",
                "type": "t_uint256"
              },
              {
                "label": "principalDeployedAtLastCheckpoint",
                "type": "t_uint256"
              },
              {
                "label": "accumulatedRewardsPerTokenAtDrawdown",
                "type": "t_uint256"
              },
              {
                "label": "accumulatedRewardsPerTokenAtLastCheckpoint",
                "type": "t_uint256"
              },
              {
                "label": "unrealizedAccumulatedRewardsPerTokenAtLastCheckpoint",
                "type": "t_uint256"
              }
            ]
          },
          "t_mapping(t_uint256,t_struct(StakingRewardsTokenInfo)29423_storage)": {
            "label": "mapping(uint256 => struct BackerRewards.StakingRewardsTokenInfo)"
          },
          "t_struct(StakingRewardsTokenInfo)29423_storage": {
            "label": "struct BackerRewards.StakingRewardsTokenInfo",
            "members": [
              {
                "label": "accumulatedRewardsPerTokenAtLastWithdraw",
                "type": "t_uint256"
              }
            ]
          },
          "t_array(t_uint256)50_storage": {
            "label": "uint256[50]"
          },
          "t_bool": {
            "label": "bool"
          },
          "t_array(t_uint256)49_storage": {
            "label": "uint256[49]"
          },
          "t_mapping(t_bytes32,t_struct(RoleData)260_storage)": {
            "label": "mapping(bytes32 => struct AccessControlUpgradeSafe.RoleData)"
          },
          "t_bytes32": {
            "label": "bytes32"
          },
          "t_struct(RoleData)260_storage": {
            "label": "struct AccessControlUpgradeSafe.RoleData",
            "members": [
              {
                "label": "members",
                "type": "t_struct(AddressSet)4204_storage"
              },
              {
                "label": "adminRole",
                "type": "t_bytes32"
              }
            ]
          },
          "t_struct(AddressSet)4204_storage": {
            "label": "struct EnumerableSet.AddressSet",
            "members": [
              {
                "label": "_inner",
                "type": "t_struct(Set)4024_storage"
              }
            ]
          },
          "t_struct(Set)4024_storage": {
            "label": "struct EnumerableSet.Set",
            "members": [
              {
                "label": "_values",
                "type": "t_array(t_bytes32)dyn_storage"
              },
              {
                "label": "_indexes",
                "type": "t_mapping(t_bytes32,t_uint256)"
              }
            ]
          },
          "t_array(t_bytes32)dyn_storage": {
            "label": "bytes32[]"
          },
          "t_mapping(t_bytes32,t_uint256)": {
            "label": "mapping(bytes32 => uint256)"
          }
        }
      }
    },
    "77bb60df5464b6ddc6ed1b8f105fc37478238795643b4f4b081c894e53f04516": {
      "address": "0xf8f7e825d197bE7E5e72259A47d8DcE85656574a",
      "txHash": "0x032afecb4544e2ff9afaa1054a3f196a477f662a68cf5fe8e5701cce02fcdab9",
      "layout": {
        "storage": [
          {
            "contract": "Initializable",
            "label": "initialized",
            "type": "t_bool",
            "src": "@openzeppelin/contracts-ethereum-package/contracts/Initializable.sol:21"
          },
          {
            "contract": "Initializable",
            "label": "initializing",
            "type": "t_bool",
            "src": "@openzeppelin/contracts-ethereum-package/contracts/Initializable.sol:26"
          },
          {
            "contract": "Initializable",
            "label": "______gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "@openzeppelin/contracts-ethereum-package/contracts/Initializable.sol:61"
          },
          {
            "contract": "ContextUpgradeSafe",
            "label": "__gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "@openzeppelin/contracts-ethereum-package/contracts/GSN/Context.sol:37"
          },
          {
            "contract": "AccessControlUpgradeSafe",
            "label": "_roles",
            "type": "t_mapping(t_bytes32,t_struct(RoleData)260_storage)",
            "src": "@openzeppelin/contracts-ethereum-package/contracts/access/AccessControl.sol:58"
          },
          {
            "contract": "AccessControlUpgradeSafe",
            "label": "__gap",
            "type": "t_array(t_uint256)49_storage",
            "src": "@openzeppelin/contracts-ethereum-package/contracts/access/AccessControl.sol:210"
          },
          {
            "contract": "PausableUpgradeSafe",
            "label": "_paused",
            "type": "t_bool",
            "src": "@openzeppelin/contracts-ethereum-package/contracts/utils/Pausable.sol:26"
          },
          {
            "contract": "PausableUpgradeSafe",
            "label": "__gap",
            "type": "t_array(t_uint256)49_storage",
            "src": "@openzeppelin/contracts-ethereum-package/contracts/utils/Pausable.sol:84"
          },
          {
            "contract": "ReentrancyGuardUpgradeSafe",
            "label": "_notEntered",
            "type": "t_bool",
            "src": "@openzeppelin/contracts-ethereum-package/contracts/utils/ReentrancyGuard.sol:21"
          },
          {
            "contract": "ReentrancyGuardUpgradeSafe",
            "label": "__gap",
            "type": "t_array(t_uint256)49_storage",
            "src": "@openzeppelin/contracts-ethereum-package/contracts/utils/ReentrancyGuard.sol:63"
          },
          {
            "contract": "BaseUpgradeablePausable",
            "label": "__gap1",
            "type": "t_array(t_uint256)50_storage",
            "src": "contracts/protocol/core/BaseUpgradeablePausable.sol:31"
          },
          {
            "contract": "BaseUpgradeablePausable",
            "label": "__gap2",
            "type": "t_array(t_uint256)50_storage",
            "src": "contracts/protocol/core/BaseUpgradeablePausable.sol:32"
          },
          {
            "contract": "BaseUpgradeablePausable",
            "label": "__gap3",
            "type": "t_array(t_uint256)50_storage",
            "src": "contracts/protocol/core/BaseUpgradeablePausable.sol:33"
          },
          {
            "contract": "BaseUpgradeablePausable",
            "label": "__gap4",
            "type": "t_array(t_uint256)50_storage",
            "src": "contracts/protocol/core/BaseUpgradeablePausable.sol:34"
          },
          {
            "contract": "Zapper",
            "label": "config",
            "type": "t_contract(GoldfinchConfig)17591",
            "src": "contracts/protocol/core/Zapper.sol:22"
          },
          {
            "contract": "Zapper",
            "label": "tranchedPoolZaps",
            "type": "t_mapping(t_uint256,t_struct(Zap)26245_storage)",
            "src": "contracts/protocol/core/Zapper.sol:32"
          }
        ],
        "types": {
          "t_contract(GoldfinchConfig)17591": {
            "label": "contract GoldfinchConfig"
          },
          "t_mapping(t_uint256,t_struct(Zap)26245_storage)": {
            "label": "mapping(uint256 => struct Zapper.Zap)"
          },
          "t_uint256": {
            "label": "uint256"
          },
          "t_struct(Zap)26245_storage": {
            "label": "struct Zapper.Zap",
            "members": [
              {
                "label": "owner",
                "type": "t_address"
              },
              {
                "label": "stakingPositionId",
                "type": "t_uint256"
              }
            ]
          },
          "t_address": {
            "label": "address"
          },
          "t_array(t_uint256)50_storage": {
            "label": "uint256[50]"
          },
          "t_bool": {
            "label": "bool"
          },
          "t_array(t_uint256)49_storage": {
            "label": "uint256[49]"
          },
          "t_mapping(t_bytes32,t_struct(RoleData)260_storage)": {
            "label": "mapping(bytes32 => struct AccessControlUpgradeSafe.RoleData)"
          },
          "t_bytes32": {
            "label": "bytes32"
          },
          "t_struct(RoleData)260_storage": {
            "label": "struct AccessControlUpgradeSafe.RoleData",
            "members": [
              {
                "label": "members",
                "type": "t_struct(AddressSet)4204_storage"
              },
              {
                "label": "adminRole",
                "type": "t_bytes32"
              }
            ]
          },
          "t_struct(AddressSet)4204_storage": {
            "label": "struct EnumerableSet.AddressSet",
            "members": [
              {
                "label": "_inner",
                "type": "t_struct(Set)4024_storage"
              }
            ]
          },
          "t_struct(Set)4024_storage": {
            "label": "struct EnumerableSet.Set",
            "members": [
              {
                "label": "_values",
                "type": "t_array(t_bytes32)dyn_storage"
              },
              {
                "label": "_indexes",
                "type": "t_mapping(t_bytes32,t_uint256)"
              }
            ]
          },
          "t_array(t_bytes32)dyn_storage": {
            "label": "bytes32[]"
          },
          "t_mapping(t_bytes32,t_uint256)": {
            "label": "mapping(bytes32 => uint256)"
          }
        }
      }
    }
  }
}
